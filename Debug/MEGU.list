
MEGU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a094  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800a260  0800a260  0000b260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2e0  0800a2e0  0000c098  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2e0  0800a2e0  0000b2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2e8  0800a2e8  0000c098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2e8  0800a2e8  0000b2e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2ec  0800a2ec  0000b2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800a2f0  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  20000098  0800a388  0000c098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  0800a388  0000c564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013915  00000000  00000000  0000c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b02  00000000  00000000  0001f9dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  000224e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e1c  00000000  00000000  000236d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000051a8  00000000  00000000  000244ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000176e6  00000000  00000000  00029694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5e05  00000000  00000000  00040d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00116b7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005538  00000000  00000000  00116bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0011c0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000098 	.word	0x20000098
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800a244 	.word	0x0800a244

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000009c 	.word	0x2000009c
 8000204:	0800a244 	.word	0x0800a244

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_ldivmod>:
 8000b80:	b97b      	cbnz	r3, 8000ba2 <__aeabi_ldivmod+0x22>
 8000b82:	b972      	cbnz	r2, 8000ba2 <__aeabi_ldivmod+0x22>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bfbe      	ittt	lt
 8000b88:	2000      	movlt	r0, #0
 8000b8a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b8e:	e006      	blt.n	8000b9e <__aeabi_ldivmod+0x1e>
 8000b90:	bf08      	it	eq
 8000b92:	2800      	cmpeq	r0, #0
 8000b94:	bf1c      	itt	ne
 8000b96:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b9a:	f04f 30ff 	movne.w	r0, #4294967295
 8000b9e:	f000 b9b5 	b.w	8000f0c <__aeabi_idiv0>
 8000ba2:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000baa:	2900      	cmp	r1, #0
 8000bac:	db09      	blt.n	8000bc2 <__aeabi_ldivmod+0x42>
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	db1a      	blt.n	8000be8 <__aeabi_ldivmod+0x68>
 8000bb2:	f000 f84d 	bl	8000c50 <__udivmoddi4>
 8000bb6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbe:	b004      	add	sp, #16
 8000bc0:	4770      	bx	lr
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	db1b      	blt.n	8000c04 <__aeabi_ldivmod+0x84>
 8000bcc:	f000 f840 	bl	8000c50 <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4240      	negs	r0, r0
 8000bdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000be0:	4252      	negs	r2, r2
 8000be2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000be6:	4770      	bx	lr
 8000be8:	4252      	negs	r2, r2
 8000bea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bee:	f000 f82f 	bl	8000c50 <__udivmoddi4>
 8000bf2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bfa:	b004      	add	sp, #16
 8000bfc:	4240      	negs	r0, r0
 8000bfe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c02:	4770      	bx	lr
 8000c04:	4252      	negs	r2, r2
 8000c06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0a:	f000 f821 	bl	8000c50 <__udivmoddi4>
 8000c0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c16:	b004      	add	sp, #16
 8000c18:	4252      	negs	r2, r2
 8000c1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c1e:	4770      	bx	lr

08000c20 <__aeabi_uldivmod>:
 8000c20:	b953      	cbnz	r3, 8000c38 <__aeabi_uldivmod+0x18>
 8000c22:	b94a      	cbnz	r2, 8000c38 <__aeabi_uldivmod+0x18>
 8000c24:	2900      	cmp	r1, #0
 8000c26:	bf08      	it	eq
 8000c28:	2800      	cmpeq	r0, #0
 8000c2a:	bf1c      	itt	ne
 8000c2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c30:	f04f 30ff 	movne.w	r0, #4294967295
 8000c34:	f000 b96a 	b.w	8000f0c <__aeabi_idiv0>
 8000c38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c40:	f000 f806 	bl	8000c50 <__udivmoddi4>
 8000c44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4c:	b004      	add	sp, #16
 8000c4e:	4770      	bx	lr

08000c50 <__udivmoddi4>:
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	9d08      	ldr	r5, [sp, #32]
 8000c56:	460c      	mov	r4, r1
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d14e      	bne.n	8000cfa <__udivmoddi4+0xaa>
 8000c5c:	4694      	mov	ip, r2
 8000c5e:	458c      	cmp	ip, r1
 8000c60:	4686      	mov	lr, r0
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	d962      	bls.n	8000d2e <__udivmoddi4+0xde>
 8000c68:	b14a      	cbz	r2, 8000c7e <__udivmoddi4+0x2e>
 8000c6a:	f1c2 0320 	rsb	r3, r2, #32
 8000c6e:	4091      	lsls	r1, r2
 8000c70:	fa20 f303 	lsr.w	r3, r0, r3
 8000c74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c78:	4319      	orrs	r1, r3
 8000c7a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c82:	fa1f f68c 	uxth.w	r6, ip
 8000c86:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c96:	fb04 f106 	mul.w	r1, r4, r6
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	d90a      	bls.n	8000cb4 <__udivmoddi4+0x64>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ca6:	f080 8112 	bcs.w	8000ece <__udivmoddi4+0x27e>
 8000caa:	4299      	cmp	r1, r3
 8000cac:	f240 810f 	bls.w	8000ece <__udivmoddi4+0x27e>
 8000cb0:	3c02      	subs	r4, #2
 8000cb2:	4463      	add	r3, ip
 8000cb4:	1a59      	subs	r1, r3, r1
 8000cb6:	fa1f f38e 	uxth.w	r3, lr
 8000cba:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbe:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc6:	fb00 f606 	mul.w	r6, r0, r6
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	d90a      	bls.n	8000ce4 <__udivmoddi4+0x94>
 8000cce:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cd6:	f080 80fc 	bcs.w	8000ed2 <__udivmoddi4+0x282>
 8000cda:	429e      	cmp	r6, r3
 8000cdc:	f240 80f9 	bls.w	8000ed2 <__udivmoddi4+0x282>
 8000ce0:	4463      	add	r3, ip
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cea:	2100      	movs	r1, #0
 8000cec:	b11d      	cbz	r5, 8000cf6 <__udivmoddi4+0xa6>
 8000cee:	40d3      	lsrs	r3, r2
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d905      	bls.n	8000d0a <__udivmoddi4+0xba>
 8000cfe:	b10d      	cbz	r5, 8000d04 <__udivmoddi4+0xb4>
 8000d00:	e9c5 0100 	strd	r0, r1, [r5]
 8000d04:	2100      	movs	r1, #0
 8000d06:	4608      	mov	r0, r1
 8000d08:	e7f5      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000d0a:	fab3 f183 	clz	r1, r3
 8000d0e:	2900      	cmp	r1, #0
 8000d10:	d146      	bne.n	8000da0 <__udivmoddi4+0x150>
 8000d12:	42a3      	cmp	r3, r4
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xcc>
 8000d16:	4290      	cmp	r0, r2
 8000d18:	f0c0 80f0 	bcc.w	8000efc <__udivmoddi4+0x2ac>
 8000d1c:	1a86      	subs	r6, r0, r2
 8000d1e:	eb64 0303 	sbc.w	r3, r4, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	2d00      	cmp	r5, #0
 8000d26:	d0e6      	beq.n	8000cf6 <__udivmoddi4+0xa6>
 8000d28:	e9c5 6300 	strd	r6, r3, [r5]
 8000d2c:	e7e3      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000d2e:	2a00      	cmp	r2, #0
 8000d30:	f040 8090 	bne.w	8000e54 <__udivmoddi4+0x204>
 8000d34:	eba1 040c 	sub.w	r4, r1, ip
 8000d38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d3c:	fa1f f78c 	uxth.w	r7, ip
 8000d40:	2101      	movs	r1, #1
 8000d42:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d46:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d4a:	fb08 4416 	mls	r4, r8, r6, r4
 8000d4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d52:	fb07 f006 	mul.w	r0, r7, r6
 8000d56:	4298      	cmp	r0, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x11c>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x11a>
 8000d64:	4298      	cmp	r0, r3
 8000d66:	f200 80cd 	bhi.w	8000f04 <__udivmoddi4+0x2b4>
 8000d6a:	4626      	mov	r6, r4
 8000d6c:	1a1c      	subs	r4, r3, r0
 8000d6e:	fa1f f38e 	uxth.w	r3, lr
 8000d72:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d76:	fb08 4410 	mls	r4, r8, r0, r4
 8000d7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7e:	fb00 f707 	mul.w	r7, r0, r7
 8000d82:	429f      	cmp	r7, r3
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0x148>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x146>
 8000d90:	429f      	cmp	r7, r3
 8000d92:	f200 80b0 	bhi.w	8000ef6 <__udivmoddi4+0x2a6>
 8000d96:	4620      	mov	r0, r4
 8000d98:	1bdb      	subs	r3, r3, r7
 8000d9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d9e:	e7a5      	b.n	8000cec <__udivmoddi4+0x9c>
 8000da0:	f1c1 0620 	rsb	r6, r1, #32
 8000da4:	408b      	lsls	r3, r1
 8000da6:	fa22 f706 	lsr.w	r7, r2, r6
 8000daa:	431f      	orrs	r7, r3
 8000dac:	fa20 fc06 	lsr.w	ip, r0, r6
 8000db0:	fa04 f301 	lsl.w	r3, r4, r1
 8000db4:	ea43 030c 	orr.w	r3, r3, ip
 8000db8:	40f4      	lsrs	r4, r6
 8000dba:	fa00 f801 	lsl.w	r8, r0, r1
 8000dbe:	0c38      	lsrs	r0, r7, #16
 8000dc0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dc4:	fbb4 fef0 	udiv	lr, r4, r0
 8000dc8:	fa1f fc87 	uxth.w	ip, r7
 8000dcc:	fb00 441e 	mls	r4, r0, lr, r4
 8000dd0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd4:	fb0e f90c 	mul.w	r9, lr, ip
 8000dd8:	45a1      	cmp	r9, r4
 8000dda:	fa02 f201 	lsl.w	r2, r2, r1
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x1a6>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000de6:	f080 8084 	bcs.w	8000ef2 <__udivmoddi4+0x2a2>
 8000dea:	45a1      	cmp	r9, r4
 8000dec:	f240 8081 	bls.w	8000ef2 <__udivmoddi4+0x2a2>
 8000df0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	eba4 0409 	sub.w	r4, r4, r9
 8000dfa:	fa1f f983 	uxth.w	r9, r3
 8000dfe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e02:	fb00 4413 	mls	r4, r0, r3, r4
 8000e06:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e0e:	45a4      	cmp	ip, r4
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x1d2>
 8000e12:	193c      	adds	r4, r7, r4
 8000e14:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e18:	d267      	bcs.n	8000eea <__udivmoddi4+0x29a>
 8000e1a:	45a4      	cmp	ip, r4
 8000e1c:	d965      	bls.n	8000eea <__udivmoddi4+0x29a>
 8000e1e:	3b02      	subs	r3, #2
 8000e20:	443c      	add	r4, r7
 8000e22:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e26:	fba0 9302 	umull	r9, r3, r0, r2
 8000e2a:	eba4 040c 	sub.w	r4, r4, ip
 8000e2e:	429c      	cmp	r4, r3
 8000e30:	46ce      	mov	lr, r9
 8000e32:	469c      	mov	ip, r3
 8000e34:	d351      	bcc.n	8000eda <__udivmoddi4+0x28a>
 8000e36:	d04e      	beq.n	8000ed6 <__udivmoddi4+0x286>
 8000e38:	b155      	cbz	r5, 8000e50 <__udivmoddi4+0x200>
 8000e3a:	ebb8 030e 	subs.w	r3, r8, lr
 8000e3e:	eb64 040c 	sbc.w	r4, r4, ip
 8000e42:	fa04 f606 	lsl.w	r6, r4, r6
 8000e46:	40cb      	lsrs	r3, r1
 8000e48:	431e      	orrs	r6, r3
 8000e4a:	40cc      	lsrs	r4, r1
 8000e4c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e50:	2100      	movs	r1, #0
 8000e52:	e750      	b.n	8000cf6 <__udivmoddi4+0xa6>
 8000e54:	f1c2 0320 	rsb	r3, r2, #32
 8000e58:	fa20 f103 	lsr.w	r1, r0, r3
 8000e5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e60:	fa24 f303 	lsr.w	r3, r4, r3
 8000e64:	4094      	lsls	r4, r2
 8000e66:	430c      	orrs	r4, r1
 8000e68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e6c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e70:	fa1f f78c 	uxth.w	r7, ip
 8000e74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e78:	fb08 3110 	mls	r1, r8, r0, r3
 8000e7c:	0c23      	lsrs	r3, r4, #16
 8000e7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e82:	fb00 f107 	mul.w	r1, r0, r7
 8000e86:	4299      	cmp	r1, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x24c>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e92:	d22c      	bcs.n	8000eee <__udivmoddi4+0x29e>
 8000e94:	4299      	cmp	r1, r3
 8000e96:	d92a      	bls.n	8000eee <__udivmoddi4+0x29e>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	1a5b      	subs	r3, r3, r1
 8000e9e:	b2a4      	uxth	r4, r4
 8000ea0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ea4:	fb08 3311 	mls	r3, r8, r1, r3
 8000ea8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000eac:	fb01 f307 	mul.w	r3, r1, r7
 8000eb0:	42a3      	cmp	r3, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x276>
 8000eb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ebc:	d213      	bcs.n	8000ee6 <__udivmoddi4+0x296>
 8000ebe:	42a3      	cmp	r3, r4
 8000ec0:	d911      	bls.n	8000ee6 <__udivmoddi4+0x296>
 8000ec2:	3902      	subs	r1, #2
 8000ec4:	4464      	add	r4, ip
 8000ec6:	1ae4      	subs	r4, r4, r3
 8000ec8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ecc:	e739      	b.n	8000d42 <__udivmoddi4+0xf2>
 8000ece:	4604      	mov	r4, r0
 8000ed0:	e6f0      	b.n	8000cb4 <__udivmoddi4+0x64>
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e706      	b.n	8000ce4 <__udivmoddi4+0x94>
 8000ed6:	45c8      	cmp	r8, r9
 8000ed8:	d2ae      	bcs.n	8000e38 <__udivmoddi4+0x1e8>
 8000eda:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ede:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ee2:	3801      	subs	r0, #1
 8000ee4:	e7a8      	b.n	8000e38 <__udivmoddi4+0x1e8>
 8000ee6:	4631      	mov	r1, r6
 8000ee8:	e7ed      	b.n	8000ec6 <__udivmoddi4+0x276>
 8000eea:	4603      	mov	r3, r0
 8000eec:	e799      	b.n	8000e22 <__udivmoddi4+0x1d2>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e7d4      	b.n	8000e9c <__udivmoddi4+0x24c>
 8000ef2:	46d6      	mov	lr, sl
 8000ef4:	e77f      	b.n	8000df6 <__udivmoddi4+0x1a6>
 8000ef6:	4463      	add	r3, ip
 8000ef8:	3802      	subs	r0, #2
 8000efa:	e74d      	b.n	8000d98 <__udivmoddi4+0x148>
 8000efc:	4606      	mov	r6, r0
 8000efe:	4623      	mov	r3, r4
 8000f00:	4608      	mov	r0, r1
 8000f02:	e70f      	b.n	8000d24 <__udivmoddi4+0xd4>
 8000f04:	3e02      	subs	r6, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	e730      	b.n	8000d6c <__udivmoddi4+0x11c>
 8000f0a:	bf00      	nop

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8000f18:	2305      	movs	r3, #5
 8000f1a:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f001 facb 	bl	80024bc <null_ptr_check>
 8000f26:	4603      	mov	r3, r0
 8000f28:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d133      	bne.n	8000f9a <bme280_init+0x8a>
		while (try_count) {
 8000f32:	e028      	b.n	8000f86 <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000f34:	f107 010d 	add.w	r1, r7, #13
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	20d0      	movs	r0, #208	@ 0xd0
 8000f3e:	f000 f832 	bl	8000fa6 <bme280_get_regs>
 8000f42:	4603      	mov	r3, r0
 8000f44:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8000f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d114      	bne.n	8000f78 <bme280_init+0x68>
 8000f4e:	7b7b      	ldrb	r3, [r7, #13]
 8000f50:	2b60      	cmp	r3, #96	@ 0x60
 8000f52:	d111      	bne.n	8000f78 <bme280_init+0x68>
				dev->chip_id = chip_id;
 8000f54:	7b7a      	ldrb	r2, [r7, #13]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 f978 	bl	8001250 <bme280_soft_reset>
 8000f60:	4603      	mov	r3, r0
 8000f62:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8000f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d110      	bne.n	8000f8e <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f001 f919 	bl	80021a4 <get_calib_data>
 8000f72:	4603      	mov	r3, r0
 8000f74:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8000f76:	e00a      	b.n	8000f8e <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	4798      	blx	r3
			--try_count;
 8000f80:	7bbb      	ldrb	r3, [r7, #14]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8000f86:	7bbb      	ldrb	r3, [r7, #14]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1d3      	bne.n	8000f34 <bme280_init+0x24>
 8000f8c:	e000      	b.n	8000f90 <bme280_init+0x80>
				break;
 8000f8e:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8000f90:	7bbb      	ldrb	r3, [r7, #14]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8000f96:	23fe      	movs	r3, #254	@ 0xfe
 8000f98:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8000fa6:	b590      	push	{r4, r7, lr}
 8000fa8:	b087      	sub	sp, #28
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f001 fa7f 	bl	80024bc <null_ptr_check>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8000fc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d117      	bne.n	8000ffa <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	789b      	ldrb	r3, [r3, #2]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d003      	beq.n	8000fda <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fd8:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685c      	ldr	r4, [r3, #4]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7858      	ldrb	r0, [r3, #1]
 8000fe2:	89bb      	ldrh	r3, [r7, #12]
 8000fe4:	7bf9      	ldrb	r1, [r7, #15]
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	47a0      	blx	r4
 8000fea:	4603      	mov	r3, r0
 8000fec:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8000fee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8000ff6:	23fc      	movs	r3, #252	@ 0xfc
 8000ff8:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8000ffa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	371c      	adds	r7, #28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd90      	pop	{r4, r7, pc}

08001006 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8001006:	b590      	push	{r4, r7, lr}
 8001008:	b08d      	sub	sp, #52	@ 0x34
 800100a:	af00      	add	r7, sp, #0
 800100c:	60f8      	str	r0, [r7, #12]
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	4613      	mov	r3, r2
 8001014:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2b0a      	cmp	r3, #10
 800101a:	d901      	bls.n	8001020 <bme280_set_regs+0x1a>
		len = 10;
 800101c:	230a      	movs	r3, #10
 800101e:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001020:	6838      	ldr	r0, [r7, #0]
 8001022:	f001 fa4b 	bl	80024bc <null_ptr_check>
 8001026:	4603      	mov	r3, r0
 8001028:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 800102c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001030:	2b00      	cmp	r3, #0
 8001032:	d156      	bne.n	80010e2 <bme280_set_regs+0xdc>
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d053      	beq.n	80010e2 <bme280_set_regs+0xdc>
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d050      	beq.n	80010e2 <bme280_set_regs+0xdc>
		if (len != 0) {
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d049      	beq.n	80010da <bme280_set_regs+0xd4>
			temp_buff[0] = reg_data[0];
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	789b      	ldrb	r3, [r3, #2]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d01a      	beq.n	800108a <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001054:	2300      	movs	r3, #0
 8001056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800105a:	e011      	b.n	8001080 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800105c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	4413      	add	r3, r2
 8001064:	781a      	ldrb	r2, [r3, #0]
 8001066:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800106a:	68f9      	ldr	r1, [r7, #12]
 800106c:	440b      	add	r3, r1
 800106e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001076:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800107a:	3301      	adds	r3, #1
 800107c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8001080:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	429a      	cmp	r2, r3
 8001088:	d3e8      	bcc.n	800105c <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d90d      	bls.n	80010ac <bme280_set_regs+0xa6>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f107 0114 	add.w	r1, r7, #20
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f001 f8c8 	bl	800222e <interleave_reg_addr>
				temp_len = ((len * 2) - 1);
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	3b01      	subs	r3, #1
 80010a8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80010aa:	e001      	b.n	80010b0 <bme280_set_regs+0xaa>
			} else {
				temp_len = len;
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	689c      	ldr	r4, [r3, #8]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	7858      	ldrb	r0, [r3, #1]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	7819      	ldrb	r1, [r3, #0]
 80010bc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80010be:	f107 0214 	add.w	r2, r7, #20
 80010c2:	47a0      	blx	r4
 80010c4:	4603      	mov	r3, r0
 80010c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 80010ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00b      	beq.n	80010ea <bme280_set_regs+0xe4>
				rslt = BME280_E_COMM_FAIL;
 80010d2:	23fc      	movs	r3, #252	@ 0xfc
 80010d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (len != 0) {
 80010d8:	e007      	b.n	80010ea <bme280_set_regs+0xe4>
		} else {
			rslt = BME280_E_INVALID_LEN;
 80010da:	23fd      	movs	r3, #253	@ 0xfd
 80010dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (len != 0) {
 80010e0:	e003      	b.n	80010ea <bme280_set_regs+0xe4>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80010e2:	23ff      	movs	r3, #255	@ 0xff
 80010e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80010e8:	e000      	b.n	80010ec <bme280_set_regs+0xe6>
		if (len != 0) {
 80010ea:	bf00      	nop
	}


	return rslt;
 80010ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3734      	adds	r7, #52	@ 0x34
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd90      	pop	{r4, r7, pc}

080010f8 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001104:	6838      	ldr	r0, [r7, #0]
 8001106:	f001 f9d9 	bl	80024bc <null_ptr_check>
 800110a:	4603      	mov	r3, r0
 800110c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d13f      	bne.n	8001196 <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8001116:	f107 030e 	add.w	r3, r7, #14
 800111a:	6839      	ldr	r1, [r7, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f000 f874 	bl	800120a <bme280_get_sensor_mode>
 8001122:	4603      	mov	r3, r0
 8001124:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d107      	bne.n	800113e <bme280_set_sensor_settings+0x46>
 800112e:	7bbb      	ldrb	r3, [r7, #14]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d004      	beq.n	800113e <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8001134:	6838      	ldr	r0, [r7, #0]
 8001136:	f000 fb36 	bl	80017a6 <put_device_to_sleep>
 800113a:	4603      	mov	r3, r0
 800113c:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d127      	bne.n	8001196 <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	4619      	mov	r1, r3
 800114a:	2007      	movs	r0, #7
 800114c:	f001 f99a 	bl	8002484 <are_settings_changed>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d009      	beq.n	800116a <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f000 f972 	bl	800144a <set_osr_settings>
 8001166:	4603      	mov	r3, r0
 8001168:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d111      	bne.n	8001196 <bme280_set_sensor_settings+0x9e>
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	4619      	mov	r1, r3
 8001176:	2018      	movs	r0, #24
 8001178:	f001 f984 	bl	8002484 <are_settings_changed>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f9f9 	bl	8001584 <set_filter_standby_settings>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b084      	sub	sp, #16
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	6039      	str	r1, [r7, #0]
 80011ac:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011ae:	6838      	ldr	r0, [r7, #0]
 80011b0:	f001 f984 	bl	80024bc <null_ptr_check>
 80011b4:	4603      	mov	r3, r0
 80011b6:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80011b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d11e      	bne.n	80011fe <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80011c0:	f107 030e 	add.w	r3, r7, #14
 80011c4:	6839      	ldr	r1, [r7, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 f81f 	bl	800120a <bme280_get_sensor_mode>
 80011cc:	4603      	mov	r3, r0
 80011ce:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80011d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d107      	bne.n	80011e8 <bme280_set_sensor_mode+0x46>
 80011d8:	7bbb      	ldrb	r3, [r7, #14]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d004      	beq.n	80011e8 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 80011de:	6838      	ldr	r0, [r7, #0]
 80011e0:	f000 fae1 	bl	80017a6 <put_device_to_sleep>
 80011e4:	4603      	mov	r3, r0
 80011e6:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 80011e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d106      	bne.n	80011fe <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	6839      	ldr	r1, [r7, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 faa3 	bl	8001740 <write_power_mode>
 80011fa:	4603      	mov	r3, r0
 80011fc:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80011fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b084      	sub	sp, #16
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001214:	6838      	ldr	r0, [r7, #0]
 8001216:	f001 f951 	bl	80024bc <null_ptr_check>
 800121a:	4603      	mov	r3, r0
 800121c:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10e      	bne.n	8001244 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	2201      	movs	r2, #1
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	20f4      	movs	r0, #244	@ 0xf4
 800122e:	f7ff feba 	bl	8000fa6 <bme280_get_regs>
 8001232:	4603      	mov	r3, r0
 8001234:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	b2da      	uxtb	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8001244:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8001258:	23e0      	movs	r3, #224	@ 0xe0
 800125a:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 800125c:	23b6      	movs	r3, #182	@ 0xb6
 800125e:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f001 f92b 	bl	80024bc <null_ptr_check>
 8001266:	4603      	mov	r3, r0
 8001268:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10d      	bne.n	800128e <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001272:	f107 010d 	add.w	r1, r7, #13
 8001276:	f107 000e 	add.w	r0, r7, #14
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f7ff fec2 	bl	8001006 <bme280_set_regs>
 8001282:	4603      	mov	r3, r0
 8001284:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	2002      	movs	r0, #2
 800128c:	4798      	blx	r3
	}

	return rslt;
 800128e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b08a      	sub	sp, #40	@ 0x28
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f001 f8fd 	bl	80024bc <null_ptr_check>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 80012c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d124      	bne.n	800131a <bme280_get_sensor_data+0x80>
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d021      	beq.n	800131a <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 80012d6:	f107 011c 	add.w	r1, r7, #28
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2208      	movs	r2, #8
 80012de:	20f7      	movs	r0, #247	@ 0xf7
 80012e0:	f7ff fe61 	bl	8000fa6 <bme280_get_regs>
 80012e4:	4603      	mov	r3, r0
 80012e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if (rslt == BME280_OK) {
 80012ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d116      	bne.n	8001320 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 80012f2:	f107 0210 	add.w	r2, r7, #16
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 f815 	bl	800132c <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3310      	adds	r3, #16
 8001306:	f107 0110 	add.w	r1, r7, #16
 800130a:	7bf8      	ldrb	r0, [r7, #15]
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	f000 f853 	bl	80013b8 <bme280_compensate_data>
 8001312:	4603      	mov	r3, r0
 8001314:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt == BME280_OK) {
 8001318:	e002      	b.n	8001320 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800131a:	23ff      	movs	r3, #255	@ 0xff
 800131c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return rslt;
 8001320:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8001324:	4618      	mov	r0, r3
 8001326:	3728      	adds	r7, #40	@ 0x28
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 800132c:	b480      	push	{r7}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	031b      	lsls	r3, r3, #12
 800133c:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3301      	adds	r3, #1
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	011b      	lsls	r3, r3, #4
 8001346:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3302      	adds	r3, #2
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	091b      	lsrs	r3, r3, #4
 8001350:	b2db      	uxtb	r3, r3
 8001352:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	431a      	orrs	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	431a      	orrs	r2, r3
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3303      	adds	r3, #3
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	031b      	lsls	r3, r3, #12
 800136a:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3304      	adds	r3, #4
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	011b      	lsls	r3, r3, #4
 8001374:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3305      	adds	r3, #5
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	091b      	lsrs	r3, r3, #4
 800137e:	b2db      	uxtb	r3, r3
 8001380:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	431a      	orrs	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	431a      	orrs	r2, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3306      	adds	r3, #6
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	3307      	adds	r3, #7
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	431a      	orrs	r2, r3
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	609a      	str	r2, [r3, #8]
}
 80013ac:	bf00      	nop
 80013ae:	371c      	adds	r7, #28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	4603      	mov	r3, r0
 80013c6:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d033      	beq.n	800143a <bme280_compensate_data+0x82>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d030      	beq.n	800143a <bme280_compensate_data+0x82>
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d02d      	beq.n	800143a <bme280_compensate_data+0x82>
		/* Initialize to zero */
		comp_data->temperature = 0;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
		comp_data->pressure = 0;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
		comp_data->humidity = 0;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d006      	beq.n	8001408 <bme280_compensate_data+0x50>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80013fa:	6839      	ldr	r1, [r7, #0]
 80013fc:	68b8      	ldr	r0, [r7, #8]
 80013fe:	f000 fa1f 	bl	8001840 <compensate_temperature>
 8001402:	4602      	mov	r2, r0
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	605a      	str	r2, [r3, #4]
		}
		if (sensor_comp & BME280_PRESS) {
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d006      	beq.n	8001420 <bme280_compensate_data+0x68>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8001412:	6839      	ldr	r1, [r7, #0]
 8001414:	68b8      	ldr	r0, [r7, #8]
 8001416:	f000 fa75 	bl	8001904 <compensate_pressure>
 800141a:	4602      	mov	r2, r0
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	601a      	str	r2, [r3, #0]
		}
		if (sensor_comp & BME280_HUM) {
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	2b00      	cmp	r3, #0
 8001428:	d009      	beq.n	800143e <bme280_compensate_data+0x86>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 800142a:	6839      	ldr	r1, [r7, #0]
 800142c:	68b8      	ldr	r0, [r7, #8]
 800142e:	f000 fe0d 	bl	800204c <compensate_humidity>
 8001432:	4602      	mov	r2, r0
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	609a      	str	r2, [r3, #8]
		if (sensor_comp & BME280_HUM) {
 8001438:	e001      	b.n	800143e <bme280_compensate_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800143a:	23ff      	movs	r3, #255	@ 0xff
 800143c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800143e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8001458:	2301      	movs	r3, #1
 800145a:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	2b00      	cmp	r3, #0
 8001464:	d005      	beq.n	8001472 <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	68b8      	ldr	r0, [r7, #8]
 800146a:	f000 f815 	bl	8001498 <set_osr_humidity_settings>
 800146e:	4603      	mov	r3, r0
 8001470:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	2b00      	cmp	r3, #0
 800147a:	d007      	beq.n	800148c <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f842 	bl	800150c <set_osr_press_temp_settings>
 8001488:	4603      	mov	r3, r0
 800148a:	75fb      	strb	r3, [r7, #23]

	return rslt;
 800148c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80014a2:	23f2      	movs	r3, #242	@ 0xf2
 80014a4:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	789b      	ldrb	r3, [r3, #2]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80014b2:	f107 010e 	add.w	r1, r7, #14
 80014b6:	f107 000c 	add.w	r0, r7, #12
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	2201      	movs	r2, #1
 80014be:	f7ff fda2 	bl	8001006 <bme280_set_regs>
 80014c2:	4603      	mov	r3, r0
 80014c4:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 80014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d118      	bne.n	8001500 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 80014ce:	23f4      	movs	r3, #244	@ 0xf4
 80014d0:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80014d2:	7b38      	ldrb	r0, [r7, #12]
 80014d4:	f107 010d 	add.w	r1, r7, #13
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	2201      	movs	r2, #1
 80014dc:	f7ff fd63 	bl	8000fa6 <bme280_get_regs>
 80014e0:	4603      	mov	r3, r0
 80014e2:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 80014e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d109      	bne.n	8001500 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80014ec:	f107 010d 	add.w	r1, r7, #13
 80014f0:	f107 000c 	add.w	r0, r7, #12
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f7ff fd85 	bl	8001006 <bme280_set_regs>
 80014fc:	4603      	mov	r3, r0
 80014fe:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001500:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
 8001518:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 800151a:	23f4      	movs	r3, #244	@ 0xf4
 800151c:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800151e:	7db8      	ldrb	r0, [r7, #22]
 8001520:	f107 0115 	add.w	r1, r7, #21
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	f7ff fd3d 	bl	8000fa6 <bme280_get_regs>
 800152c:	4603      	mov	r3, r0
 800152e:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001530:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d11f      	bne.n	8001578 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d005      	beq.n	800154e <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 8001542:	f107 0315 	add.w	r3, r7, #21
 8001546:	68b9      	ldr	r1, [r7, #8]
 8001548:	4618      	mov	r0, r3
 800154a:	f000 f88e 	bl	800166a <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d005      	beq.n	8001564 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 8001558:	f107 0315 	add.w	r3, r7, #21
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f8a0 	bl	80016a4 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001564:	f107 0115 	add.w	r1, r7, #21
 8001568:	f107 0016 	add.w	r0, r7, #22
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f7ff fd49 	bl	8001006 <bme280_set_regs>
 8001574:	4603      	mov	r3, r0
 8001576:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001578:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8001592:	23f5      	movs	r3, #245	@ 0xf5
 8001594:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001596:	7db8      	ldrb	r0, [r7, #22]
 8001598:	f107 0115 	add.w	r1, r7, #21
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f7ff fd01 	bl	8000fa6 <bme280_get_regs>
 80015a4:	4603      	mov	r3, r0
 80015a6:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 80015a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d11f      	bne.n	80015f0 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d005      	beq.n	80015c6 <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 80015ba:	f107 0315 	add.w	r3, r7, #21
 80015be:	68b9      	ldr	r1, [r7, #8]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 f81b 	bl	80015fc <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	f003 0310 	and.w	r3, r3, #16
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d005      	beq.n	80015dc <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 80015d0:	f107 0315 	add.w	r3, r7, #21
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f82d 	bl	8001636 <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80015dc:	f107 0115 	add.w	r1, r7, #21
 80015e0:	f107 0016 	add.w	r0, r7, #22
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f7ff fd0d 	bl	8001006 <bme280_set_regs>
 80015ec:	4603      	mov	r3, r0
 80015ee:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80015f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	b25b      	sxtb	r3, r3
 800160c:	f023 031c 	bic.w	r3, r3, #28
 8001610:	b25a      	sxtb	r2, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	78db      	ldrb	r3, [r3, #3]
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	b25b      	sxtb	r3, r3
 800161a:	f003 031c 	and.w	r3, r3, #28
 800161e:	b25b      	sxtb	r3, r3
 8001620:	4313      	orrs	r3, r2
 8001622:	b25b      	sxtb	r3, r3
 8001624:	b2da      	uxtb	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	701a      	strb	r2, [r3, #0]
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	b25b      	sxtb	r3, r3
 8001646:	f003 031f 	and.w	r3, r3, #31
 800164a:	b25a      	sxtb	r2, r3
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	791b      	ldrb	r3, [r3, #4]
 8001650:	015b      	lsls	r3, r3, #5
 8001652:	b25b      	sxtb	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b25b      	sxtb	r3, r3
 8001658:	b2da      	uxtb	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	701a      	strb	r2, [r3, #0]
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	b25b      	sxtb	r3, r3
 800167a:	f023 031c 	bic.w	r3, r3, #28
 800167e:	b25a      	sxtb	r2, r3
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	b25b      	sxtb	r3, r3
 8001688:	f003 031c 	and.w	r3, r3, #28
 800168c:	b25b      	sxtb	r3, r3
 800168e:	4313      	orrs	r3, r2
 8001690:	b25b      	sxtb	r3, r3
 8001692:	b2da      	uxtb	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	701a      	strb	r2, [r3, #0]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	f003 031f 	and.w	r3, r3, #31
 80016b8:	b25a      	sxtb	r2, r3
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	785b      	ldrb	r3, [r3, #1]
 80016be:	015b      	lsls	r3, r3, #5
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	701a      	strb	r2, [r3, #0]
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3302      	adds	r3, #2
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	109b      	asrs	r3, r3, #2
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3302      	adds	r3, #2
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	b2da      	uxtb	r2, r3
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3303      	adds	r3, #3
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	109b      	asrs	r3, r3, #2
 800171a:	b2db      	uxtb	r3, r3
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	b2da      	uxtb	r2, r3
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3303      	adds	r3, #3
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	095b      	lsrs	r3, r3, #5
 800172e:	b2da      	uxtb	r2, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	711a      	strb	r2, [r3, #4]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 800174c:	23f4      	movs	r3, #244	@ 0xf4
 800174e:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8001750:	7bb8      	ldrb	r0, [r7, #14]
 8001752:	f107 010d 	add.w	r1, r7, #13
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	2201      	movs	r2, #1
 800175a:	f7ff fc24 	bl	8000fa6 <bme280_get_regs>
 800175e:	4603      	mov	r3, r0
 8001760:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 8001762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d117      	bne.n	800179a <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 800176a:	7b7b      	ldrb	r3, [r7, #13]
 800176c:	b25b      	sxtb	r3, r3
 800176e:	f023 0303 	bic.w	r3, r3, #3
 8001772:	b25a      	sxtb	r2, r3
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	b25b      	sxtb	r3, r3
 800177e:	4313      	orrs	r3, r2
 8001780:	b25b      	sxtb	r3, r3
 8001782:	b2db      	uxtb	r3, r3
 8001784:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8001786:	f107 010d 	add.w	r1, r7, #13
 800178a:	f107 000e 	add.w	r0, r7, #14
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	2201      	movs	r2, #1
 8001792:	f7ff fc38 	bl	8001006 <bme280_set_regs>
 8001796:	4603      	mov	r3, r0
 8001798:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800179a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 80017ae:	f107 0110 	add.w	r1, r7, #16
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2204      	movs	r2, #4
 80017b6:	20f2      	movs	r0, #242	@ 0xf2
 80017b8:	f7ff fbf5 	bl	8000fa6 <bme280_get_regs>
 80017bc:	4603      	mov	r3, r0
 80017be:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 80017c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d118      	bne.n	80017fa <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 80017c8:	f107 0208 	add.w	r2, r7, #8
 80017cc:	f107 0310 	add.w	r3, r7, #16
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ff80 	bl	80016d8 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff fd39 	bl	8001250 <bme280_soft_reset>
 80017de:	4603      	mov	r3, r0
 80017e0:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 80017e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d107      	bne.n	80017fa <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 80017ea:	f107 0308 	add.w	r3, r7, #8
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 f808 	bl	8001806 <reload_device_settings>
 80017f6:	4603      	mov	r3, r0
 80017f8:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80017fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b084      	sub	sp, #16
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	201f      	movs	r0, #31
 8001816:	f7ff fe18 	bl	800144a <set_osr_settings>
 800181a:	4603      	mov	r3, r0
 800181c:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 800181e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d106      	bne.n	8001834 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	201f      	movs	r0, #31
 800182c:	f7ff feaa 	bl	8001584 <set_filter_standby_settings>
 8001830:	4603      	mov	r3, r0
 8001832:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8001834:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in integer data type.
 */
static int32_t compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	@ 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
	int32_t var1;
	int32_t var2;
	int32_t temperature;
	int32_t temperature_min = -4000;
 800184a:	4b2d      	ldr	r3, [pc, #180]	@ (8001900 <compensate_temperature+0xc0>)
 800184c:	61bb      	str	r3, [r7, #24]
	int32_t temperature_max = 8500;
 800184e:	f242 1334 	movw	r3, #8500	@ 0x2134
 8001852:	617b      	str	r3, [r7, #20]

	var1 = (int32_t)((uncomp_data->temperature / 8) - ((int32_t)calib_data->dig_T1 * 2));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	08db      	lsrs	r3, r3, #3
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	8812      	ldrh	r2, [r2, #0]
 800185e:	0052      	lsls	r2, r2, #1
 8001860:	1a9b      	subs	r3, r3, r2
 8001862:	613b      	str	r3, [r7, #16]
	var1 = (var1 * ((int32_t)calib_data->dig_T2)) / 2048;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800186a:	461a      	mov	r2, r3
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	fb02 f303 	mul.w	r3, r2, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	da01      	bge.n	800187a <compensate_temperature+0x3a>
 8001876:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 800187a:	12db      	asrs	r3, r3, #11
 800187c:	613b      	str	r3, [r7, #16]
	var2 = (int32_t)((uncomp_data->temperature / 16) - ((int32_t)calib_data->dig_T1));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	8812      	ldrh	r2, [r2, #0]
 8001888:	1a9b      	subs	r3, r3, r2
 800188a:	60fb      	str	r3, [r7, #12]
	var2 = (((var2 * var2) / 4096) * ((int32_t)calib_data->dig_T3)) / 16384;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	fb03 f303 	mul.w	r3, r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	da01      	bge.n	800189a <compensate_temperature+0x5a>
 8001896:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800189a:	131b      	asrs	r3, r3, #12
 800189c:	461a      	mov	r2, r3
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018a4:	fb02 f303 	mul.w	r3, r2, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	da02      	bge.n	80018b2 <compensate_temperature+0x72>
 80018ac:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80018b0:	333f      	adds	r3, #63	@ 0x3f
 80018b2:	139b      	asrs	r3, r3, #14
 80018b4:	60fb      	str	r3, [r7, #12]
	calib_data->t_fine = var1 + var2;
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	441a      	add	r2, r3
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	625a      	str	r2, [r3, #36]	@ 0x24
	temperature = (calib_data->t_fine * 5 + 128) / 256;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	3380      	adds	r3, #128	@ 0x80
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	da00      	bge.n	80018d2 <compensate_temperature+0x92>
 80018d0:	33ff      	adds	r3, #255	@ 0xff
 80018d2:	121b      	asrs	r3, r3, #8
 80018d4:	61fb      	str	r3, [r7, #28]

	if (temperature < temperature_min)
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	429a      	cmp	r2, r3
 80018dc:	da02      	bge.n	80018e4 <compensate_temperature+0xa4>
		temperature = temperature_min;
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	e005      	b.n	80018f0 <compensate_temperature+0xb0>
	else if (temperature > temperature_max)
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	dd01      	ble.n	80018f0 <compensate_temperature+0xb0>
		temperature = temperature_max;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	61fb      	str	r3, [r7, #28]

	return temperature;
 80018f0:	69fb      	ldr	r3, [r7, #28]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	@ 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	fffff060 	.word	0xfffff060

08001904 <compensate_pressure>:
 * return the compensated pressure data in integer data type with higher
 * accuracy.
 */
static uint32_t compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001908:	b0ea      	sub	sp, #424	@ 0x1a8
 800190a:	af00      	add	r7, sp, #0
 800190c:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
 8001910:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int64_t var4;
	uint32_t pressure;
	uint32_t pressure_min = 3000000;
 8001914:	4bbf      	ldr	r3, [pc, #764]	@ (8001c14 <compensate_pressure+0x310>)
 8001916:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
	uint32_t pressure_max = 11000000;
 800191a:	4bbf      	ldr	r3, [pc, #764]	@ (8001c18 <compensate_pressure+0x314>)
 800191c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c

	var1 = ((int64_t)calib_data->t_fine) - 128000;
 8001920:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001926:	17da      	asrs	r2, r3, #31
 8001928:	4698      	mov	r8, r3
 800192a:	4691      	mov	r9, r2
 800192c:	f5b8 3afa 	subs.w	sl, r8, #128000	@ 0x1f400
 8001930:	f149 3bff 	adc.w	fp, r9, #4294967295
 8001934:	e9c7 ab64 	strd	sl, fp, [r7, #400]	@ 0x190
	var2 = var1 * var1 * (int64_t)calib_data->dig_P6;
 8001938:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800193c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001940:	fb03 f102 	mul.w	r1, r3, r2
 8001944:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001948:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800194c:	fb02 f303 	mul.w	r3, r2, r3
 8001950:	18ca      	adds	r2, r1, r3
 8001952:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001956:	fba3 4503 	umull	r4, r5, r3, r3
 800195a:	1953      	adds	r3, r2, r5
 800195c:	461d      	mov	r5, r3
 800195e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001962:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001966:	b21b      	sxth	r3, r3
 8001968:	17da      	asrs	r2, r3, #31
 800196a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800196e:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8001972:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8001976:	4603      	mov	r3, r0
 8001978:	fb03 f205 	mul.w	r2, r3, r5
 800197c:	460b      	mov	r3, r1
 800197e:	fb04 f303 	mul.w	r3, r4, r3
 8001982:	4413      	add	r3, r2
 8001984:	4602      	mov	r2, r0
 8001986:	fba4 1202 	umull	r1, r2, r4, r2
 800198a:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 800198e:	460a      	mov	r2, r1
 8001990:	f8c7 2128 	str.w	r2, [r7, #296]	@ 0x128
 8001994:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001998:	4413      	add	r3, r2
 800199a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800199e:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	@ 0x128
 80019a2:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
 80019a6:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var2 = var2 + ((var1 * (int64_t)calib_data->dig_P5) * 131072);
 80019aa:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80019ae:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80019b2:	b21b      	sxth	r3, r3
 80019b4:	17da      	asrs	r2, r3, #31
 80019b6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80019ba:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80019be:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80019c2:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 80019c6:	462a      	mov	r2, r5
 80019c8:	fb02 f203 	mul.w	r2, r2, r3
 80019cc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80019d0:	4621      	mov	r1, r4
 80019d2:	fb01 f303 	mul.w	r3, r1, r3
 80019d6:	441a      	add	r2, r3
 80019d8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80019dc:	4621      	mov	r1, r4
 80019de:	fba3 1301 	umull	r1, r3, r3, r1
 80019e2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80019e6:	460b      	mov	r3, r1
 80019e8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80019ec:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80019f0:	18d3      	adds	r3, r2, r3
 80019f2:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80019f6:	f04f 0000 	mov.w	r0, #0
 80019fa:	f04f 0100 	mov.w	r1, #0
 80019fe:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	@ 0x168
 8001a02:	462b      	mov	r3, r5
 8001a04:	0459      	lsls	r1, r3, #17
 8001a06:	4623      	mov	r3, r4
 8001a08:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001a0c:	4623      	mov	r3, r4
 8001a0e:	0458      	lsls	r0, r3, #17
 8001a10:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001a14:	1814      	adds	r4, r2, r0
 8001a16:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8001a1a:	414b      	adcs	r3, r1
 8001a1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001a20:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8001a24:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var2 = var2 + (((int64_t)calib_data->dig_P4) * 34359738368);
 8001a28:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001a2c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	17da      	asrs	r2, r3, #31
 8001a34:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001a38:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8001a3c:	f04f 0000 	mov.w	r0, #0
 8001a40:	f04f 0100 	mov.w	r1, #0
 8001a44:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001a48:	00d9      	lsls	r1, r3, #3
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001a50:	1814      	adds	r4, r2, r0
 8001a52:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 8001a56:	414b      	adcs	r3, r1
 8001a58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001a5c:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	@ 0xa0
 8001a60:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
	var1 = ((var1 * var1 * (int64_t)calib_data->dig_P3) / 256) + ((var1 * ((int64_t)calib_data->dig_P2) * 4096));
 8001a64:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001a68:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a6c:	fb03 f102 	mul.w	r1, r3, r2
 8001a70:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001a74:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a78:	fb02 f303 	mul.w	r3, r2, r3
 8001a7c:	18ca      	adds	r2, r1, r3
 8001a7e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001a82:	fba3 1303 	umull	r1, r3, r3, r3
 8001a86:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8001a90:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001a94:	18d3      	adds	r3, r2, r3
 8001a96:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001a9a:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001a9e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001aa2:	b21b      	sxth	r3, r3
 8001aa4:	17da      	asrs	r2, r3, #31
 8001aa6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8001aaa:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8001aae:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8001ab2:	462b      	mov	r3, r5
 8001ab4:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	@ 0x108
 8001ab8:	4642      	mov	r2, r8
 8001aba:	fb02 f203 	mul.w	r2, r2, r3
 8001abe:	464b      	mov	r3, r9
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	fb01 f303 	mul.w	r3, r1, r3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	4622      	mov	r2, r4
 8001aca:	4641      	mov	r1, r8
 8001acc:	fba2 1201 	umull	r1, r2, r2, r1
 8001ad0:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8001ad4:	460a      	mov	r2, r1
 8001ad6:	f8c7 2158 	str.w	r2, [r7, #344]	@ 0x158
 8001ada:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8001ade:	4413      	add	r3, r2
 8001ae0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001ae4:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da09      	bge.n	8001b00 <compensate_pressure+0x1fc>
 8001aec:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001af0:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8001af4:	f143 0300 	adc.w	r3, r3, #0
 8001af8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001afc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001b00:	f04f 0000 	mov.w	r0, #0
 8001b04:	f04f 0100 	mov.w	r1, #0
 8001b08:	0a10      	lsrs	r0, r2, #8
 8001b0a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001b0e:	1219      	asrs	r1, r3, #8
 8001b10:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001b14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b18:	b21b      	sxth	r3, r3
 8001b1a:	17da      	asrs	r2, r3, #31
 8001b1c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001b20:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001b24:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b28:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 8001b2c:	464a      	mov	r2, r9
 8001b2e:	fb02 f203 	mul.w	r2, r2, r3
 8001b32:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001b36:	4644      	mov	r4, r8
 8001b38:	fb04 f303 	mul.w	r3, r4, r3
 8001b3c:	441a      	add	r2, r3
 8001b3e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001b42:	4644      	mov	r4, r8
 8001b44:	fba3 4304 	umull	r4, r3, r3, r4
 8001b48:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001b4c:	4623      	mov	r3, r4
 8001b4e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001b52:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001b56:	18d3      	adds	r3, r2, r3
 8001b58:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	@ 0x150
 8001b68:	464c      	mov	r4, r9
 8001b6a:	0323      	lsls	r3, r4, #12
 8001b6c:	4644      	mov	r4, r8
 8001b6e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001b72:	4644      	mov	r4, r8
 8001b74:	0322      	lsls	r2, r4, #12
 8001b76:	1884      	adds	r4, r0, r2
 8001b78:	f8c7 4090 	str.w	r4, [r7, #144]	@ 0x90
 8001b7c:	eb41 0303 	adc.w	r3, r1, r3
 8001b80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b84:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8001b88:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
	var3 = ((int64_t)1) * 140737488355328;
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b94:	e9c7 2360 	strd	r2, r3, [r7, #384]	@ 0x180
	var1 = (var3 + var1) * ((int64_t)calib_data->dig_P1) / 8589934592;
 8001b98:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 8001b9c:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001ba0:	1884      	adds	r4, r0, r2
 8001ba2:	f8c7 40f8 	str.w	r4, [r7, #248]	@ 0xf8
 8001ba6:	eb41 0303 	adc.w	r3, r1, r3
 8001baa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001bae:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001bb2:	88db      	ldrh	r3, [r3, #6]
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001bbc:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001bc0:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001bc4:	462b      	mov	r3, r5
 8001bc6:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8001bca:	4642      	mov	r2, r8
 8001bcc:	fb02 f203 	mul.w	r2, r2, r3
 8001bd0:	464b      	mov	r3, r9
 8001bd2:	4621      	mov	r1, r4
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	4413      	add	r3, r2
 8001bda:	4622      	mov	r2, r4
 8001bdc:	4641      	mov	r1, r8
 8001bde:	fba2 1201 	umull	r1, r2, r2, r1
 8001be2:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001be6:	460a      	mov	r2, r1
 8001be8:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001bec:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001bf0:	4413      	add	r3, r2
 8001bf2:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001bf6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	da0e      	bge.n	8001c1c <compensate_pressure+0x318>
 8001bfe:	1e51      	subs	r1, r2, #1
 8001c00:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8001c04:	f143 0301 	adc.w	r3, r3, #1
 8001c08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001c0c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001c10:	e004      	b.n	8001c1c <compensate_pressure+0x318>
 8001c12:	bf00      	nop
 8001c14:	002dc6c0 	.word	0x002dc6c0
 8001c18:	00a7d8c0 	.word	0x00a7d8c0
 8001c1c:	f04f 0000 	mov.w	r0, #0
 8001c20:	f04f 0100 	mov.w	r1, #0
 8001c24:	1058      	asrs	r0, r3, #1
 8001c26:	17d9      	asrs	r1, r3, #31
 8001c28:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190

	/* To avoid divide by zero exception */
	if (var1 != 0) {
 8001c2c:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001c30:	4313      	orrs	r3, r2
 8001c32:	f000 81fc 	beq.w	800202e <compensate_pressure+0x72a>
		var4 = 1048576 - uncomp_data->pressure;
 8001c36:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001c40:	2200      	movs	r2, #0
 8001c42:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001c46:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001c4a:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8001c4e:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
		var4 = (((var4 * 2147483648) - var2) * 3125) / var1;
 8001c52:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001c56:	f04f 0000 	mov.w	r0, #0
 8001c5a:	f04f 0100 	mov.w	r1, #0
 8001c5e:	07d9      	lsls	r1, r3, #31
 8001c60:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001c64:	07d0      	lsls	r0, r2, #31
 8001c66:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001c6a:	1a84      	subs	r4, r0, r2
 8001c6c:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 8001c70:	eb61 0303 	sbc.w	r3, r1, r3
 8001c74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001c78:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001c7c:	4622      	mov	r2, r4
 8001c7e:	462b      	mov	r3, r5
 8001c80:	1891      	adds	r1, r2, r2
 8001c82:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001c84:	415b      	adcs	r3, r3
 8001c86:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001c88:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001c8c:	4621      	mov	r1, r4
 8001c8e:	1851      	adds	r1, r2, r1
 8001c90:	6739      	str	r1, [r7, #112]	@ 0x70
 8001c92:	4629      	mov	r1, r5
 8001c94:	414b      	adcs	r3, r1
 8001c96:	677b      	str	r3, [r7, #116]	@ 0x74
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 0300 	mov.w	r3, #0
 8001ca0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001ca4:	4649      	mov	r1, r9
 8001ca6:	018b      	lsls	r3, r1, #6
 8001ca8:	4641      	mov	r1, r8
 8001caa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cae:	4641      	mov	r1, r8
 8001cb0:	018a      	lsls	r2, r1, #6
 8001cb2:	4641      	mov	r1, r8
 8001cb4:	1889      	adds	r1, r1, r2
 8001cb6:	66b9      	str	r1, [r7, #104]	@ 0x68
 8001cb8:	4649      	mov	r1, r9
 8001cba:	eb43 0101 	adc.w	r1, r3, r1
 8001cbe:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8001ccc:	4649      	mov	r1, r9
 8001cce:	008b      	lsls	r3, r1, #2
 8001cd0:	4641      	mov	r1, r8
 8001cd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001cd6:	4641      	mov	r1, r8
 8001cd8:	008a      	lsls	r2, r1, #2
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4622      	mov	r2, r4
 8001ce2:	189b      	adds	r3, r3, r2
 8001ce4:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	462a      	mov	r2, r5
 8001cea:	eb42 0303 	adc.w	r3, r2, r3
 8001cee:	667b      	str	r3, [r7, #100]	@ 0x64
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001cfc:	4649      	mov	r1, r9
 8001cfe:	008b      	lsls	r3, r1, #2
 8001d00:	4641      	mov	r1, r8
 8001d02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d06:	4641      	mov	r1, r8
 8001d08:	008a      	lsls	r2, r1, #2
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4622      	mov	r2, r4
 8001d12:	189b      	adds	r3, r3, r2
 8001d14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001d18:	462b      	mov	r3, r5
 8001d1a:	460a      	mov	r2, r1
 8001d1c:	eb42 0303 	adc.w	r3, r2, r3
 8001d20:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001d24:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001d28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001d2c:	f7fe ff28 	bl	8000b80 <__aeabi_ldivmod>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	e9c7 235e 	strd	r2, r3, [r7, #376]	@ 0x178
		var1 = (((int64_t)calib_data->dig_P9) * (var4 / 8192) * (var4 / 8192)) / 33554432;
 8001d38:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001d3c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	17da      	asrs	r2, r3, #31
 8001d44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001d48:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001d4c:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	da08      	bge.n	8001d66 <compensate_pressure+0x462>
 8001d54:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001d58:	1851      	adds	r1, r2, r1
 8001d5a:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001d5c:	f143 0300 	adc.w	r3, r3, #0
 8001d60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001d66:	f04f 0000 	mov.w	r0, #0
 8001d6a:	f04f 0100 	mov.w	r1, #0
 8001d6e:	0b50      	lsrs	r0, r2, #13
 8001d70:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d74:	1359      	asrs	r1, r3, #13
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001d7e:	4629      	mov	r1, r5
 8001d80:	fb02 f001 	mul.w	r0, r2, r1
 8001d84:	4621      	mov	r1, r4
 8001d86:	fb01 f103 	mul.w	r1, r1, r3
 8001d8a:	4401      	add	r1, r0
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	fba0 2302 	umull	r2, r3, r0, r2
 8001d92:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001d96:	4613      	mov	r3, r2
 8001d98:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8001d9c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001da0:	18cb      	adds	r3, r1, r3
 8001da2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8001da6:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	da08      	bge.n	8001dc0 <compensate_pressure+0x4bc>
 8001dae:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 8001db2:	1851      	adds	r1, r2, r1
 8001db4:	6539      	str	r1, [r7, #80]	@ 0x50
 8001db6:	f143 0300 	adc.w	r3, r3, #0
 8001dba:	657b      	str	r3, [r7, #84]	@ 0x54
 8001dbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001dc0:	f04f 0000 	mov.w	r0, #0
 8001dc4:	f04f 0100 	mov.w	r1, #0
 8001dc8:	0b50      	lsrs	r0, r2, #13
 8001dca:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001dce:	1359      	asrs	r1, r3, #13
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8001dd8:	4629      	mov	r1, r5
 8001dda:	fb02 f001 	mul.w	r0, r2, r1
 8001dde:	4621      	mov	r1, r4
 8001de0:	fb01 f103 	mul.w	r1, r1, r3
 8001de4:	4401      	add	r1, r0
 8001de6:	4620      	mov	r0, r4
 8001de8:	fba0 2302 	umull	r2, r3, r0, r2
 8001dec:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001df0:	4613      	mov	r3, r2
 8001df2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001df6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001dfa:	18cb      	adds	r3, r1, r3
 8001dfc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001e00:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	da08      	bge.n	8001e1a <compensate_pressure+0x516>
 8001e08:	f06f 417e 	mvn.w	r1, #4261412864	@ 0xfe000000
 8001e0c:	1851      	adds	r1, r2, r1
 8001e0e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001e10:	f143 0300 	adc.w	r3, r3, #0
 8001e14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e16:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001e1a:	f04f 0000 	mov.w	r0, #0
 8001e1e:	f04f 0100 	mov.w	r1, #0
 8001e22:	0e50      	lsrs	r0, r2, #25
 8001e24:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8001e28:	1659      	asrs	r1, r3, #25
 8001e2a:	e9c7 0164 	strd	r0, r1, [r7, #400]	@ 0x190
		var2 = (((int64_t)calib_data->dig_P8) * var4) / 524288;
 8001e2e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001e32:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001e36:	b21b      	sxth	r3, r3
 8001e38:	17da      	asrs	r2, r3, #31
 8001e3a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e3e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001e42:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001e46:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001e4a:	462a      	mov	r2, r5
 8001e4c:	fb02 f203 	mul.w	r2, r2, r3
 8001e50:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001e54:	4621      	mov	r1, r4
 8001e56:	fb01 f303 	mul.w	r3, r1, r3
 8001e5a:	441a      	add	r2, r3
 8001e5c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001e60:	4621      	mov	r1, r4
 8001e62:	fba3 1301 	umull	r1, r3, r3, r1
 8001e66:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001e70:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001e74:	18d3      	adds	r3, r2, r3
 8001e76:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001e7a:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	da07      	bge.n	8001e92 <compensate_pressure+0x58e>
 8001e82:	4971      	ldr	r1, [pc, #452]	@ (8002048 <compensate_pressure+0x744>)
 8001e84:	1851      	adds	r1, r2, r1
 8001e86:	6439      	str	r1, [r7, #64]	@ 0x40
 8001e88:	f143 0300 	adc.w	r3, r3, #0
 8001e8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001e92:	f04f 0000 	mov.w	r0, #0
 8001e96:	f04f 0100 	mov.w	r1, #0
 8001e9a:	0cd0      	lsrs	r0, r2, #19
 8001e9c:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 8001ea0:	14d9      	asrs	r1, r3, #19
 8001ea2:	e9c7 0162 	strd	r0, r1, [r7, #392]	@ 0x188
		var4 = ((var4 + var1 + var2) / 256) + (((int64_t)calib_data->dig_P7) * 16);
 8001ea6:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 8001eaa:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8001eae:	1884      	adds	r4, r0, r2
 8001eb0:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 8001eb4:	eb41 0303 	adc.w	r3, r1, r3
 8001eb8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001ebc:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8001ec0:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001ec4:	4621      	mov	r1, r4
 8001ec6:	1889      	adds	r1, r1, r2
 8001ec8:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8001ecc:	4629      	mov	r1, r5
 8001ece:	eb43 0101 	adc.w	r1, r3, r1
 8001ed2:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 8001ed6:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	da07      	bge.n	8001eee <compensate_pressure+0x5ea>
 8001ede:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 8001ee2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001ee4:	f143 0300 	adc.w	r3, r3, #0
 8001ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001eea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001eee:	f04f 0000 	mov.w	r0, #0
 8001ef2:	f04f 0100 	mov.w	r1, #0
 8001ef6:	0a10      	lsrs	r0, r2, #8
 8001ef8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001efc:	1219      	asrs	r1, r3, #8
 8001efe:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001f02:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001f06:	b21b      	sxth	r3, r3
 8001f08:	17da      	asrs	r2, r3, #31
 8001f0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001f0e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001f1e:	464c      	mov	r4, r9
 8001f20:	0123      	lsls	r3, r4, #4
 8001f22:	4644      	mov	r4, r8
 8001f24:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001f28:	4644      	mov	r4, r8
 8001f2a:	0122      	lsls	r2, r4, #4
 8001f2c:	1884      	adds	r4, r0, r2
 8001f2e:	633c      	str	r4, [r7, #48]	@ 0x30
 8001f30:	eb41 0303 	adc.w	r3, r1, r3
 8001f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f36:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001f3a:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
		pressure = (uint32_t)(((var4 / 2) * 100) / 128);
 8001f3e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8001f42:	0fd9      	lsrs	r1, r3, #31
 8001f44:	2000      	movs	r0, #0
 8001f46:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001f48:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001f4a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001f4e:	4621      	mov	r1, r4
 8001f50:	1889      	adds	r1, r1, r2
 8001f52:	6239      	str	r1, [r7, #32]
 8001f54:	4629      	mov	r1, r5
 8001f56:	eb43 0101 	adc.w	r1, r3, r1
 8001f5a:	6279      	str	r1, [r7, #36]	@ 0x24
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001f68:	4621      	mov	r1, r4
 8001f6a:	084a      	lsrs	r2, r1, #1
 8001f6c:	4629      	mov	r1, r5
 8001f6e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8001f72:	4629      	mov	r1, r5
 8001f74:	104b      	asrs	r3, r1, #1
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	1894      	adds	r4, r2, r2
 8001f80:	61bc      	str	r4, [r7, #24]
 8001f82:	415b      	adcs	r3, r3
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f8a:	1814      	adds	r4, r2, r0
 8001f8c:	613c      	str	r4, [r7, #16]
 8001f8e:	414b      	adcs	r3, r1
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001f9e:	464c      	mov	r4, r9
 8001fa0:	0163      	lsls	r3, r4, #5
 8001fa2:	4644      	mov	r4, r8
 8001fa4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001fa8:	4644      	mov	r4, r8
 8001faa:	0162      	lsls	r2, r4, #5
 8001fac:	4644      	mov	r4, r8
 8001fae:	18a4      	adds	r4, r4, r2
 8001fb0:	60bc      	str	r4, [r7, #8]
 8001fb2:	464c      	mov	r4, r9
 8001fb4:	eb43 0404 	adc.w	r4, r3, r4
 8001fb8:	60fc      	str	r4, [r7, #12]
 8001fba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fbe:	4623      	mov	r3, r4
 8001fc0:	181b      	adds	r3, r3, r0
 8001fc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001fc6:	462b      	mov	r3, r5
 8001fc8:	eb41 0303 	adc.w	r3, r1, r3
 8001fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fd0:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	da07      	bge.n	8001fe8 <compensate_pressure+0x6e4>
 8001fd8:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 8001fdc:	6039      	str	r1, [r7, #0]
 8001fde:	f143 0300 	adc.w	r3, r3, #0
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fe8:	f04f 0000 	mov.w	r0, #0
 8001fec:	f04f 0100 	mov.w	r1, #0
 8001ff0:	09d0      	lsrs	r0, r2, #7
 8001ff2:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8001ff6:	11d9      	asrs	r1, r3, #7
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

		if (pressure < pressure_min)
 8002002:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8002006:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800200a:	429a      	cmp	r2, r3
 800200c:	d204      	bcs.n	8002018 <compensate_pressure+0x714>
			pressure = pressure_min;
 800200e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002012:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002016:	e00e      	b.n	8002036 <compensate_pressure+0x732>
		else if (pressure > pressure_max)
 8002018:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 800201c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8002020:	429a      	cmp	r2, r3
 8002022:	d908      	bls.n	8002036 <compensate_pressure+0x732>
			pressure = pressure_max;
 8002024:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8002028:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800202c:	e003      	b.n	8002036 <compensate_pressure+0x732>
	} else {
		pressure = pressure_min;
 800202e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002032:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
	}

	return pressure;
 8002036:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
}
 800203a:	4618      	mov	r0, r3
 800203c:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 8002040:	46bd      	mov	sp, r7
 8002042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002046:	bf00      	nop
 8002048:	0007ffff 	.word	0x0007ffff

0800204c <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in integer data type.
 */
static uint32_t compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 800204c:	b480      	push	{r7}
 800204e:	b08b      	sub	sp, #44	@ 0x2c
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
	int32_t var2;
	int32_t var3;
	int32_t var4;
	int32_t var5;
	uint32_t humidity;
	uint32_t humidity_max = 102400;
 8002056:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 800205a:	623b      	str	r3, [r7, #32]

	var1 = calib_data->t_fine - ((int32_t)76800);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002060:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8002064:	61fb      	str	r3, [r7, #28]
	var2 = (int32_t)(uncomp_data->humidity * 16384);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	039b      	lsls	r3, r3, #14
 800206c:	61bb      	str	r3, [r7, #24]
	var3 = (int32_t)(((int32_t)calib_data->dig_H4) * 1048576);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002074:	051b      	lsls	r3, r3, #20
 8002076:	617b      	str	r3, [r7, #20]
	var4 = ((int32_t)calib_data->dig_H5) * var1;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800207e:	461a      	mov	r2, r3
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	fb02 f303 	mul.w	r3, r2, r3
 8002086:	613b      	str	r3, [r7, #16]
	var5 = (((var2 - var3) - var4) + (int32_t)16384) / 32768;
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	1ad2      	subs	r2, r2, r3
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002096:	2b00      	cmp	r3, #0
 8002098:	da02      	bge.n	80020a0 <compensate_humidity+0x54>
 800209a:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 800209e:	337f      	adds	r3, #127	@ 0x7f
 80020a0:	13db      	asrs	r3, r3, #15
 80020a2:	60fb      	str	r3, [r7, #12]
	var2 = (var1 * ((int32_t)calib_data->dig_H6)) / 1024;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 80020aa:	461a      	mov	r2, r3
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	fb02 f303 	mul.w	r3, r2, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	da01      	bge.n	80020ba <compensate_humidity+0x6e>
 80020b6:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 80020ba:	129b      	asrs	r3, r3, #10
 80020bc:	61bb      	str	r3, [r7, #24]
	var3 = (var1 * ((int32_t)calib_data->dig_H3)) / 2048;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	7f1b      	ldrb	r3, [r3, #28]
 80020c2:	461a      	mov	r2, r3
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	fb02 f303 	mul.w	r3, r2, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	da01      	bge.n	80020d2 <compensate_humidity+0x86>
 80020ce:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80020d2:	12db      	asrs	r3, r3, #11
 80020d4:	617b      	str	r3, [r7, #20]
	var4 = ((var2 * (var3 + (int32_t)32768)) / 1024) + (int32_t)2097152;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	fb02 f303 	mul.w	r3, r2, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	da01      	bge.n	80020ea <compensate_humidity+0x9e>
 80020e6:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 80020ea:	129b      	asrs	r3, r3, #10
 80020ec:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80020f0:	613b      	str	r3, [r7, #16]
	var2 = ((var4 * ((int32_t)calib_data->dig_H2)) + 8192) / 16384;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80020f8:	461a      	mov	r2, r3
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	fb02 f303 	mul.w	r3, r2, r3
 8002100:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002104:	2b00      	cmp	r3, #0
 8002106:	da02      	bge.n	800210e <compensate_humidity+0xc2>
 8002108:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 800210c:	333f      	adds	r3, #63	@ 0x3f
 800210e:	139b      	asrs	r3, r3, #14
 8002110:	61bb      	str	r3, [r7, #24]
	var3 = var5 * var2;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	fb02 f303 	mul.w	r3, r2, r3
 800211a:	617b      	str	r3, [r7, #20]
	var4 = ((var3 / 32768) * (var3 / 32768)) / 128;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2b00      	cmp	r3, #0
 8002120:	da02      	bge.n	8002128 <compensate_humidity+0xdc>
 8002122:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8002126:	337f      	adds	r3, #127	@ 0x7f
 8002128:	13db      	asrs	r3, r3, #15
 800212a:	461a      	mov	r2, r3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	2b00      	cmp	r3, #0
 8002130:	da02      	bge.n	8002138 <compensate_humidity+0xec>
 8002132:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8002136:	337f      	adds	r3, #127	@ 0x7f
 8002138:	13db      	asrs	r3, r3, #15
 800213a:	fb02 f303 	mul.w	r3, r2, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	da00      	bge.n	8002144 <compensate_humidity+0xf8>
 8002142:	337f      	adds	r3, #127	@ 0x7f
 8002144:	11db      	asrs	r3, r3, #7
 8002146:	613b      	str	r3, [r7, #16]
	var5 = var3 - ((var4 * ((int32_t)calib_data->dig_H1)) / 16);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	7e1b      	ldrb	r3, [r3, #24]
 800214c:	461a      	mov	r2, r3
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	fb02 f303 	mul.w	r3, r2, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	da00      	bge.n	800215a <compensate_humidity+0x10e>
 8002158:	330f      	adds	r3, #15
 800215a:	111b      	asrs	r3, r3, #4
 800215c:	425b      	negs	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	4413      	add	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
	var5 = (var5 < 0 ? 0 : var5);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800216c:	60fb      	str	r3, [r7, #12]
	var5 = (var5 > 419430400 ? 419430400 : var5);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8002174:	bfa8      	it	ge
 8002176:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 800217a:	60fb      	str	r3, [r7, #12]
	humidity = (uint32_t)(var5 / 4096);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2b00      	cmp	r3, #0
 8002180:	da01      	bge.n	8002186 <compensate_humidity+0x13a>
 8002182:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002186:	131b      	asrs	r3, r3, #12
 8002188:	627b      	str	r3, [r7, #36]	@ 0x24

	if (humidity > humidity_max)
 800218a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800218c:	6a3b      	ldr	r3, [r7, #32]
 800218e:	429a      	cmp	r2, r3
 8002190:	d901      	bls.n	8002196 <compensate_humidity+0x14a>
		humidity = humidity_max;
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	627b      	str	r3, [r7, #36]	@ 0x24

	return humidity;
 8002196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002198:	4618      	mov	r0, r3
 800219a:	372c      	adds	r7, #44	@ 0x2c
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08a      	sub	sp, #40	@ 0x28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 80021ac:	2388      	movs	r3, #136	@ 0x88
 80021ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	f107 0310 	add.w	r3, r7, #16
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	60da      	str	r2, [r3, #12]
 80021c4:	611a      	str	r2, [r3, #16]
 80021c6:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 80021c8:	f107 010c 	add.w	r1, r7, #12
 80021cc:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	221a      	movs	r2, #26
 80021d4:	f7fe fee7 	bl	8000fa6 <bme280_get_regs>
 80021d8:	4603      	mov	r3, r0
 80021da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (rslt == BME280_OK) {
 80021de:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d11d      	bne.n	8002222 <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 80021e6:	f107 030c 	add.w	r3, r7, #12
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 f84a 	bl	8002286 <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 80021f2:	23e1      	movs	r3, #225	@ 0xe1
 80021f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80021f8:	f107 010c 	add.w	r1, r7, #12
 80021fc:	f897 0026 	ldrb.w	r0, [r7, #38]	@ 0x26
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2207      	movs	r2, #7
 8002204:	f7fe fecf 	bl	8000fa6 <bme280_get_regs>
 8002208:	4603      	mov	r3, r0
 800220a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (rslt == BME280_OK) {
 800220e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002212:	2b00      	cmp	r3, #0
 8002214:	d105      	bne.n	8002222 <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 8002216:	f107 030c 	add.w	r3, r7, #12
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4618      	mov	r0, r3
 800221e:	f000 f8e2 	bl	80023e6 <parse_humidity_calib_data>
		}
	}

	return rslt;
 8002222:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8002226:	4618      	mov	r0, r3
 8002228:	3728      	adds	r7, #40	@ 0x28
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 800222e:	b480      	push	{r7}
 8002230:	b087      	sub	sp, #28
 8002232:	af00      	add	r7, sp, #0
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
 800223a:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 800223c:	2301      	movs	r3, #1
 800223e:	75fb      	strb	r3, [r7, #23]
 8002240:	e016      	b.n	8002270 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 8002242:	7dfb      	ldrb	r3, [r7, #23]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	441a      	add	r2, r3
 8002248:	7dfb      	ldrb	r3, [r7, #23]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	3b01      	subs	r3, #1
 800224e:	68b9      	ldr	r1, [r7, #8]
 8002250:	440b      	add	r3, r1
 8002252:	7812      	ldrb	r2, [r2, #0]
 8002254:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 8002256:	7dfb      	ldrb	r3, [r7, #23]
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	441a      	add	r2, r3
 800225c:	7dfb      	ldrb	r3, [r7, #23]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4619      	mov	r1, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	440b      	add	r3, r1
 8002266:	7812      	ldrb	r2, [r2, #0]
 8002268:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 800226a:	7dfb      	ldrb	r3, [r7, #23]
 800226c:	3301      	adds	r3, #1
 800226e:	75fb      	strb	r3, [r7, #23]
 8002270:	7dfa      	ldrb	r2, [r7, #23]
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	429a      	cmp	r2, r3
 8002276:	d3e4      	bcc.n	8002242 <interleave_reg_addr+0x14>
	}
}
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	371c      	adds	r7, #28
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002286:	b480      	push	{r7}
 8002288:	b085      	sub	sp, #20
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	3310      	adds	r3, #16
 8002294:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3301      	adds	r3, #1
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	021b      	lsls	r3, r3, #8
 800229e:	b21a      	sxth	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	b21b      	sxth	r3, r3
 80022a6:	4313      	orrs	r3, r2
 80022a8:	b21b      	sxth	r3, r3
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3303      	adds	r3, #3
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	b21a      	sxth	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3302      	adds	r3, #2
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	b21b      	sxth	r3, r3
 80022c2:	4313      	orrs	r3, r2
 80022c4:	b21a      	sxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3305      	adds	r3, #5
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	b21a      	sxth	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3304      	adds	r3, #4
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	b21b      	sxth	r3, r3
 80022dc:	4313      	orrs	r3, r2
 80022de:	b21a      	sxth	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3307      	adds	r3, #7
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	021b      	lsls	r3, r3, #8
 80022ec:	b21a      	sxth	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3306      	adds	r3, #6
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	b21b      	sxth	r3, r3
 80022f6:	4313      	orrs	r3, r2
 80022f8:	b21b      	sxth	r3, r3
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3309      	adds	r3, #9
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	021b      	lsls	r3, r3, #8
 8002308:	b21a      	sxth	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3308      	adds	r3, #8
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	b21b      	sxth	r3, r3
 8002312:	4313      	orrs	r3, r2
 8002314:	b21a      	sxth	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	330b      	adds	r3, #11
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	021b      	lsls	r3, r3, #8
 8002322:	b21a      	sxth	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	330a      	adds	r3, #10
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	b21b      	sxth	r3, r3
 800232c:	4313      	orrs	r3, r2
 800232e:	b21a      	sxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	330d      	adds	r3, #13
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	b21a      	sxth	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	330c      	adds	r3, #12
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	b21b      	sxth	r3, r3
 8002346:	4313      	orrs	r3, r2
 8002348:	b21a      	sxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	330f      	adds	r3, #15
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	021b      	lsls	r3, r3, #8
 8002356:	b21a      	sxth	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	330e      	adds	r3, #14
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	b21b      	sxth	r3, r3
 8002360:	4313      	orrs	r3, r2
 8002362:	b21a      	sxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3311      	adds	r3, #17
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	021b      	lsls	r3, r3, #8
 8002370:	b21a      	sxth	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3310      	adds	r3, #16
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	b21b      	sxth	r3, r3
 800237a:	4313      	orrs	r3, r2
 800237c:	b21a      	sxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3313      	adds	r3, #19
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	021b      	lsls	r3, r3, #8
 800238a:	b21a      	sxth	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3312      	adds	r3, #18
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	b21b      	sxth	r3, r3
 8002394:	4313      	orrs	r3, r2
 8002396:	b21a      	sxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3315      	adds	r3, #21
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	021b      	lsls	r3, r3, #8
 80023a4:	b21a      	sxth	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3314      	adds	r3, #20
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	b21b      	sxth	r3, r3
 80023ae:	4313      	orrs	r3, r2
 80023b0:	b21a      	sxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3317      	adds	r3, #23
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	021b      	lsls	r3, r3, #8
 80023be:	b21a      	sxth	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3316      	adds	r3, #22
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	b21b      	sxth	r3, r3
 80023c8:	4313      	orrs	r3, r2
 80023ca:	b21a      	sxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3319      	adds	r3, #25
 80023d4:	781a      	ldrb	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	761a      	strb	r2, [r3, #24]

}
 80023da:	bf00      	nop
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b087      	sub	sp, #28
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	3310      	adds	r3, #16
 80023f4:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3301      	adds	r3, #1
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	021b      	lsls	r3, r3, #8
 80023fe:	b21a      	sxth	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	b21b      	sxth	r3, r3
 8002406:	4313      	orrs	r3, r2
 8002408:	b21a      	sxth	r2, r3
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3302      	adds	r3, #2
 8002412:	781a      	ldrb	r2, [r3, #0]
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3303      	adds	r3, #3
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	b25b      	sxtb	r3, r3
 8002420:	b29b      	uxth	r3, r3
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	b29b      	uxth	r3, r3
 8002426:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3304      	adds	r3, #4
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	b21b      	sxth	r3, r3
 8002430:	f003 030f 	and.w	r3, r3, #15
 8002434:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8002436:	8a7a      	ldrh	r2, [r7, #18]
 8002438:	8a3b      	ldrh	r3, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	b21a      	sxth	r2, r3
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3305      	adds	r3, #5
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	b25b      	sxtb	r3, r3
 800244a:	b29b      	uxth	r3, r3
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	b29b      	uxth	r3, r3
 8002450:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3304      	adds	r3, #4
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	b2db      	uxtb	r3, r3
 800245c:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 800245e:	89fa      	ldrh	r2, [r7, #14]
 8002460:	89bb      	ldrh	r3, [r7, #12]
 8002462:	4313      	orrs	r3, r2
 8002464:	b21a      	sxth	r2, r3
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3306      	adds	r3, #6
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	b25a      	sxtb	r2, r3
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8002478:	bf00      	nop
 800247a:	371c      	adds	r7, #28
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	460a      	mov	r2, r1
 800248e:	71fb      	strb	r3, [r7, #7]
 8002490:	4613      	mov	r3, r2
 8002492:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8002494:	2300      	movs	r3, #0
 8002496:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8002498:	79fa      	ldrb	r2, [r7, #7]
 800249a:	79bb      	ldrb	r3, [r7, #6]
 800249c:	4013      	ands	r3, r2
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
 80024a8:	e001      	b.n	80024ae <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00b      	beq.n	80024e2 <null_ptr_check+0x26>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d007      	beq.n	80024e2 <null_ptr_check+0x26>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <null_ptr_check+0x26>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d102      	bne.n	80024e8 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 80024e2:	23ff      	movs	r3, #255	@ 0xff
 80024e4:	73fb      	strb	r3, [r7, #15]
 80024e6:	e001      	b.n	80024ec <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80024ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <LSM6DSLTR_Init>:

extern LSM6DSLTR;
extern I2C_HandleTypeDef hi2c1;

void LSM6DSLTR_Init()
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af04      	add	r7, sp, #16
	uint8_t data1;

	// Gyro ve Accel interrupt pin 1 aktif
	data1= 0x03;
 8002502:	2303      	movs	r3, #3
 8002504:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, INT1_CTR, 1, &data1, 1, 1);
 8002506:	2301      	movs	r3, #1
 8002508:	9302      	str	r3, [sp, #8]
 800250a:	2301      	movs	r3, #1
 800250c:	9301      	str	r3, [sp, #4]
 800250e:	1dfb      	adds	r3, r7, #7
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	2301      	movs	r3, #1
 8002514:	220d      	movs	r2, #13
 8002516:	21d4      	movs	r1, #212	@ 0xd4
 8002518:	481f      	ldr	r0, [pc, #124]	@ (8002598 <LSM6DSLTR_Init+0x9c>)
 800251a:	f003 f8fd 	bl	8005718 <HAL_I2C_Mem_Write>

	data1 = 0x54; // 16G 6.66khz
 800251e:	2354      	movs	r3, #84	@ 0x54
 8002520:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, CTRL1_XL, 1, &data1,  1, 1);
 8002522:	2301      	movs	r3, #1
 8002524:	9302      	str	r3, [sp, #8]
 8002526:	2301      	movs	r3, #1
 8002528:	9301      	str	r3, [sp, #4]
 800252a:	1dfb      	adds	r3, r7, #7
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	2301      	movs	r3, #1
 8002530:	2210      	movs	r2, #16
 8002532:	21d4      	movs	r1, #212	@ 0xd4
 8002534:	4818      	ldr	r0, [pc, #96]	@ (8002598 <LSM6DSLTR_Init+0x9c>)
 8002536:	f003 f8ef 	bl	8005718 <HAL_I2C_Mem_Write>

	data1 = 0x54; // 500 dps 6.6khz
 800253a:	2354      	movs	r3, #84	@ 0x54
 800253c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address,CTRL2_G, 1, &data1, 1, 1);
 800253e:	2301      	movs	r3, #1
 8002540:	9302      	str	r3, [sp, #8]
 8002542:	2301      	movs	r3, #1
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	1dfb      	adds	r3, r7, #7
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	2301      	movs	r3, #1
 800254c:	2211      	movs	r2, #17
 800254e:	21d4      	movs	r1, #212	@ 0xd4
 8002550:	4811      	ldr	r0, [pc, #68]	@ (8002598 <LSM6DSLTR_Init+0x9c>)
 8002552:	f003 f8e1 	bl	8005718 <HAL_I2C_Mem_Write>

	data1= 0x00;
 8002556:	2300      	movs	r3, #0
 8002558:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, CTRL3_C, 1, &data1, 1, 1);
 800255a:	2301      	movs	r3, #1
 800255c:	9302      	str	r3, [sp, #8]
 800255e:	2301      	movs	r3, #1
 8002560:	9301      	str	r3, [sp, #4]
 8002562:	1dfb      	adds	r3, r7, #7
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	2301      	movs	r3, #1
 8002568:	2212      	movs	r2, #18
 800256a:	21d4      	movs	r1, #212	@ 0xd4
 800256c:	480a      	ldr	r0, [pc, #40]	@ (8002598 <LSM6DSLTR_Init+0x9c>)
 800256e:	f003 f8d3 	bl	8005718 <HAL_I2C_Mem_Write>

	data1= 0x08;
 8002572:	2308      	movs	r3, #8
 8002574:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, LSM6DSL_Write_Address, CTRL4_C, 1, &data1, 1, 1);
 8002576:	2301      	movs	r3, #1
 8002578:	9302      	str	r3, [sp, #8]
 800257a:	2301      	movs	r3, #1
 800257c:	9301      	str	r3, [sp, #4]
 800257e:	1dfb      	adds	r3, r7, #7
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	2301      	movs	r3, #1
 8002584:	2213      	movs	r2, #19
 8002586:	21d4      	movs	r1, #212	@ 0xd4
 8002588:	4803      	ldr	r0, [pc, #12]	@ (8002598 <LSM6DSLTR_Init+0x9c>)
 800258a:	f003 f8c5 	bl	8005718 <HAL_I2C_Mem_Write>



}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	200000b4 	.word	0x200000b4
 800259c:	00000000 	.word	0x00000000

080025a0 <LSM6DSLTR_Read_Accel_Data>:


void LSM6DSLTR_Read_Accel_Data(LSM6DSLTR* Lsm_Sensor)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b088      	sub	sp, #32
 80025a4:	af04      	add	r7, sp, #16
 80025a6:	6078      	str	r0, [r7, #4]
	uint8_t data;
	uint8_t s;
	int16_t accel;


	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_L_XL, 1, &data, 1, 1);
 80025a8:	2301      	movs	r3, #1
 80025aa:	9302      	str	r3, [sp, #8]
 80025ac:	2301      	movs	r3, #1
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	f107 030d 	add.w	r3, r7, #13
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	2301      	movs	r3, #1
 80025b8:	222c      	movs	r2, #44	@ 0x2c
 80025ba:	21d5      	movs	r1, #213	@ 0xd5
 80025bc:	4864      	ldr	r0, [pc, #400]	@ (8002750 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 80025be:	f003 f9a5 	bl	800590c <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_H_XL, 1, &s, 1, 1);
 80025c2:	2301      	movs	r3, #1
 80025c4:	9302      	str	r3, [sp, #8]
 80025c6:	2301      	movs	r3, #1
 80025c8:	9301      	str	r3, [sp, #4]
 80025ca:	f107 030c 	add.w	r3, r7, #12
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	2301      	movs	r3, #1
 80025d2:	222d      	movs	r2, #45	@ 0x2d
 80025d4:	21d5      	movs	r1, #213	@ 0xd5
 80025d6:	485e      	ldr	r0, [pc, #376]	@ (8002750 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 80025d8:	f003 f998 	bl	800590c <HAL_I2C_Mem_Read>

	accel = (int16_t) ( (s << 8 ) | (data));
 80025dc:	7b3b      	ldrb	r3, [r7, #12]
 80025de:	021b      	lsls	r3, r3, #8
 80025e0:	b21a      	sxth	r2, r3
 80025e2:	7b7b      	ldrb	r3, [r7, #13]
 80025e4:	b21b      	sxth	r3, r3
 80025e6:	4313      	orrs	r3, r2
 80025e8:	81fb      	strh	r3, [r7, #14]

	Lsm_Sensor->Accel_Z = (float)accel* 0.000488*9.81; // 16g mg/LSB 0.488
 80025ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025ee:	ee07 3a90 	vmov	s15, r3
 80025f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025f6:	ee17 0a90 	vmov	r0, s15
 80025fa:	f7fd ff69 	bl	80004d0 <__aeabi_f2d>
 80025fe:	a350      	add	r3, pc, #320	@ (adr r3, 8002740 <LSM6DSLTR_Read_Accel_Data+0x1a0>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f7fd ffbc 	bl	8000580 <__aeabi_dmul>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
 8002610:	a34d      	add	r3, pc, #308	@ (adr r3, 8002748 <LSM6DSLTR_Read_Accel_Data+0x1a8>)
 8002612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002616:	f7fd ffb3 	bl	8000580 <__aeabi_dmul>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4610      	mov	r0, r2
 8002620:	4619      	mov	r1, r3
 8002622:	f7fe fa5d 	bl	8000ae0 <__aeabi_d2f>
 8002626:	4602      	mov	r2, r0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	609a      	str	r2, [r3, #8]



	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_L_XL, 1, &data, 1, 1);
 800262c:	2301      	movs	r3, #1
 800262e:	9302      	str	r3, [sp, #8]
 8002630:	2301      	movs	r3, #1
 8002632:	9301      	str	r3, [sp, #4]
 8002634:	f107 030d 	add.w	r3, r7, #13
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	2301      	movs	r3, #1
 800263c:	2228      	movs	r2, #40	@ 0x28
 800263e:	21d5      	movs	r1, #213	@ 0xd5
 8002640:	4843      	ldr	r0, [pc, #268]	@ (8002750 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 8002642:	f003 f963 	bl	800590c <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_H_XL, 1, &s, 1, 1);
 8002646:	2301      	movs	r3, #1
 8002648:	9302      	str	r3, [sp, #8]
 800264a:	2301      	movs	r3, #1
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	f107 030c 	add.w	r3, r7, #12
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	2301      	movs	r3, #1
 8002656:	2229      	movs	r2, #41	@ 0x29
 8002658:	21d5      	movs	r1, #213	@ 0xd5
 800265a:	483d      	ldr	r0, [pc, #244]	@ (8002750 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 800265c:	f003 f956 	bl	800590c <HAL_I2C_Mem_Read>

	accel = (int16_t) ( (s << 8 ) | (data));
 8002660:	7b3b      	ldrb	r3, [r7, #12]
 8002662:	021b      	lsls	r3, r3, #8
 8002664:	b21a      	sxth	r2, r3
 8002666:	7b7b      	ldrb	r3, [r7, #13]
 8002668:	b21b      	sxth	r3, r3
 800266a:	4313      	orrs	r3, r2
 800266c:	81fb      	strh	r3, [r7, #14]

	Lsm_Sensor->Accel_X= (float)accel* 0.000488*9.81; // 16g mg/LSB 0.488
 800266e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002672:	ee07 3a90 	vmov	s15, r3
 8002676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800267a:	ee17 0a90 	vmov	r0, s15
 800267e:	f7fd ff27 	bl	80004d0 <__aeabi_f2d>
 8002682:	a32f      	add	r3, pc, #188	@ (adr r3, 8002740 <LSM6DSLTR_Read_Accel_Data+0x1a0>)
 8002684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002688:	f7fd ff7a 	bl	8000580 <__aeabi_dmul>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4610      	mov	r0, r2
 8002692:	4619      	mov	r1, r3
 8002694:	a32c      	add	r3, pc, #176	@ (adr r3, 8002748 <LSM6DSLTR_Read_Accel_Data+0x1a8>)
 8002696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269a:	f7fd ff71 	bl	8000580 <__aeabi_dmul>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	4610      	mov	r0, r2
 80026a4:	4619      	mov	r1, r3
 80026a6:	f7fe fa1b 	bl	8000ae0 <__aeabi_d2f>
 80026aa:	4602      	mov	r2, r0
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	601a      	str	r2, [r3, #0]



	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_L_XL, 1, &data, 1, 1);
 80026b0:	2301      	movs	r3, #1
 80026b2:	9302      	str	r3, [sp, #8]
 80026b4:	2301      	movs	r3, #1
 80026b6:	9301      	str	r3, [sp, #4]
 80026b8:	f107 030d 	add.w	r3, r7, #13
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	2301      	movs	r3, #1
 80026c0:	222a      	movs	r2, #42	@ 0x2a
 80026c2:	21d5      	movs	r1, #213	@ 0xd5
 80026c4:	4822      	ldr	r0, [pc, #136]	@ (8002750 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 80026c6:	f003 f921 	bl	800590c <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_H_XL, 1, &s, 1, 1);
 80026ca:	2301      	movs	r3, #1
 80026cc:	9302      	str	r3, [sp, #8]
 80026ce:	2301      	movs	r3, #1
 80026d0:	9301      	str	r3, [sp, #4]
 80026d2:	f107 030c 	add.w	r3, r7, #12
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	2301      	movs	r3, #1
 80026da:	222b      	movs	r2, #43	@ 0x2b
 80026dc:	21d5      	movs	r1, #213	@ 0xd5
 80026de:	481c      	ldr	r0, [pc, #112]	@ (8002750 <LSM6DSLTR_Read_Accel_Data+0x1b0>)
 80026e0:	f003 f914 	bl	800590c <HAL_I2C_Mem_Read>

	accel = (int16_t) ( (s << 8 ) | (data));
 80026e4:	7b3b      	ldrb	r3, [r7, #12]
 80026e6:	021b      	lsls	r3, r3, #8
 80026e8:	b21a      	sxth	r2, r3
 80026ea:	7b7b      	ldrb	r3, [r7, #13]
 80026ec:	b21b      	sxth	r3, r3
 80026ee:	4313      	orrs	r3, r2
 80026f0:	81fb      	strh	r3, [r7, #14]

	Lsm_Sensor->Accel_Y = (float)accel* 0.000488*9.81; // 16g mg/LSB 0.488
 80026f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026f6:	ee07 3a90 	vmov	s15, r3
 80026fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026fe:	ee17 0a90 	vmov	r0, s15
 8002702:	f7fd fee5 	bl	80004d0 <__aeabi_f2d>
 8002706:	a30e      	add	r3, pc, #56	@ (adr r3, 8002740 <LSM6DSLTR_Read_Accel_Data+0x1a0>)
 8002708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270c:	f7fd ff38 	bl	8000580 <__aeabi_dmul>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4610      	mov	r0, r2
 8002716:	4619      	mov	r1, r3
 8002718:	a30b      	add	r3, pc, #44	@ (adr r3, 8002748 <LSM6DSLTR_Read_Accel_Data+0x1a8>)
 800271a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271e:	f7fd ff2f 	bl	8000580 <__aeabi_dmul>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4610      	mov	r0, r2
 8002728:	4619      	mov	r1, r3
 800272a:	f7fe f9d9 	bl	8000ae0 <__aeabi_d2f>
 800272e:	4602      	mov	r2, r0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	605a      	str	r2, [r3, #4]


}
 8002734:	bf00      	nop
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	f3af 8000 	nop.w
 8002740:	0a5accd5 	.word	0x0a5accd5
 8002744:	3f3ffb48 	.word	0x3f3ffb48
 8002748:	51eb851f 	.word	0x51eb851f
 800274c:	40239eb8 	.word	0x40239eb8
 8002750:	200000b4 	.word	0x200000b4

08002754 <LSM6DSLTR_Read_Gyro_Data>:

void LSM6DSLTR_Read_Gyro_Data(LSM6DSLTR* Lsm_Sensor){
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af04      	add	r7, sp, #16
 800275a:	6078      	str	r0, [r7, #4]
     	uint8_t data;
		uint8_t s;
		int16_t gyro;


		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_L_G, 1, &data, 1, 1);
 800275c:	2301      	movs	r3, #1
 800275e:	9302      	str	r3, [sp, #8]
 8002760:	2301      	movs	r3, #1
 8002762:	9301      	str	r3, [sp, #4]
 8002764:	f107 030d 	add.w	r3, r7, #13
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	2301      	movs	r3, #1
 800276c:	2222      	movs	r2, #34	@ 0x22
 800276e:	21d5      	movs	r1, #213	@ 0xd5
 8002770:	4843      	ldr	r0, [pc, #268]	@ (8002880 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002772:	f003 f8cb 	bl	800590c <HAL_I2C_Mem_Read>

		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTX_H_G, 1, &s, 1, 1);
 8002776:	2301      	movs	r3, #1
 8002778:	9302      	str	r3, [sp, #8]
 800277a:	2301      	movs	r3, #1
 800277c:	9301      	str	r3, [sp, #4]
 800277e:	f107 030c 	add.w	r3, r7, #12
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	2301      	movs	r3, #1
 8002786:	2223      	movs	r2, #35	@ 0x23
 8002788:	21d5      	movs	r1, #213	@ 0xd5
 800278a:	483d      	ldr	r0, [pc, #244]	@ (8002880 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 800278c:	f003 f8be 	bl	800590c <HAL_I2C_Mem_Read>

		gyro = (int16_t) ( (s << 8 ) | (data));
 8002790:	7b3b      	ldrb	r3, [r7, #12]
 8002792:	021b      	lsls	r3, r3, #8
 8002794:	b21a      	sxth	r2, r3
 8002796:	7b7b      	ldrb	r3, [r7, #13]
 8002798:	b21b      	sxth	r3, r3
 800279a:	4313      	orrs	r3, r2
 800279c:	81fb      	strh	r3, [r7, #14]

		Lsm_Sensor->Gyro_X = (float)gyro*gyro_constant;
 800279e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027a2:	ee07 3a90 	vmov	s15, r3
 80027a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027aa:	4b36      	ldr	r3, [pc, #216]	@ (8002884 <LSM6DSLTR_Read_Gyro_Data+0x130>)
 80027ac:	edd3 7a00 	vldr	s15, [r3]
 80027b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	edc3 7a03 	vstr	s15, [r3, #12]



		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_L_G, 1, &data, 1, 1);
 80027ba:	2301      	movs	r3, #1
 80027bc:	9302      	str	r3, [sp, #8]
 80027be:	2301      	movs	r3, #1
 80027c0:	9301      	str	r3, [sp, #4]
 80027c2:	f107 030d 	add.w	r3, r7, #13
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	2301      	movs	r3, #1
 80027ca:	2224      	movs	r2, #36	@ 0x24
 80027cc:	21d5      	movs	r1, #213	@ 0xd5
 80027ce:	482c      	ldr	r0, [pc, #176]	@ (8002880 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 80027d0:	f003 f89c 	bl	800590c <HAL_I2C_Mem_Read>

		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTY_H_G, 1, &s, 1, 1);
 80027d4:	2301      	movs	r3, #1
 80027d6:	9302      	str	r3, [sp, #8]
 80027d8:	2301      	movs	r3, #1
 80027da:	9301      	str	r3, [sp, #4]
 80027dc:	f107 030c 	add.w	r3, r7, #12
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	2301      	movs	r3, #1
 80027e4:	2225      	movs	r2, #37	@ 0x25
 80027e6:	21d5      	movs	r1, #213	@ 0xd5
 80027e8:	4825      	ldr	r0, [pc, #148]	@ (8002880 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 80027ea:	f003 f88f 	bl	800590c <HAL_I2C_Mem_Read>

		gyro = (int16_t) ( (s << 8 ) | (data));
 80027ee:	7b3b      	ldrb	r3, [r7, #12]
 80027f0:	021b      	lsls	r3, r3, #8
 80027f2:	b21a      	sxth	r2, r3
 80027f4:	7b7b      	ldrb	r3, [r7, #13]
 80027f6:	b21b      	sxth	r3, r3
 80027f8:	4313      	orrs	r3, r2
 80027fa:	81fb      	strh	r3, [r7, #14]

		Lsm_Sensor->Gyro_Y = (float)gyro*gyro_constant;
 80027fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002800:	ee07 3a90 	vmov	s15, r3
 8002804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002808:	4b1e      	ldr	r3, [pc, #120]	@ (8002884 <LSM6DSLTR_Read_Gyro_Data+0x130>)
 800280a:	edd3 7a00 	vldr	s15, [r3]
 800280e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	edc3 7a04 	vstr	s15, [r3, #16]


		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_L_G, 1, &data, 1, 1);
 8002818:	2301      	movs	r3, #1
 800281a:	9302      	str	r3, [sp, #8]
 800281c:	2301      	movs	r3, #1
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	f107 030d 	add.w	r3, r7, #13
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	2301      	movs	r3, #1
 8002828:	2226      	movs	r2, #38	@ 0x26
 800282a:	21d5      	movs	r1, #213	@ 0xd5
 800282c:	4814      	ldr	r0, [pc, #80]	@ (8002880 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 800282e:	f003 f86d 	bl	800590c <HAL_I2C_Mem_Read>

		HAL_I2C_Mem_Read(&hi2c1, LSM6DSL_Read_Address, OUTZ_H_G, 1, &s, 1, 1);
 8002832:	2301      	movs	r3, #1
 8002834:	9302      	str	r3, [sp, #8]
 8002836:	2301      	movs	r3, #1
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	f107 030c 	add.w	r3, r7, #12
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	2301      	movs	r3, #1
 8002842:	2227      	movs	r2, #39	@ 0x27
 8002844:	21d5      	movs	r1, #213	@ 0xd5
 8002846:	480e      	ldr	r0, [pc, #56]	@ (8002880 <LSM6DSLTR_Read_Gyro_Data+0x12c>)
 8002848:	f003 f860 	bl	800590c <HAL_I2C_Mem_Read>

		gyro = (int16_t) ( (s << 8 ) | (data));
 800284c:	7b3b      	ldrb	r3, [r7, #12]
 800284e:	021b      	lsls	r3, r3, #8
 8002850:	b21a      	sxth	r2, r3
 8002852:	7b7b      	ldrb	r3, [r7, #13]
 8002854:	b21b      	sxth	r3, r3
 8002856:	4313      	orrs	r3, r2
 8002858:	81fb      	strh	r3, [r7, #14]

		Lsm_Sensor->Gyro_Z = (float)gyro*gyro_constant;
 800285a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800285e:	ee07 3a90 	vmov	s15, r3
 8002862:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002866:	4b07      	ldr	r3, [pc, #28]	@ (8002884 <LSM6DSLTR_Read_Gyro_Data+0x130>)
 8002868:	edd3 7a00 	vldr	s15, [r3]
 800286c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	edc3 7a05 	vstr	s15, [r3, #20]

}
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	200000b4 	.word	0x200000b4
 8002884:	20000000 	.word	0x20000000

08002888 <KalmanFilter_Init>:
 */


#include "kalman.h"

void KalmanFilter_Init(KalmanFilter *kf, float Q, float R, float initial_value) {
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	ed87 0a02 	vstr	s0, [r7, #8]
 8002894:	edc7 0a01 	vstr	s1, [r7, #4]
 8002898:	ed87 1a00 	vstr	s2, [r7]
    kf->Q = Q;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	601a      	str	r2, [r3, #0]
    kf->R = R;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	605a      	str	r2, [r3, #4]
    kf->x = initial_value;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	609a      	str	r2, [r3, #8]
    kf->P = 1.0;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80028b4:	60da      	str	r2, [r3, #12]
    kf->K = 0.0;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]
}
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <KalmanFilter_Update>:

float KalmanFilter_Update(KalmanFilter *kf, float measurement) {
 80028cc:	b5b0      	push	{r4, r5, r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	ed87 0a00 	vstr	s0, [r7]
    // Prediction update
    kf->P += kf->Q;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	ed93 7a03 	vldr	s14, [r3, #12]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	edd3 7a00 	vldr	s15, [r3]
 80028e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	edc3 7a03 	vstr	s15, [r3, #12]

    // Measurement update
    kf->K = kf->P / (kf->P + kf->R);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	edd3 6a03 	vldr	s13, [r3, #12]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	ed93 7a03 	vldr	s14, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002900:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	edc3 7a04 	vstr	s15, [r3, #16]
    kf->x += kf->K * (measurement - kf->x);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	ed93 7a02 	vldr	s14, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	edd3 6a04 	vldr	s13, [r3, #16]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002920:	ed97 6a00 	vldr	s12, [r7]
 8002924:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002928:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800292c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	edc3 7a02 	vstr	s15, [r3, #8]
    kf->P *= (1.0 - kf->K);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	4618      	mov	r0, r3
 800293c:	f7fd fdc8 	bl	80004d0 <__aeabi_f2d>
 8002940:	4604      	mov	r4, r0
 8002942:	460d      	mov	r5, r1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	4618      	mov	r0, r3
 800294a:	f7fd fdc1 	bl	80004d0 <__aeabi_f2d>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	f04f 0000 	mov.w	r0, #0
 8002956:	490d      	ldr	r1, [pc, #52]	@ (800298c <KalmanFilter_Update+0xc0>)
 8002958:	f7fd fc5a 	bl	8000210 <__aeabi_dsub>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4620      	mov	r0, r4
 8002962:	4629      	mov	r1, r5
 8002964:	f7fd fe0c 	bl	8000580 <__aeabi_dmul>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	f7fe f8b6 	bl	8000ae0 <__aeabi_d2f>
 8002974:	4602      	mov	r2, r0
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	60da      	str	r2, [r3, #12]

    return kf->x;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	ee07 3a90 	vmov	s15, r3
}
 8002982:	eeb0 0a67 	vmov.f32	s0, s15
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bdb0      	pop	{r4, r5, r7, pc}
 800298c:	3ff00000 	.word	0x3ff00000

08002990 <HAL_UART_RxCpltCallback>:
struct bme280_dev dev;
struct bme280_data comp_data;
int8_t rslt=0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

	if(huart == &huart6){
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a13      	ldr	r2, [pc, #76]	@ (80029e8 <HAL_UART_RxCpltCallback+0x58>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d11e      	bne.n	80029de <HAL_UART_RxCpltCallback+0x4e>
		if(rx_data_EGU != '\n' && rx_index_EGU <5){
 80029a0:	4b12      	ldr	r3, [pc, #72]	@ (80029ec <HAL_UART_RxCpltCallback+0x5c>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b0a      	cmp	r3, #10
 80029a6:	d00f      	beq.n	80029c8 <HAL_UART_RxCpltCallback+0x38>
 80029a8:	4b11      	ldr	r3, [pc, #68]	@ (80029f0 <HAL_UART_RxCpltCallback+0x60>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d80b      	bhi.n	80029c8 <HAL_UART_RxCpltCallback+0x38>
			EGU_RX_BUFFER[rx_index_EGU++]=rx_data_EGU;
 80029b0:	4b0f      	ldr	r3, [pc, #60]	@ (80029f0 <HAL_UART_RxCpltCallback+0x60>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	b2d1      	uxtb	r1, r2
 80029b8:	4a0d      	ldr	r2, [pc, #52]	@ (80029f0 <HAL_UART_RxCpltCallback+0x60>)
 80029ba:	7011      	strb	r1, [r2, #0]
 80029bc:	461a      	mov	r2, r3
 80029be:	4b0b      	ldr	r3, [pc, #44]	@ (80029ec <HAL_UART_RxCpltCallback+0x5c>)
 80029c0:	7819      	ldrb	r1, [r3, #0]
 80029c2:	4b0c      	ldr	r3, [pc, #48]	@ (80029f4 <HAL_UART_RxCpltCallback+0x64>)
 80029c4:	5499      	strb	r1, [r3, r2]
 80029c6:	e005      	b.n	80029d4 <HAL_UART_RxCpltCallback+0x44>

		}
		else
		{
			rx_data_EGU=0;
 80029c8:	4b08      	ldr	r3, [pc, #32]	@ (80029ec <HAL_UART_RxCpltCallback+0x5c>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	701a      	strb	r2, [r3, #0]
			rx_index_EGU=0;
 80029ce:	4b08      	ldr	r3, [pc, #32]	@ (80029f0 <HAL_UART_RxCpltCallback+0x60>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]

		}
	HAL_UART_Receive_IT(&huart6, &rx_data_EGU, 1);
 80029d4:	2201      	movs	r2, #1
 80029d6:	4905      	ldr	r1, [pc, #20]	@ (80029ec <HAL_UART_RxCpltCallback+0x5c>)
 80029d8:	4803      	ldr	r0, [pc, #12]	@ (80029e8 <HAL_UART_RxCpltCallback+0x58>)
 80029da:	f005 f97e 	bl	8007cda <HAL_UART_Receive_IT>
		}
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000198 	.word	0x20000198
 80029ec:	20000292 	.word	0x20000292
 80029f0:	20000293 	.word	0x20000293
 80029f4:	20000268 	.word	0x20000268

080029f8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]



	if(htim==&htim10){ //50ms
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a25      	ldr	r2, [pc, #148]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d143      	bne.n	8002a90 <HAL_TIM_PeriodElapsedCallback+0x98>
	sensor_flag=1;
 8002a08:	4b24      	ldr	r3, [pc, #144]	@ (8002a9c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	701a      	strb	r2, [r3, #0]
	set_timer++;
 8002a0e:	4b24      	ldr	r3, [pc, #144]	@ (8002aa0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	3301      	adds	r3, #1
 8002a14:	4a22      	ldr	r2, [pc, #136]	@ (8002aa0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002a16:	6013      	str	r3, [r2, #0]

	if(buzzer_long ==1 && buzzer_long_counter>=20)
 8002a18:	4b22      	ldr	r3, [pc, #136]	@ (8002aa4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d10a      	bne.n	8002a36 <HAL_TIM_PeriodElapsedCallback+0x3e>
 8002a20:	4b21      	ldr	r3, [pc, #132]	@ (8002aa8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b13      	cmp	r3, #19
 8002a26:	dd06      	ble.n	8002a36 <HAL_TIM_PeriodElapsedCallback+0x3e>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8002a28:	2110      	movs	r1, #16
 8002a2a:	4820      	ldr	r0, [pc, #128]	@ (8002aac <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002a2c:	f002 f9f1 	bl	8004e12 <HAL_GPIO_TogglePin>
		buzzer_long_counter = 0;
 8002a30:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
	}
	buzzer_long_counter++;
 8002a36:	4b1c      	ldr	r3, [pc, #112]	@ (8002aa8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	4a1a      	ldr	r2, [pc, #104]	@ (8002aa8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002a3e:	6013      	str	r3, [r2, #0]

	if(buzzer_short ==1 && buzzer_short_counter>=9)
 8002a40:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d10a      	bne.n	8002a5e <HAL_TIM_PeriodElapsedCallback+0x66>
 8002a48:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	dd06      	ble.n	8002a5e <HAL_TIM_PeriodElapsedCallback+0x66>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8002a50:	2110      	movs	r1, #16
 8002a52:	4816      	ldr	r0, [pc, #88]	@ (8002aac <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002a54:	f002 f9dd 	bl	8004e12 <HAL_GPIO_TogglePin>
		buzzer_short_counter = 0;
 8002a58:	4b16      	ldr	r3, [pc, #88]	@ (8002ab4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
	}
	buzzer_short_counter++;
 8002a5e:	4b15      	ldr	r3, [pc, #84]	@ (8002ab4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	3301      	adds	r3, #1
 8002a64:	4a13      	ldr	r2, [pc, #76]	@ (8002ab4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002a66:	6013      	str	r3, [r2, #0]

	if(buzzer_ariza ==1 && buzzer_ariza_counter>=3)
 8002a68:	4b13      	ldr	r3, [pc, #76]	@ (8002ab8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d10a      	bne.n	8002a86 <HAL_TIM_PeriodElapsedCallback+0x8e>
 8002a70:	4b12      	ldr	r3, [pc, #72]	@ (8002abc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	dd06      	ble.n	8002a86 <HAL_TIM_PeriodElapsedCallback+0x8e>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8002a78:	2110      	movs	r1, #16
 8002a7a:	480c      	ldr	r0, [pc, #48]	@ (8002aac <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002a7c:	f002 f9c9 	bl	8004e12 <HAL_GPIO_TogglePin>
		buzzer_ariza_counter = 0;
 8002a80:	4b0e      	ldr	r3, [pc, #56]	@ (8002abc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
	}
	buzzer_ariza_counter++;
 8002a86:	4b0d      	ldr	r3, [pc, #52]	@ (8002abc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	4a0b      	ldr	r2, [pc, #44]	@ (8002abc <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002a8e:	6013      	str	r3, [r2, #0]


	}


}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	20000150 	.word	0x20000150
 8002a9c:	200002b6 	.word	0x200002b6
 8002aa0:	200002bc 	.word	0x200002bc
 8002aa4:	20000294 	.word	0x20000294
 8002aa8:	200002a4 	.word	0x200002a4
 8002aac:	40020800 	.word	0x40020800
 8002ab0:	20000298 	.word	0x20000298
 8002ab4:	200002a0 	.word	0x200002a0
 8002ab8:	2000029c 	.word	0x2000029c
 8002abc:	200002a8 	.word	0x200002a8

08002ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ac0:	b5b0      	push	{r4, r5, r7, lr}
 8002ac2:	ed2d 8b02 	vpush	{d8}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002aca:	f001 fda3 	bl	8004614 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ace:	f000 ff1d 	bl	800390c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ad2:	f001 f839 	bl	8003b48 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002ad6:	f000 ff85 	bl	80039e4 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8002ada:	f001 f80b 	bl	8003af4 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8002ade:	f006 f895 	bl	8008c0c <MX_FATFS_Init>
  MX_TIM10_Init();
 8002ae2:	f000 ffe3 	bl	8003aac <MX_TIM10_Init>
  MX_TIM6_Init();
 8002ae6:	f000 ffab 	bl	8003a40 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8002aea:	2201      	movs	r2, #1
 8002aec:	2102      	movs	r1, #2
 8002aee:	4844      	ldr	r0, [pc, #272]	@ (8002c00 <main+0x140>)
 8002af0:	f002 f976 	bl	8004de0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8002af4:	2201      	movs	r2, #1
 8002af6:	2104      	movs	r1, #4
 8002af8:	4842      	ldr	r0, [pc, #264]	@ (8002c04 <main+0x144>)
 8002afa:	f002 f971 	bl	8004de0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8002afe:	2201      	movs	r2, #1
 8002b00:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002b04:	483e      	ldr	r0, [pc, #248]	@ (8002c00 <main+0x140>)
 8002b06:	f002 f96b 	bl	8004de0 <HAL_GPIO_WritePin>

  ///KURTARMA PORTLARI KAPALI EMIN OL
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);//A
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2110      	movs	r1, #16
 8002b0e:	483d      	ldr	r0, [pc, #244]	@ (8002c04 <main+0x144>)
 8002b10:	f002 f966 	bl	8004de0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);//B
 8002b14:	2200      	movs	r2, #0
 8002b16:	2108      	movs	r1, #8
 8002b18:	483a      	ldr	r0, [pc, #232]	@ (8002c04 <main+0x144>)
 8002b1a:	f002 f961 	bl	8004de0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);//C
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002b24:	4836      	ldr	r0, [pc, #216]	@ (8002c00 <main+0x140>)
 8002b26:	f002 f95b 	bl	8004de0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);//D
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002b30:	4833      	ldr	r0, [pc, #204]	@ (8002c00 <main+0x140>)
 8002b32:	f002 f955 	bl	8004de0 <HAL_GPIO_WritePin>


  HAL_UART_Receive_IT(&huart6, &rx_data_EGU, 1);
 8002b36:	2201      	movs	r2, #1
 8002b38:	4933      	ldr	r1, [pc, #204]	@ (8002c08 <main+0x148>)
 8002b3a:	4834      	ldr	r0, [pc, #208]	@ (8002c0c <main+0x14c>)
 8002b3c:	f005 f8cd 	bl	8007cda <HAL_UART_Receive_IT>

  HAL_TIM_Base_Start_IT(&htim10);
 8002b40:	4833      	ldr	r0, [pc, #204]	@ (8002c10 <main+0x150>)
 8002b42:	f004 fd1b 	bl	800757c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8002b46:	4833      	ldr	r0, [pc, #204]	@ (8002c14 <main+0x154>)
 8002b48:	f004 fd18 	bl	800757c <HAL_TIM_Base_Start_IT>

  KalmanFilter_Init(&kf, 0.005, 0.1, 0.0);
 8002b4c:	ed9f 1a32 	vldr	s2, [pc, #200]	@ 8002c18 <main+0x158>
 8002b50:	eddf 0a32 	vldr	s1, [pc, #200]	@ 8002c1c <main+0x15c>
 8002b54:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8002c20 <main+0x160>
 8002b58:	4832      	ldr	r0, [pc, #200]	@ (8002c24 <main+0x164>)
 8002b5a:	f7ff fe95 	bl	8002888 <KalmanFilter_Init>

  KalmanFilter_Init(&ax, 0.2, 2, toplam_accX);
 8002b5e:	4b32      	ldr	r3, [pc, #200]	@ (8002c28 <main+0x168>)
 8002b60:	edd3 7a00 	vldr	s15, [r3]
 8002b64:	eeb0 1a67 	vmov.f32	s2, s15
 8002b68:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8002b6c:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 8002c2c <main+0x16c>
 8002b70:	482f      	ldr	r0, [pc, #188]	@ (8002c30 <main+0x170>)
 8002b72:	f7ff fe89 	bl	8002888 <KalmanFilter_Init>
  KalmanFilter_Init(&ay, 0.2, 2, toplam_accY);
 8002b76:	4b2f      	ldr	r3, [pc, #188]	@ (8002c34 <main+0x174>)
 8002b78:	edd3 7a00 	vldr	s15, [r3]
 8002b7c:	eeb0 1a67 	vmov.f32	s2, s15
 8002b80:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8002b84:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8002c2c <main+0x16c>
 8002b88:	482b      	ldr	r0, [pc, #172]	@ (8002c38 <main+0x178>)
 8002b8a:	f7ff fe7d 	bl	8002888 <KalmanFilter_Init>
  KalmanFilter_Init(&az, 0.2, 2, toplam_accZ);
 8002b8e:	4b2b      	ldr	r3, [pc, #172]	@ (8002c3c <main+0x17c>)
 8002b90:	edd3 7a00 	vldr	s15, [r3]
 8002b94:	eeb0 1a67 	vmov.f32	s2, s15
 8002b98:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8002b9c:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8002c2c <main+0x16c>
 8002ba0:	4827      	ldr	r0, [pc, #156]	@ (8002c40 <main+0x180>)
 8002ba2:	f7ff fe71 	bl	8002888 <KalmanFilter_Init>
  KalmanFilter_Init(&gx, 0.2, 2, toplam_gX);
 8002ba6:	4b27      	ldr	r3, [pc, #156]	@ (8002c44 <main+0x184>)
 8002ba8:	edd3 7a00 	vldr	s15, [r3]
 8002bac:	eeb0 1a67 	vmov.f32	s2, s15
 8002bb0:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8002bb4:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8002c2c <main+0x16c>
 8002bb8:	4823      	ldr	r0, [pc, #140]	@ (8002c48 <main+0x188>)
 8002bba:	f7ff fe65 	bl	8002888 <KalmanFilter_Init>
  KalmanFilter_Init(&gy, 0.2, 2, toplam_gY);
 8002bbe:	4b23      	ldr	r3, [pc, #140]	@ (8002c4c <main+0x18c>)
 8002bc0:	edd3 7a00 	vldr	s15, [r3]
 8002bc4:	eeb0 1a67 	vmov.f32	s2, s15
 8002bc8:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8002bcc:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8002c2c <main+0x16c>
 8002bd0:	481f      	ldr	r0, [pc, #124]	@ (8002c50 <main+0x190>)
 8002bd2:	f7ff fe59 	bl	8002888 <KalmanFilter_Init>
  KalmanFilter_Init(&gz, 0.2, 2, toplam_gZ);
 8002bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8002c54 <main+0x194>)
 8002bd8:	edd3 7a00 	vldr	s15, [r3]
 8002bdc:	eeb0 1a67 	vmov.f32	s2, s15
 8002be0:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8002be4:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8002c2c <main+0x16c>
 8002be8:	481b      	ldr	r0, [pc, #108]	@ (8002c58 <main+0x198>)
 8002bea:	f7ff fe4d 	bl	8002888 <KalmanFilter_Init>

  LSM6DSLTR_Init();
 8002bee:	f7ff fc85 	bl	80024fc <LSM6DSLTR_Init>
  bme_config();
 8002bf2:	f001 fb07 	bl	8004204 <bme_config>
  Altitude_Offset();
 8002bf6:	f001 f9d1 	bl	8003f9c <Altitude_Offset>

  for(int i = 0; i<5;i++)
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	e057      	b.n	8002cb0 <main+0x1f0>
 8002c00:	40020800 	.word	0x40020800
 8002c04:	40020400 	.word	0x40020400
 8002c08:	20000292 	.word	0x20000292
 8002c0c:	20000198 	.word	0x20000198
 8002c10:	20000150 	.word	0x20000150
 8002c14:	20000108 	.word	0x20000108
 8002c18:	00000000 	.word	0x00000000
 8002c1c:	3dcccccd 	.word	0x3dcccccd
 8002c20:	3ba3d70a 	.word	0x3ba3d70a
 8002c24:	200001dc 	.word	0x200001dc
 8002c28:	20000310 	.word	0x20000310
 8002c2c:	3e4ccccd 	.word	0x3e4ccccd
 8002c30:	200001f0 	.word	0x200001f0
 8002c34:	20000314 	.word	0x20000314
 8002c38:	20000204 	.word	0x20000204
 8002c3c:	20000318 	.word	0x20000318
 8002c40:	20000218 	.word	0x20000218
 8002c44:	2000031c 	.word	0x2000031c
 8002c48:	2000022c 	.word	0x2000022c
 8002c4c:	20000320 	.word	0x20000320
 8002c50:	20000240 	.word	0x20000240
 8002c54:	20000324 	.word	0x20000324
 8002c58:	20000254 	.word	0x20000254
  {

	      LSM6DSLTR_Read_Gyro_Data(&Lsm_Sensor);
 8002c5c:	48c1      	ldr	r0, [pc, #772]	@ (8002f64 <main+0x4a4>)
 8002c5e:	f7ff fd79 	bl	8002754 <LSM6DSLTR_Read_Gyro_Data>

	      offset_x += Lsm_Sensor.Gyro_X;
 8002c62:	4bc0      	ldr	r3, [pc, #768]	@ (8002f64 <main+0x4a4>)
 8002c64:	ed93 7a03 	vldr	s14, [r3, #12]
 8002c68:	4bbf      	ldr	r3, [pc, #764]	@ (8002f68 <main+0x4a8>)
 8002c6a:	edd3 7a00 	vldr	s15, [r3]
 8002c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c72:	4bbd      	ldr	r3, [pc, #756]	@ (8002f68 <main+0x4a8>)
 8002c74:	edc3 7a00 	vstr	s15, [r3]
		  offset_y += Lsm_Sensor.Gyro_Y;
 8002c78:	4bba      	ldr	r3, [pc, #744]	@ (8002f64 <main+0x4a4>)
 8002c7a:	ed93 7a04 	vldr	s14, [r3, #16]
 8002c7e:	4bbb      	ldr	r3, [pc, #748]	@ (8002f6c <main+0x4ac>)
 8002c80:	edd3 7a00 	vldr	s15, [r3]
 8002c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c88:	4bb8      	ldr	r3, [pc, #736]	@ (8002f6c <main+0x4ac>)
 8002c8a:	edc3 7a00 	vstr	s15, [r3]
		  offset_z += Lsm_Sensor.Gyro_Z;
 8002c8e:	4bb5      	ldr	r3, [pc, #724]	@ (8002f64 <main+0x4a4>)
 8002c90:	ed93 7a05 	vldr	s14, [r3, #20]
 8002c94:	4bb6      	ldr	r3, [pc, #728]	@ (8002f70 <main+0x4b0>)
 8002c96:	edd3 7a00 	vldr	s15, [r3]
 8002c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c9e:	4bb4      	ldr	r3, [pc, #720]	@ (8002f70 <main+0x4b0>)
 8002ca0:	edc3 7a00 	vstr	s15, [r3]
		  HAL_Delay(10);
 8002ca4:	200a      	movs	r0, #10
 8002ca6:	f001 fd27 	bl	80046f8 <HAL_Delay>
  for(int i = 0; i<5;i++)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	3301      	adds	r3, #1
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	ddd2      	ble.n	8002c5c <main+0x19c>
  }
  offset_x=offset_x/5;
 8002cb6:	4bac      	ldr	r3, [pc, #688]	@ (8002f68 <main+0x4a8>)
 8002cb8:	ed93 7a00 	vldr	s14, [r3]
 8002cbc:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8002cc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cc4:	4ba8      	ldr	r3, [pc, #672]	@ (8002f68 <main+0x4a8>)
 8002cc6:	edc3 7a00 	vstr	s15, [r3]
  offset_y=offset_y/5;
 8002cca:	4ba8      	ldr	r3, [pc, #672]	@ (8002f6c <main+0x4ac>)
 8002ccc:	ed93 7a00 	vldr	s14, [r3]
 8002cd0:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8002cd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cd8:	4ba4      	ldr	r3, [pc, #656]	@ (8002f6c <main+0x4ac>)
 8002cda:	edc3 7a00 	vstr	s15, [r3]
  offset_z=offset_z/5;
 8002cde:	4ba4      	ldr	r3, [pc, #656]	@ (8002f70 <main+0x4b0>)
 8002ce0:	ed93 7a00 	vldr	s14, [r3]
 8002ce4:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8002ce8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cec:	4ba0      	ldr	r3, [pc, #640]	@ (8002f70 <main+0x4b0>)
 8002cee:	edc3 7a00 	vstr	s15, [r3]


  Buzzer(10, 100);
 8002cf2:	2164      	movs	r1, #100	@ 0x64
 8002cf4:	200a      	movs	r0, #10
 8002cf6:	f001 f8fd 	bl	8003ef4 <Buzzer>

  ariza_BME=BME_I2C_Testsensor();
 8002cfa:	f000 ffe9 	bl	8003cd0 <BME_I2C_Testsensor>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	4b9c      	ldr	r3, [pc, #624]	@ (8002f74 <main+0x4b4>)
 8002d04:	701a      	strb	r2, [r3, #0]
  ariza_LSM=LSM_I2C_Testsensor();
 8002d06:	f000 fffb 	bl	8003d00 <LSM_I2C_Testsensor>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	4b9a      	ldr	r3, [pc, #616]	@ (8002f78 <main+0x4b8>)
 8002d10:	701a      	strb	r2, [r3, #0]

  ariza=ariza_BME+ariza_LSM;
 8002d12:	4b98      	ldr	r3, [pc, #608]	@ (8002f74 <main+0x4b4>)
 8002d14:	781a      	ldrb	r2, [r3, #0]
 8002d16:	4b98      	ldr	r3, [pc, #608]	@ (8002f78 <main+0x4b8>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	4b97      	ldr	r3, [pc, #604]	@ (8002f7c <main+0x4bc>)
 8002d20:	701a      	strb	r2, [r3, #0]
	set1=set_timer;
 8002d22:	4b97      	ldr	r3, [pc, #604]	@ (8002f80 <main+0x4c0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a97      	ldr	r2, [pc, #604]	@ (8002f84 <main+0x4c4>)
 8002d28:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  MEGU_TX_BUF_FILL();
 8002d2a:	f001 f9a1 	bl	8004070 <MEGU_TX_BUF_FILL>



/********************* Sensor Ölçüm **************************************************/
	if(sensor_flag==1)
 8002d2e:	4b96      	ldr	r3, [pc, #600]	@ (8002f88 <main+0x4c8>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	f040 8450 	bne.w	80035d8 <main+0xb18>
	{
		 sensor_flag=0;
 8002d38:	4b93      	ldr	r3, [pc, #588]	@ (8002f88 <main+0x4c8>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
		 prev_alt=altitude_kalman;
 8002d3e:	4b93      	ldr	r3, [pc, #588]	@ (8002f8c <main+0x4cc>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a93      	ldr	r2, [pc, #588]	@ (8002f90 <main+0x4d0>)
 8002d44:	6013      	str	r3, [r2, #0]
		 rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 8002d46:	4993      	ldr	r1, [pc, #588]	@ (8002f94 <main+0x4d4>)
 8002d48:	2001      	movs	r0, #1
 8002d4a:	f7fe fa2a 	bl	80011a2 <bme280_set_sensor_mode>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	461a      	mov	r2, r3
 8002d52:	4b91      	ldr	r3, [pc, #580]	@ (8002f98 <main+0x4d8>)
 8002d54:	701a      	strb	r2, [r3, #0]
		/* �?��?�터 취�? */
		rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8002d56:	4a8f      	ldr	r2, [pc, #572]	@ (8002f94 <main+0x4d4>)
 8002d58:	4990      	ldr	r1, [pc, #576]	@ (8002f9c <main+0x4dc>)
 8002d5a:	2007      	movs	r0, #7
 8002d5c:	f7fe fa9d 	bl	800129a <bme280_get_sensor_data>
 8002d60:	4603      	mov	r3, r0
 8002d62:	461a      	mov	r2, r3
 8002d64:	4b8c      	ldr	r3, [pc, #560]	@ (8002f98 <main+0x4d8>)
 8002d66:	701a      	strb	r2, [r3, #0]



	      LSM6DSLTR_Read_Accel_Data(&Lsm_Sensor);
 8002d68:	487e      	ldr	r0, [pc, #504]	@ (8002f64 <main+0x4a4>)
 8002d6a:	f7ff fc19 	bl	80025a0 <LSM6DSLTR_Read_Accel_Data>
	      LSM6DSLTR_Read_Gyro_Data(&Lsm_Sensor);
 8002d6e:	487d      	ldr	r0, [pc, #500]	@ (8002f64 <main+0x4a4>)
 8002d70:	f7ff fcf0 	bl	8002754 <LSM6DSLTR_Read_Gyro_Data>


	      toplam_accX += KalmanFilter_Update(&ax,Lsm_Sensor.Accel_X);
 8002d74:	4b7b      	ldr	r3, [pc, #492]	@ (8002f64 <main+0x4a4>)
 8002d76:	edd3 7a00 	vldr	s15, [r3]
 8002d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d7e:	4888      	ldr	r0, [pc, #544]	@ (8002fa0 <main+0x4e0>)
 8002d80:	f7ff fda4 	bl	80028cc <KalmanFilter_Update>
 8002d84:	eeb0 7a40 	vmov.f32	s14, s0
 8002d88:	4b86      	ldr	r3, [pc, #536]	@ (8002fa4 <main+0x4e4>)
 8002d8a:	edd3 7a00 	vldr	s15, [r3]
 8002d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d92:	4b84      	ldr	r3, [pc, #528]	@ (8002fa4 <main+0x4e4>)
 8002d94:	edc3 7a00 	vstr	s15, [r3]
	      toplam_accY += KalmanFilter_Update(&ay,Lsm_Sensor.Accel_Y );
 8002d98:	4b72      	ldr	r3, [pc, #456]	@ (8002f64 <main+0x4a4>)
 8002d9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002da2:	4881      	ldr	r0, [pc, #516]	@ (8002fa8 <main+0x4e8>)
 8002da4:	f7ff fd92 	bl	80028cc <KalmanFilter_Update>
 8002da8:	eeb0 7a40 	vmov.f32	s14, s0
 8002dac:	4b7f      	ldr	r3, [pc, #508]	@ (8002fac <main+0x4ec>)
 8002dae:	edd3 7a00 	vldr	s15, [r3]
 8002db2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002db6:	4b7d      	ldr	r3, [pc, #500]	@ (8002fac <main+0x4ec>)
 8002db8:	edc3 7a00 	vstr	s15, [r3]
	      toplam_accZ += KalmanFilter_Update(&az,Lsm_Sensor.Accel_Z );
 8002dbc:	4b69      	ldr	r3, [pc, #420]	@ (8002f64 <main+0x4a4>)
 8002dbe:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002dc6:	487a      	ldr	r0, [pc, #488]	@ (8002fb0 <main+0x4f0>)
 8002dc8:	f7ff fd80 	bl	80028cc <KalmanFilter_Update>
 8002dcc:	eeb0 7a40 	vmov.f32	s14, s0
 8002dd0:	4b78      	ldr	r3, [pc, #480]	@ (8002fb4 <main+0x4f4>)
 8002dd2:	edd3 7a00 	vldr	s15, [r3]
 8002dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dda:	4b76      	ldr	r3, [pc, #472]	@ (8002fb4 <main+0x4f4>)
 8002ddc:	edc3 7a00 	vstr	s15, [r3]
	      toplam_gX +=  KalmanFilter_Update(&gx,Lsm_Sensor.Gyro_X-offset_x  );
 8002de0:	4b60      	ldr	r3, [pc, #384]	@ (8002f64 <main+0x4a4>)
 8002de2:	ed93 7a03 	vldr	s14, [r3, #12]
 8002de6:	4b60      	ldr	r3, [pc, #384]	@ (8002f68 <main+0x4a8>)
 8002de8:	edd3 7a00 	vldr	s15, [r3]
 8002dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002df0:	eeb0 0a67 	vmov.f32	s0, s15
 8002df4:	4870      	ldr	r0, [pc, #448]	@ (8002fb8 <main+0x4f8>)
 8002df6:	f7ff fd69 	bl	80028cc <KalmanFilter_Update>
 8002dfa:	eeb0 7a40 	vmov.f32	s14, s0
 8002dfe:	4b6f      	ldr	r3, [pc, #444]	@ (8002fbc <main+0x4fc>)
 8002e00:	edd3 7a00 	vldr	s15, [r3]
 8002e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e08:	4b6c      	ldr	r3, [pc, #432]	@ (8002fbc <main+0x4fc>)
 8002e0a:	edc3 7a00 	vstr	s15, [r3]
	      toplam_gX +=  KalmanFilter_Update(&gy,Lsm_Sensor.Gyro_Y -offset_y );
 8002e0e:	4b55      	ldr	r3, [pc, #340]	@ (8002f64 <main+0x4a4>)
 8002e10:	ed93 7a04 	vldr	s14, [r3, #16]
 8002e14:	4b55      	ldr	r3, [pc, #340]	@ (8002f6c <main+0x4ac>)
 8002e16:	edd3 7a00 	vldr	s15, [r3]
 8002e1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e22:	4867      	ldr	r0, [pc, #412]	@ (8002fc0 <main+0x500>)
 8002e24:	f7ff fd52 	bl	80028cc <KalmanFilter_Update>
 8002e28:	eeb0 7a40 	vmov.f32	s14, s0
 8002e2c:	4b63      	ldr	r3, [pc, #396]	@ (8002fbc <main+0x4fc>)
 8002e2e:	edd3 7a00 	vldr	s15, [r3]
 8002e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e36:	4b61      	ldr	r3, [pc, #388]	@ (8002fbc <main+0x4fc>)
 8002e38:	edc3 7a00 	vstr	s15, [r3]
	      toplam_gZ +=  KalmanFilter_Update(&gz,Lsm_Sensor.Gyro_Z -offset_z );
 8002e3c:	4b49      	ldr	r3, [pc, #292]	@ (8002f64 <main+0x4a4>)
 8002e3e:	ed93 7a05 	vldr	s14, [r3, #20]
 8002e42:	4b4b      	ldr	r3, [pc, #300]	@ (8002f70 <main+0x4b0>)
 8002e44:	edd3 7a00 	vldr	s15, [r3]
 8002e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e50:	485c      	ldr	r0, [pc, #368]	@ (8002fc4 <main+0x504>)
 8002e52:	f7ff fd3b 	bl	80028cc <KalmanFilter_Update>
 8002e56:	eeb0 7a40 	vmov.f32	s14, s0
 8002e5a:	4b5b      	ldr	r3, [pc, #364]	@ (8002fc8 <main+0x508>)
 8002e5c:	edd3 7a00 	vldr	s15, [r3]
 8002e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e64:	4b58      	ldr	r3, [pc, #352]	@ (8002fc8 <main+0x508>)
 8002e66:	edc3 7a00 	vstr	s15, [r3]

		   sensor_counter++;
 8002e6a:	4b58      	ldr	r3, [pc, #352]	@ (8002fcc <main+0x50c>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	4b56      	ldr	r3, [pc, #344]	@ (8002fcc <main+0x50c>)
 8002e74:	701a      	strb	r2, [r3, #0]
	     if(sensor_counter == 10)
 8002e76:	4b55      	ldr	r3, [pc, #340]	@ (8002fcc <main+0x50c>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b0a      	cmp	r3, #10
 8002e7c:	f040 8391 	bne.w	80035a2 <main+0xae2>
		      {

			      if(rslt == BME280_OK )
 8002e80:	4b45      	ldr	r3, [pc, #276]	@ (8002f98 <main+0x4d8>)
 8002e82:	f993 3000 	ldrsb.w	r3, [r3]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d168      	bne.n	8002f5c <main+0x49c>
			      {
			          temperature = comp_data.temperature / 100.00;
 8002e8a:	4b44      	ldr	r3, [pc, #272]	@ (8002f9c <main+0x4dc>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd fb0c 	bl	80004ac <__aeabi_i2d>
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	4b4d      	ldr	r3, [pc, #308]	@ (8002fd0 <main+0x510>)
 8002e9a:	f7fd fc9b 	bl	80007d4 <__aeabi_ddiv>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	f7fd fe1b 	bl	8000ae0 <__aeabi_d2f>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4a49      	ldr	r2, [pc, #292]	@ (8002fd4 <main+0x514>)
 8002eae:	6013      	str	r3, [r2, #0]
			          humidity = comp_data.humidity;
 8002eb0:	4b3a      	ldr	r3, [pc, #232]	@ (8002f9c <main+0x4dc>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	ee07 3a90 	vmov	s15, r3
 8002eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ebc:	4b46      	ldr	r3, [pc, #280]	@ (8002fd8 <main+0x518>)
 8002ebe:	edc3 7a00 	vstr	s15, [r3]
			          pressure = comp_data.pressure;
 8002ec2:	4b36      	ldr	r3, [pc, #216]	@ (8002f9c <main+0x4dc>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	ee07 3a90 	vmov	s15, r3
 8002eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ece:	4b43      	ldr	r3, [pc, #268]	@ (8002fdc <main+0x51c>)
 8002ed0:	edc3 7a00 	vstr	s15, [r3]
			          altitude = BME280_Get_Altitude() - offset_altitude;
 8002ed4:	f000 ff2c 	bl	8003d30 <BME280_Get_Altitude>
 8002ed8:	eeb0 7a40 	vmov.f32	s14, s0
 8002edc:	4b40      	ldr	r3, [pc, #256]	@ (8002fe0 <main+0x520>)
 8002ede:	edd3 7a00 	vldr	s15, [r3]
 8002ee2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee6:	4b3f      	ldr	r3, [pc, #252]	@ (8002fe4 <main+0x524>)
 8002ee8:	edc3 7a00 	vstr	s15, [r3]
			          altitude_kalman = KalmanFilter_Update(&kf, altitude);
 8002eec:	4b3d      	ldr	r3, [pc, #244]	@ (8002fe4 <main+0x524>)
 8002eee:	edd3 7a00 	vldr	s15, [r3]
 8002ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef6:	483c      	ldr	r0, [pc, #240]	@ (8002fe8 <main+0x528>)
 8002ef8:	f7ff fce8 	bl	80028cc <KalmanFilter_Update>
 8002efc:	eef0 7a40 	vmov.f32	s15, s0
 8002f00:	4b22      	ldr	r3, [pc, #136]	@ (8002f8c <main+0x4cc>)
 8002f02:	edc3 7a00 	vstr	s15, [r3]
			          speed_time = (HAL_GetTick()-speed_time_prev)/1000.0f;
 8002f06:	f001 fbeb 	bl	80046e0 <HAL_GetTick>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	4a37      	ldr	r2, [pc, #220]	@ (8002fec <main+0x52c>)
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	1a9b      	subs	r3, r3, r2
 8002f12:	ee07 3a90 	vmov	s15, r3
 8002f16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f1a:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8002ff0 <main+0x530>
 8002f1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f26:	ee17 2a90 	vmov	r2, s15
 8002f2a:	4b32      	ldr	r3, [pc, #200]	@ (8002ff4 <main+0x534>)
 8002f2c:	601a      	str	r2, [r3, #0]
					  speed = (altitude - prev_alt) * speed_time;
 8002f2e:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe4 <main+0x524>)
 8002f30:	ed93 7a00 	vldr	s14, [r3]
 8002f34:	4b16      	ldr	r3, [pc, #88]	@ (8002f90 <main+0x4d0>)
 8002f36:	edd3 7a00 	vldr	s15, [r3]
 8002f3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f3e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff4 <main+0x534>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	ee07 3a90 	vmov	s15, r3
 8002f46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ff8 <main+0x538>)
 8002f50:	edc3 7a00 	vstr	s15, [r3]
					  speed_time_prev = speed_time;
 8002f54:	4b27      	ldr	r3, [pc, #156]	@ (8002ff4 <main+0x534>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a24      	ldr	r2, [pc, #144]	@ (8002fec <main+0x52c>)
 8002f5a:	6013      	str	r3, [r2, #0]
					  // High pass filter for gyroscope data
	//			  filtered_gyro_HP_X = HP_alpha * (gyroX_HP_prev + toplam_gX/10.0f - gyroX_HP_prev);
	//			  filtered_gyro_HP_Y = HP_alpha * (gyroY_HP_prev + toplam_gY/10.0f - gyroY_HP_prev);
	//			  filtered_gyro_HP_Z = HP_alpha * (gyroZ_HP_prev + toplam_gZ/10.0f - gyroZ_HP_prev);

				  filtered_gyro_LP[0] = LP_alpha * toplam_gX/10.0f + (1.0 - LP_alpha) * gyroX_LP_prev;
 8002f5c:	4b17      	ldr	r3, [pc, #92]	@ (8002fbc <main+0x4fc>)
 8002f5e:	edd3 7a00 	vldr	s15, [r3]
 8002f62:	e04d      	b.n	8003000 <main+0x540>
 8002f64:	20000384 	.word	0x20000384
 8002f68:	20000328 	.word	0x20000328
 8002f6c:	2000032c 	.word	0x2000032c
 8002f70:	20000330 	.word	0x20000330
 8002f74:	200002b8 	.word	0x200002b8
 8002f78:	200002b9 	.word	0x200002b9
 8002f7c:	200002ba 	.word	0x200002ba
 8002f80:	200002bc 	.word	0x200002bc
 8002f84:	200002c0 	.word	0x200002c0
 8002f88:	200002b6 	.word	0x200002b6
 8002f8c:	200003a8 	.word	0x200003a8
 8002f90:	200002e0 	.word	0x200002e0
 8002f94:	200003b0 	.word	0x200003b0
 8002f98:	200003fc 	.word	0x200003fc
 8002f9c:	200003f0 	.word	0x200003f0
 8002fa0:	200001f0 	.word	0x200001f0
 8002fa4:	20000310 	.word	0x20000310
 8002fa8:	20000204 	.word	0x20000204
 8002fac:	20000314 	.word	0x20000314
 8002fb0:	20000218 	.word	0x20000218
 8002fb4:	20000318 	.word	0x20000318
 8002fb8:	2000022c 	.word	0x2000022c
 8002fbc:	2000031c 	.word	0x2000031c
 8002fc0:	20000240 	.word	0x20000240
 8002fc4:	20000254 	.word	0x20000254
 8002fc8:	20000324 	.word	0x20000324
 8002fcc:	20000380 	.word	0x20000380
 8002fd0:	40590000 	.word	0x40590000
 8002fd4:	200002c4 	.word	0x200002c4
 8002fd8:	200002c8 	.word	0x200002c8
 8002fdc:	200002d8 	.word	0x200002d8
 8002fe0:	200002d4 	.word	0x200002d4
 8002fe4:	200002cc 	.word	0x200002cc
 8002fe8:	200001dc 	.word	0x200001dc
 8002fec:	2000037c 	.word	0x2000037c
 8002ff0:	447a0000 	.word	0x447a0000
 8002ff4:	20000378 	.word	0x20000378
 8002ff8:	200002e4 	.word	0x200002e4
 8002ffc:	3f0ccccd 	.word	0x3f0ccccd
 8003000:	ed1f 7a02 	vldr	s14, [pc, #-8]	@ 8002ffc <main+0x53c>
 8003004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003008:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800300c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003010:	ee16 0a90 	vmov	r0, s13
 8003014:	f7fd fa5c 	bl	80004d0 <__aeabi_f2d>
 8003018:	4604      	mov	r4, r0
 800301a:	460d      	mov	r5, r1
 800301c:	4bce      	ldr	r3, [pc, #824]	@ (8003358 <main+0x898>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f7fd fa55 	bl	80004d0 <__aeabi_f2d>
 8003026:	a3c6      	add	r3, pc, #792	@ (adr r3, 8003340 <main+0x880>)
 8003028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302c:	f7fd faa8 	bl	8000580 <__aeabi_dmul>
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4620      	mov	r0, r4
 8003036:	4629      	mov	r1, r5
 8003038:	f7fd f8ec 	bl	8000214 <__adddf3>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4610      	mov	r0, r2
 8003042:	4619      	mov	r1, r3
 8003044:	f7fd fd4c 	bl	8000ae0 <__aeabi_d2f>
 8003048:	4603      	mov	r3, r0
 800304a:	4ac4      	ldr	r2, [pc, #784]	@ (800335c <main+0x89c>)
 800304c:	6013      	str	r3, [r2, #0]
				  filtered_gyro_LP[1] = LP_alpha * toplam_gY/10.0f + (1.0 - LP_alpha) * gyroY_LP_prev ;
 800304e:	4bc4      	ldr	r3, [pc, #784]	@ (8003360 <main+0x8a0>)
 8003050:	edd3 7a00 	vldr	s15, [r3]
 8003054:	ed9f 7ac3 	vldr	s14, [pc, #780]	@ 8003364 <main+0x8a4>
 8003058:	ee67 7a87 	vmul.f32	s15, s15, s14
 800305c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003060:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003064:	ee16 0a90 	vmov	r0, s13
 8003068:	f7fd fa32 	bl	80004d0 <__aeabi_f2d>
 800306c:	4604      	mov	r4, r0
 800306e:	460d      	mov	r5, r1
 8003070:	4bbd      	ldr	r3, [pc, #756]	@ (8003368 <main+0x8a8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7fd fa2b 	bl	80004d0 <__aeabi_f2d>
 800307a:	a3b1      	add	r3, pc, #708	@ (adr r3, 8003340 <main+0x880>)
 800307c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003080:	f7fd fa7e 	bl	8000580 <__aeabi_dmul>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4620      	mov	r0, r4
 800308a:	4629      	mov	r1, r5
 800308c:	f7fd f8c2 	bl	8000214 <__adddf3>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4610      	mov	r0, r2
 8003096:	4619      	mov	r1, r3
 8003098:	f7fd fd22 	bl	8000ae0 <__aeabi_d2f>
 800309c:	4603      	mov	r3, r0
 800309e:	4aaf      	ldr	r2, [pc, #700]	@ (800335c <main+0x89c>)
 80030a0:	6053      	str	r3, [r2, #4]
				  filtered_gyro_LP[2] = LP_alpha * toplam_gZ/10.0f + (1.0 - LP_alpha) * gyroZ_LP_prev;
 80030a2:	4bb2      	ldr	r3, [pc, #712]	@ (800336c <main+0x8ac>)
 80030a4:	edd3 7a00 	vldr	s15, [r3]
 80030a8:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8003364 <main+0x8a4>
 80030ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030b0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80030b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80030b8:	ee16 0a90 	vmov	r0, s13
 80030bc:	f7fd fa08 	bl	80004d0 <__aeabi_f2d>
 80030c0:	4604      	mov	r4, r0
 80030c2:	460d      	mov	r5, r1
 80030c4:	4baa      	ldr	r3, [pc, #680]	@ (8003370 <main+0x8b0>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fd fa01 	bl	80004d0 <__aeabi_f2d>
 80030ce:	a39c      	add	r3, pc, #624	@ (adr r3, 8003340 <main+0x880>)
 80030d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d4:	f7fd fa54 	bl	8000580 <__aeabi_dmul>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4620      	mov	r0, r4
 80030de:	4629      	mov	r1, r5
 80030e0:	f7fd f898 	bl	8000214 <__adddf3>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4610      	mov	r0, r2
 80030ea:	4619      	mov	r1, r3
 80030ec:	f7fd fcf8 	bl	8000ae0 <__aeabi_d2f>
 80030f0:	4603      	mov	r3, r0
 80030f2:	4a9a      	ldr	r2, [pc, #616]	@ (800335c <main+0x89c>)
 80030f4:	6093      	str	r3, [r2, #8]

				/*************************** ********************************/
				  filtered_gyro_HP_X = beta * (gyroX_HP_prev +  filtered_gyro_LP[0] - gyroX_LP_prev);
 80030f6:	4b99      	ldr	r3, [pc, #612]	@ (800335c <main+0x89c>)
 80030f8:	ed93 7a00 	vldr	s14, [r3]
 80030fc:	4b9d      	ldr	r3, [pc, #628]	@ (8003374 <main+0x8b4>)
 80030fe:	edd3 7a00 	vldr	s15, [r3]
 8003102:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003106:	4b94      	ldr	r3, [pc, #592]	@ (8003358 <main+0x898>)
 8003108:	edd3 7a00 	vldr	s15, [r3]
 800310c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003110:	ee17 0a90 	vmov	r0, s15
 8003114:	f7fd f9dc 	bl	80004d0 <__aeabi_f2d>
 8003118:	a38b      	add	r3, pc, #556	@ (adr r3, 8003348 <main+0x888>)
 800311a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311e:	f7fd fa2f 	bl	8000580 <__aeabi_dmul>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4610      	mov	r0, r2
 8003128:	4619      	mov	r1, r3
 800312a:	f7fd fcd9 	bl	8000ae0 <__aeabi_d2f>
 800312e:	4603      	mov	r3, r0
 8003130:	4a91      	ldr	r2, [pc, #580]	@ (8003378 <main+0x8b8>)
 8003132:	6013      	str	r3, [r2, #0]
				  filtered_gyro_HP_Y = beta * (gyroY_HP_prev + filtered_gyro_LP[1] - gyroY_LP_prev);
 8003134:	4b89      	ldr	r3, [pc, #548]	@ (800335c <main+0x89c>)
 8003136:	ed93 7a01 	vldr	s14, [r3, #4]
 800313a:	4b90      	ldr	r3, [pc, #576]	@ (800337c <main+0x8bc>)
 800313c:	edd3 7a00 	vldr	s15, [r3]
 8003140:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003144:	4b88      	ldr	r3, [pc, #544]	@ (8003368 <main+0x8a8>)
 8003146:	edd3 7a00 	vldr	s15, [r3]
 800314a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800314e:	ee17 0a90 	vmov	r0, s15
 8003152:	f7fd f9bd 	bl	80004d0 <__aeabi_f2d>
 8003156:	a37c      	add	r3, pc, #496	@ (adr r3, 8003348 <main+0x888>)
 8003158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315c:	f7fd fa10 	bl	8000580 <__aeabi_dmul>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4610      	mov	r0, r2
 8003166:	4619      	mov	r1, r3
 8003168:	f7fd fcba 	bl	8000ae0 <__aeabi_d2f>
 800316c:	4603      	mov	r3, r0
 800316e:	4a84      	ldr	r2, [pc, #528]	@ (8003380 <main+0x8c0>)
 8003170:	6013      	str	r3, [r2, #0]
				  filtered_gyro_HP_Z = beta * (gyroZ_HP_prev +  filtered_gyro_LP[2] - gyroZ_LP_prev);
 8003172:	4b7a      	ldr	r3, [pc, #488]	@ (800335c <main+0x89c>)
 8003174:	ed93 7a02 	vldr	s14, [r3, #8]
 8003178:	4b82      	ldr	r3, [pc, #520]	@ (8003384 <main+0x8c4>)
 800317a:	edd3 7a00 	vldr	s15, [r3]
 800317e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003182:	4b7b      	ldr	r3, [pc, #492]	@ (8003370 <main+0x8b0>)
 8003184:	edd3 7a00 	vldr	s15, [r3]
 8003188:	ee77 7a67 	vsub.f32	s15, s14, s15
 800318c:	ee17 0a90 	vmov	r0, s15
 8003190:	f7fd f99e 	bl	80004d0 <__aeabi_f2d>
 8003194:	a36c      	add	r3, pc, #432	@ (adr r3, 8003348 <main+0x888>)
 8003196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319a:	f7fd f9f1 	bl	8000580 <__aeabi_dmul>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	4610      	mov	r0, r2
 80031a4:	4619      	mov	r1, r3
 80031a6:	f7fd fc9b 	bl	8000ae0 <__aeabi_d2f>
 80031aa:	4603      	mov	r3, r0
 80031ac:	4a76      	ldr	r2, [pc, #472]	@ (8003388 <main+0x8c8>)
 80031ae:	6013      	str	r3, [r2, #0]


				  gyroX_LP_prev =  filtered_gyro_LP[0];
 80031b0:	4b6a      	ldr	r3, [pc, #424]	@ (800335c <main+0x89c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a68      	ldr	r2, [pc, #416]	@ (8003358 <main+0x898>)
 80031b6:	6013      	str	r3, [r2, #0]
				  gyroY_LP_prev =  filtered_gyro_LP[1];
 80031b8:	4b68      	ldr	r3, [pc, #416]	@ (800335c <main+0x89c>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4a6a      	ldr	r2, [pc, #424]	@ (8003368 <main+0x8a8>)
 80031be:	6013      	str	r3, [r2, #0]
				  gyroZ_LP_prev =  filtered_gyro_LP[2];
 80031c0:	4b66      	ldr	r3, [pc, #408]	@ (800335c <main+0x89c>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	4a6a      	ldr	r2, [pc, #424]	@ (8003370 <main+0x8b0>)
 80031c6:	6013      	str	r3, [r2, #0]

				  // Low pass filter for accelerometer data
				  filtered_acc_LP[0] = LP_alpha * filtered_acc_LP[0] + (1 - LP_alpha) *  toplam_accX / 10.0;
 80031c8:	4b70      	ldr	r3, [pc, #448]	@ (800338c <main+0x8cc>)
 80031ca:	edd3 7a00 	vldr	s15, [r3]
 80031ce:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8003364 <main+0x8a4>
 80031d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031d6:	ee17 0a90 	vmov	r0, s15
 80031da:	f7fd f979 	bl	80004d0 <__aeabi_f2d>
 80031de:	4604      	mov	r4, r0
 80031e0:	460d      	mov	r5, r1
 80031e2:	4b6b      	ldr	r3, [pc, #428]	@ (8003390 <main+0x8d0>)
 80031e4:	edd3 7a00 	vldr	s15, [r3]
 80031e8:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8003394 <main+0x8d4>
 80031ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031f0:	ee17 0a90 	vmov	r0, s15
 80031f4:	f7fd f96c 	bl	80004d0 <__aeabi_f2d>
 80031f8:	f04f 0200 	mov.w	r2, #0
 80031fc:	4b66      	ldr	r3, [pc, #408]	@ (8003398 <main+0x8d8>)
 80031fe:	f7fd fae9 	bl	80007d4 <__aeabi_ddiv>
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	4620      	mov	r0, r4
 8003208:	4629      	mov	r1, r5
 800320a:	f7fd f803 	bl	8000214 <__adddf3>
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4610      	mov	r0, r2
 8003214:	4619      	mov	r1, r3
 8003216:	f7fd fc63 	bl	8000ae0 <__aeabi_d2f>
 800321a:	4603      	mov	r3, r0
 800321c:	4a5b      	ldr	r2, [pc, #364]	@ (800338c <main+0x8cc>)
 800321e:	6013      	str	r3, [r2, #0]
				  filtered_acc_LP[1] = LP_alpha * filtered_acc_LP[1] + (1 - LP_alpha) *  toplam_accY / 10.0;
 8003220:	4b5a      	ldr	r3, [pc, #360]	@ (800338c <main+0x8cc>)
 8003222:	edd3 7a01 	vldr	s15, [r3, #4]
 8003226:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8003364 <main+0x8a4>
 800322a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800322e:	ee17 0a90 	vmov	r0, s15
 8003232:	f7fd f94d 	bl	80004d0 <__aeabi_f2d>
 8003236:	4604      	mov	r4, r0
 8003238:	460d      	mov	r5, r1
 800323a:	4b58      	ldr	r3, [pc, #352]	@ (800339c <main+0x8dc>)
 800323c:	edd3 7a00 	vldr	s15, [r3]
 8003240:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8003394 <main+0x8d4>
 8003244:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003248:	ee17 0a90 	vmov	r0, s15
 800324c:	f7fd f940 	bl	80004d0 <__aeabi_f2d>
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	4b50      	ldr	r3, [pc, #320]	@ (8003398 <main+0x8d8>)
 8003256:	f7fd fabd 	bl	80007d4 <__aeabi_ddiv>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4620      	mov	r0, r4
 8003260:	4629      	mov	r1, r5
 8003262:	f7fc ffd7 	bl	8000214 <__adddf3>
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	4610      	mov	r0, r2
 800326c:	4619      	mov	r1, r3
 800326e:	f7fd fc37 	bl	8000ae0 <__aeabi_d2f>
 8003272:	4603      	mov	r3, r0
 8003274:	4a45      	ldr	r2, [pc, #276]	@ (800338c <main+0x8cc>)
 8003276:	6053      	str	r3, [r2, #4]
				  filtered_acc_LP[2] = LP_alpha * filtered_acc_LP[2] + (1 - LP_alpha) *  toplam_accZ / 10.0;
 8003278:	4b44      	ldr	r3, [pc, #272]	@ (800338c <main+0x8cc>)
 800327a:	edd3 7a02 	vldr	s15, [r3, #8]
 800327e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8003364 <main+0x8a4>
 8003282:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003286:	ee17 0a90 	vmov	r0, s15
 800328a:	f7fd f921 	bl	80004d0 <__aeabi_f2d>
 800328e:	4604      	mov	r4, r0
 8003290:	460d      	mov	r5, r1
 8003292:	4b43      	ldr	r3, [pc, #268]	@ (80033a0 <main+0x8e0>)
 8003294:	edd3 7a00 	vldr	s15, [r3]
 8003298:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8003394 <main+0x8d4>
 800329c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032a0:	ee17 0a90 	vmov	r0, s15
 80032a4:	f7fd f914 	bl	80004d0 <__aeabi_f2d>
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	4b3a      	ldr	r3, [pc, #232]	@ (8003398 <main+0x8d8>)
 80032ae:	f7fd fa91 	bl	80007d4 <__aeabi_ddiv>
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	4620      	mov	r0, r4
 80032b8:	4629      	mov	r1, r5
 80032ba:	f7fc ffab 	bl	8000214 <__adddf3>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4610      	mov	r0, r2
 80032c4:	4619      	mov	r1, r3
 80032c6:	f7fd fc0b 	bl	8000ae0 <__aeabi_d2f>
 80032ca:	4603      	mov	r3, r0
 80032cc:	4a2f      	ldr	r2, [pc, #188]	@ (800338c <main+0x8cc>)
 80032ce:	6093      	str	r3, [r2, #8]

				  gyroX_HP_prev = filtered_gyro_HP_X;
 80032d0:	4b29      	ldr	r3, [pc, #164]	@ (8003378 <main+0x8b8>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a27      	ldr	r2, [pc, #156]	@ (8003374 <main+0x8b4>)
 80032d6:	6013      	str	r3, [r2, #0]
				  gyroY_HP_prev = filtered_gyro_HP_Y;
 80032d8:	4b29      	ldr	r3, [pc, #164]	@ (8003380 <main+0x8c0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a27      	ldr	r2, [pc, #156]	@ (800337c <main+0x8bc>)
 80032de:	6013      	str	r3, [r2, #0]
				  gyroZ_HP_prev = filtered_gyro_HP_Z;
 80032e0:	4b29      	ldr	r3, [pc, #164]	@ (8003388 <main+0x8c8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a27      	ldr	r2, [pc, #156]	@ (8003384 <main+0x8c4>)
 80032e6:	6013      	str	r3, [r2, #0]


				  real_roll = atan2f(filtered_acc_LP[1], sqrtf(filtered_acc_LP[0] * filtered_acc_LP[0] + filtered_acc_LP[2] * filtered_acc_LP[2] +  1e-10)) * 180.0f / 3.14;
 80032e8:	4b28      	ldr	r3, [pc, #160]	@ (800338c <main+0x8cc>)
 80032ea:	ed93 8a01 	vldr	s16, [r3, #4]
 80032ee:	4b27      	ldr	r3, [pc, #156]	@ (800338c <main+0x8cc>)
 80032f0:	ed93 7a00 	vldr	s14, [r3]
 80032f4:	4b25      	ldr	r3, [pc, #148]	@ (800338c <main+0x8cc>)
 80032f6:	edd3 7a00 	vldr	s15, [r3]
 80032fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032fe:	4b23      	ldr	r3, [pc, #140]	@ (800338c <main+0x8cc>)
 8003300:	edd3 6a02 	vldr	s13, [r3, #8]
 8003304:	4b21      	ldr	r3, [pc, #132]	@ (800338c <main+0x8cc>)
 8003306:	edd3 7a02 	vldr	s15, [r3, #8]
 800330a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800330e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003312:	ee17 0a90 	vmov	r0, s15
 8003316:	f7fd f8db 	bl	80004d0 <__aeabi_f2d>
 800331a:	a30d      	add	r3, pc, #52	@ (adr r3, 8003350 <main+0x890>)
 800331c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003320:	f7fc ff78 	bl	8000214 <__adddf3>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4610      	mov	r0, r2
 800332a:	4619      	mov	r1, r3
 800332c:	f7fd fbd8 	bl	8000ae0 <__aeabi_d2f>
 8003330:	4603      	mov	r3, r0
 8003332:	ee00 3a10 	vmov	s0, r3
 8003336:	f005 fefb 	bl	8009130 <sqrtf>
 800333a:	eef0 7a40 	vmov.f32	s15, s0
 800333e:	e033      	b.n	80033a8 <main+0x8e8>
 8003340:	c0000000 	.word	0xc0000000
 8003344:	3fdccccc 	.word	0x3fdccccc
 8003348:	33333333 	.word	0x33333333
 800334c:	3feb3333 	.word	0x3feb3333
 8003350:	d9d7bdbb 	.word	0xd9d7bdbb
 8003354:	3ddb7cdf 	.word	0x3ddb7cdf
 8003358:	2000035c 	.word	0x2000035c
 800335c:	20000368 	.word	0x20000368
 8003360:	20000320 	.word	0x20000320
 8003364:	3f0ccccd 	.word	0x3f0ccccd
 8003368:	20000360 	.word	0x20000360
 800336c:	20000324 	.word	0x20000324
 8003370:	20000364 	.word	0x20000364
 8003374:	20000344 	.word	0x20000344
 8003378:	20000350 	.word	0x20000350
 800337c:	20000348 	.word	0x20000348
 8003380:	20000354 	.word	0x20000354
 8003384:	2000034c 	.word	0x2000034c
 8003388:	20000358 	.word	0x20000358
 800338c:	20000334 	.word	0x20000334
 8003390:	20000310 	.word	0x20000310
 8003394:	3ee66666 	.word	0x3ee66666
 8003398:	40240000 	.word	0x40240000
 800339c:	20000314 	.word	0x20000314
 80033a0:	20000318 	.word	0x20000318
 80033a4:	43340000 	.word	0x43340000
 80033a8:	eef0 0a67 	vmov.f32	s1, s15
 80033ac:	eeb0 0a48 	vmov.f32	s0, s16
 80033b0:	f005 febc 	bl	800912c <atan2f>
 80033b4:	eef0 7a40 	vmov.f32	s15, s0
 80033b8:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 80033a4 <main+0x8e4>
 80033bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033c0:	ee17 0a90 	vmov	r0, s15
 80033c4:	f7fd f884 	bl	80004d0 <__aeabi_f2d>
 80033c8:	a3c1      	add	r3, pc, #772	@ (adr r3, 80036d0 <main+0xc10>)
 80033ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ce:	f7fd fa01 	bl	80007d4 <__aeabi_ddiv>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	4610      	mov	r0, r2
 80033d8:	4619      	mov	r1, r3
 80033da:	f7fd fb81 	bl	8000ae0 <__aeabi_d2f>
 80033de:	4603      	mov	r3, r0
 80033e0:	4abd      	ldr	r2, [pc, #756]	@ (80036d8 <main+0xc18>)
 80033e2:	6013      	str	r3, [r2, #0]
				  real_pitch = atan2f(-filtered_acc_LP[0], sqrtf(filtered_acc_LP[1] * filtered_acc_LP[1] + filtered_acc_LP[2] * filtered_acc_LP[2]+ 1e-10)) * 180.0f / 3.14;
 80033e4:	4bbd      	ldr	r3, [pc, #756]	@ (80036dc <main+0xc1c>)
 80033e6:	edd3 7a00 	vldr	s15, [r3]
 80033ea:	eeb1 8a67 	vneg.f32	s16, s15
 80033ee:	4bbb      	ldr	r3, [pc, #748]	@ (80036dc <main+0xc1c>)
 80033f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80033f4:	4bb9      	ldr	r3, [pc, #740]	@ (80036dc <main+0xc1c>)
 80033f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80033fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033fe:	4bb7      	ldr	r3, [pc, #732]	@ (80036dc <main+0xc1c>)
 8003400:	edd3 6a02 	vldr	s13, [r3, #8]
 8003404:	4bb5      	ldr	r3, [pc, #724]	@ (80036dc <main+0xc1c>)
 8003406:	edd3 7a02 	vldr	s15, [r3, #8]
 800340a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800340e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003412:	ee17 0a90 	vmov	r0, s15
 8003416:	f7fd f85b 	bl	80004d0 <__aeabi_f2d>
 800341a:	a3ab      	add	r3, pc, #684	@ (adr r3, 80036c8 <main+0xc08>)
 800341c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003420:	f7fc fef8 	bl	8000214 <__adddf3>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4610      	mov	r0, r2
 800342a:	4619      	mov	r1, r3
 800342c:	f7fd fb58 	bl	8000ae0 <__aeabi_d2f>
 8003430:	4603      	mov	r3, r0
 8003432:	ee00 3a10 	vmov	s0, r3
 8003436:	f005 fe7b 	bl	8009130 <sqrtf>
 800343a:	eef0 7a40 	vmov.f32	s15, s0
 800343e:	eef0 0a67 	vmov.f32	s1, s15
 8003442:	eeb0 0a48 	vmov.f32	s0, s16
 8003446:	f005 fe71 	bl	800912c <atan2f>
 800344a:	eef0 7a40 	vmov.f32	s15, s0
 800344e:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 80036e0 <main+0xc20>
 8003452:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003456:	ee17 0a90 	vmov	r0, s15
 800345a:	f7fd f839 	bl	80004d0 <__aeabi_f2d>
 800345e:	a39c      	add	r3, pc, #624	@ (adr r3, 80036d0 <main+0xc10>)
 8003460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003464:	f7fd f9b6 	bl	80007d4 <__aeabi_ddiv>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4610      	mov	r0, r2
 800346e:	4619      	mov	r1, r3
 8003470:	f7fd fb36 	bl	8000ae0 <__aeabi_d2f>
 8003474:	4603      	mov	r3, r0
 8003476:	4a9b      	ldr	r2, [pc, #620]	@ (80036e4 <main+0xc24>)
 8003478:	6013      	str	r3, [r2, #0]

				  uint32_t current_time = HAL_GetTick(); // current time
 800347a:	f001 f931 	bl	80046e0 <HAL_GetTick>
 800347e:	6078      	str	r0, [r7, #4]
				  float dt = (current_time - prev_time1) / 1000.0f;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	ee07 3a90 	vmov	s15, r3
 8003486:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800348a:	4b97      	ldr	r3, [pc, #604]	@ (80036e8 <main+0xc28>)
 800348c:	edd3 7a00 	vldr	s15, [r3]
 8003490:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003494:	eddf 6a95 	vldr	s13, [pc, #596]	@ 80036ec <main+0xc2c>
 8003498:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800349c:	edc7 7a00 	vstr	s15, [r7]

				  real_roll = ALPHA * (real_roll + filtered_gyro_HP_X * dt) + (1 - ALPHA) * real_roll;
 80034a0:	4b93      	ldr	r3, [pc, #588]	@ (80036f0 <main+0xc30>)
 80034a2:	ed93 7a00 	vldr	s14, [r3]
 80034a6:	edd7 7a00 	vldr	s15, [r7]
 80034aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034ae:	4b8a      	ldr	r3, [pc, #552]	@ (80036d8 <main+0xc18>)
 80034b0:	edd3 7a00 	vldr	s15, [r3]
 80034b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034b8:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 80036f4 <main+0xc34>
 80034bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034c0:	4b85      	ldr	r3, [pc, #532]	@ (80036d8 <main+0xc18>)
 80034c2:	edd3 7a00 	vldr	s15, [r3]
 80034c6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80036f8 <main+0xc38>
 80034ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d2:	4b81      	ldr	r3, [pc, #516]	@ (80036d8 <main+0xc18>)
 80034d4:	edc3 7a00 	vstr	s15, [r3]
				  real_pitch = ALPHA * (real_pitch + filtered_gyro_HP_Y * dt) + (1 - ALPHA) * real_pitch;
 80034d8:	4b88      	ldr	r3, [pc, #544]	@ (80036fc <main+0xc3c>)
 80034da:	ed93 7a00 	vldr	s14, [r3]
 80034de:	edd7 7a00 	vldr	s15, [r7]
 80034e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034e6:	4b7f      	ldr	r3, [pc, #508]	@ (80036e4 <main+0xc24>)
 80034e8:	edd3 7a00 	vldr	s15, [r3]
 80034ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80036f4 <main+0xc34>
 80034f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034f8:	4b7a      	ldr	r3, [pc, #488]	@ (80036e4 <main+0xc24>)
 80034fa:	edd3 7a00 	vldr	s15, [r3]
 80034fe:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80036f8 <main+0xc38>
 8003502:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800350a:	4b76      	ldr	r3, [pc, #472]	@ (80036e4 <main+0xc24>)
 800350c:	edc3 7a00 	vstr	s15, [r3]

				  prev_time1 = current_time;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	ee07 3a90 	vmov	s15, r3
 8003516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800351a:	4b73      	ldr	r3, [pc, #460]	@ (80036e8 <main+0xc28>)
 800351c:	edc3 7a00 	vstr	s15, [r3]
				  gravity_normal_angle = sqrtf(real_roll * real_roll + real_pitch * real_pitch);
 8003520:	4b6d      	ldr	r3, [pc, #436]	@ (80036d8 <main+0xc18>)
 8003522:	ed93 7a00 	vldr	s14, [r3]
 8003526:	4b6c      	ldr	r3, [pc, #432]	@ (80036d8 <main+0xc18>)
 8003528:	edd3 7a00 	vldr	s15, [r3]
 800352c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003530:	4b6c      	ldr	r3, [pc, #432]	@ (80036e4 <main+0xc24>)
 8003532:	edd3 6a00 	vldr	s13, [r3]
 8003536:	4b6b      	ldr	r3, [pc, #428]	@ (80036e4 <main+0xc24>)
 8003538:	edd3 7a00 	vldr	s15, [r3]
 800353c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003544:	eeb0 0a67 	vmov.f32	s0, s15
 8003548:	f005 fdf2 	bl	8009130 <sqrtf>
 800354c:	eef0 7a40 	vmov.f32	s15, s0
 8003550:	4b6b      	ldr	r3, [pc, #428]	@ (8003700 <main+0xc40>)
 8003552:	edc3 7a00 	vstr	s15, [r3]

				  toplam_roll = 0;
 8003556:	4b6b      	ldr	r3, [pc, #428]	@ (8003704 <main+0xc44>)
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
				  toplam_pitch = 0;
 800355e:	4b6a      	ldr	r3, [pc, #424]	@ (8003708 <main+0xc48>)
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
				  toplam_accX = 0;
 8003566:	4b69      	ldr	r3, [pc, #420]	@ (800370c <main+0xc4c>)
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	601a      	str	r2, [r3, #0]
				  toplam_accY = 0;
 800356e:	4b68      	ldr	r3, [pc, #416]	@ (8003710 <main+0xc50>)
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
				  toplam_accZ = 0;
 8003576:	4b67      	ldr	r3, [pc, #412]	@ (8003714 <main+0xc54>)
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
				  toplam_gX = 0;
 800357e:	4b66      	ldr	r3, [pc, #408]	@ (8003718 <main+0xc58>)
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
				  toplam_gY = 0;
 8003586:	4b65      	ldr	r3, [pc, #404]	@ (800371c <main+0xc5c>)
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
				  toplam_gZ = 0;
 800358e:	4b64      	ldr	r3, [pc, #400]	@ (8003720 <main+0xc60>)
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
				  sensor_counter = 0;
 8003596:	4b63      	ldr	r3, [pc, #396]	@ (8003724 <main+0xc64>)
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]
				  new_data=1;
 800359c:	4b62      	ldr	r3, [pc, #392]	@ (8003728 <main+0xc68>)
 800359e:	2201      	movs	r2, #1
 80035a0:	601a      	str	r2, [r3, #0]
		      }


		 fitil_kontrol= HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 80035a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80035a6:	4861      	ldr	r0, [pc, #388]	@ (800372c <main+0xc6c>)
 80035a8:	f001 fc02 	bl	8004db0 <HAL_GPIO_ReadPin>
 80035ac:	4603      	mov	r3, r0
 80035ae:	461a      	mov	r2, r3
 80035b0:	4b5f      	ldr	r3, [pc, #380]	@ (8003730 <main+0xc70>)
 80035b2:	701a      	strb	r2, [r3, #0]


		 manyetik_switch= HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80035b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80035b8:	485e      	ldr	r0, [pc, #376]	@ (8003734 <main+0xc74>)
 80035ba:	f001 fbf9 	bl	8004db0 <HAL_GPIO_ReadPin>
 80035be:	4603      	mov	r3, r0
 80035c0:	461a      	mov	r2, r3
 80035c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003738 <main+0xc78>)
 80035c4:	701a      	strb	r2, [r3, #0]
		 BUTTON_STATE=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 80035c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80035ca:	485a      	ldr	r0, [pc, #360]	@ (8003734 <main+0xc74>)
 80035cc:	f001 fbf0 	bl	8004db0 <HAL_GPIO_ReadPin>
 80035d0:	4603      	mov	r3, r0
 80035d2:	461a      	mov	r2, r3
 80035d4:	4b59      	ldr	r3, [pc, #356]	@ (800373c <main+0xc7c>)
 80035d6:	701a      	strb	r2, [r3, #0]



/************ MEGÜ durum sorgusu **************************************************/

	if( (compare_arrays(EGU_RX_BUFFER, EGU_durum_sorgusu, EGU_RX_BUFFER_SIZE)) )
 80035d8:	2205      	movs	r2, #5
 80035da:	4959      	ldr	r1, [pc, #356]	@ (8003740 <main+0xc80>)
 80035dc:	4859      	ldr	r0, [pc, #356]	@ (8003744 <main+0xc84>)
 80035de:	f000 fd21 	bl	8004024 <compare_arrays>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d017      	beq.n	8003618 <main+0xb58>
	{
		HAL_UART_Transmit(&huart6, EGU_TX_BUFFER, EGU_TX_BUFFER_SIZE, 1000);
 80035e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035ec:	2222      	movs	r2, #34	@ 0x22
 80035ee:	4956      	ldr	r1, [pc, #344]	@ (8003748 <main+0xc88>)
 80035f0:	4856      	ldr	r0, [pc, #344]	@ (800374c <main+0xc8c>)
 80035f2:	f004 fae0 	bl	8007bb6 <HAL_UART_Transmit>

		for(uint8_t i=0;i<5;i++)
 80035f6:	2300      	movs	r3, #0
 80035f8:	72fb      	strb	r3, [r7, #11]
 80035fa:	e009      	b.n	8003610 <main+0xb50>
		{
		EGU_RX_BUFFER[i++]=0;
 80035fc:	7afb      	ldrb	r3, [r7, #11]
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	72fa      	strb	r2, [r7, #11]
 8003602:	461a      	mov	r2, r3
 8003604:	4b4f      	ldr	r3, [pc, #316]	@ (8003744 <main+0xc84>)
 8003606:	2100      	movs	r1, #0
 8003608:	5499      	strb	r1, [r3, r2]
		for(uint8_t i=0;i<5;i++)
 800360a:	7afb      	ldrb	r3, [r7, #11]
 800360c:	3301      	adds	r3, #1
 800360e:	72fb      	strb	r3, [r7, #11]
 8003610:	7afb      	ldrb	r3, [r7, #11]
 8003612:	2b04      	cmp	r3, #4
 8003614:	d9f2      	bls.n	80035fc <main+0xb3c>
 8003616:	e01a      	b.n	800364e <main+0xb8e>
		}
	}
	else if ((compare_arrays(EGU_RX_BUFFER, EGU_motor_atesleme, EGU_RX_BUFFER_SIZE)))
 8003618:	2205      	movs	r2, #5
 800361a:	494d      	ldr	r1, [pc, #308]	@ (8003750 <main+0xc90>)
 800361c:	4849      	ldr	r0, [pc, #292]	@ (8003744 <main+0xc84>)
 800361e:	f000 fd01 	bl	8004024 <compare_arrays>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d012      	beq.n	800364e <main+0xb8e>
	{

		motor_ates=1;
 8003628:	4b4a      	ldr	r3, [pc, #296]	@ (8003754 <main+0xc94>)
 800362a:	2201      	movs	r2, #1
 800362c:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0;i<5;i++)
 800362e:	2300      	movs	r3, #0
 8003630:	72bb      	strb	r3, [r7, #10]
 8003632:	e009      	b.n	8003648 <main+0xb88>
			{
			EGU_RX_BUFFER[i++]=0;
 8003634:	7abb      	ldrb	r3, [r7, #10]
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	72ba      	strb	r2, [r7, #10]
 800363a:	461a      	mov	r2, r3
 800363c:	4b41      	ldr	r3, [pc, #260]	@ (8003744 <main+0xc84>)
 800363e:	2100      	movs	r1, #0
 8003640:	5499      	strb	r1, [r3, r2]
			for(uint8_t i=0;i<5;i++)
 8003642:	7abb      	ldrb	r3, [r7, #10]
 8003644:	3301      	adds	r3, #1
 8003646:	72bb      	strb	r3, [r7, #10]
 8003648:	7abb      	ldrb	r3, [r7, #10]
 800364a:	2b04      	cmp	r3, #4
 800364c:	d9f2      	bls.n	8003634 <main+0xb74>
/***********************************END*************************************************/
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

			switch(MEGU){
 800364e:	4b42      	ldr	r3, [pc, #264]	@ (8003758 <main+0xc98>)
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	2b03      	cmp	r3, #3
 8003654:	f200 80ec 	bhi.w	8003830 <main+0xd70>
 8003658:	a201      	add	r2, pc, #4	@ (adr r2, 8003660 <main+0xba0>)
 800365a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365e:	bf00      	nop
 8003660:	08003671 	.word	0x08003671
 8003664:	08003771 	.word	0x08003771
 8003668:	080037b9 	.word	0x080037b9
 800366c:	080037ed 	.word	0x080037ed
		case RAMPA:
						MEGU_mod=1;
 8003670:	4b3a      	ldr	r3, [pc, #232]	@ (800375c <main+0xc9c>)
 8003672:	2201      	movs	r2, #1
 8003674:	701a      	strb	r2, [r3, #0]
					  //RAMPA MODU ROKET RAMPADA EGÜ SWİTCHLERİ VE ALT KADEME HABERLE�?ME KONTROL ET

						if(-Lsm_Sensor.Accel_X > 10 && altitude_rampa_control ==1 && new_data==1)
 8003676:	4b3a      	ldr	r3, [pc, #232]	@ (8003760 <main+0xca0>)
 8003678:	edd3 7a00 	vldr	s15, [r3]
 800367c:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8003680:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003688:	d50f      	bpl.n	80036aa <main+0xbea>
 800368a:	4b36      	ldr	r3, [pc, #216]	@ (8003764 <main+0xca4>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d10b      	bne.n	80036aa <main+0xbea>
 8003692:	4b25      	ldr	r3, [pc, #148]	@ (8003728 <main+0xc68>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d107      	bne.n	80036aa <main+0xbea>
						  {
							kontrol_counter++;
 800369a:	4b33      	ldr	r3, [pc, #204]	@ (8003768 <main+0xca8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	3301      	adds	r3, #1
 80036a0:	4a31      	ldr	r2, [pc, #196]	@ (8003768 <main+0xca8>)
 80036a2:	6013      	str	r3, [r2, #0]
							new_data=0;
 80036a4:	4b20      	ldr	r3, [pc, #128]	@ (8003728 <main+0xc68>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
						  }

						if(kontrol_counter >=10)
 80036aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003768 <main+0xca8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b09      	cmp	r3, #9
 80036b0:	f340 80b7 	ble.w	8003822 <main+0xd62>
						{
							rampa_control=1;
 80036b4:	4b2d      	ldr	r3, [pc, #180]	@ (800376c <main+0xcac>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	701a      	strb	r2, [r3, #0]
							MEGU=UCUS_BASLADI;
 80036ba:	4b27      	ldr	r3, [pc, #156]	@ (8003758 <main+0xc98>)
 80036bc:	2201      	movs	r2, #1
 80036be:	701a      	strb	r2, [r3, #0]
							kontrol_counter =0;
 80036c0:	4b29      	ldr	r3, [pc, #164]	@ (8003768 <main+0xca8>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]
						}

			  break;
 80036c6:	e0ac      	b.n	8003822 <main+0xd62>
 80036c8:	d9d7bdbb 	.word	0xd9d7bdbb
 80036cc:	3ddb7cdf 	.word	0x3ddb7cdf
 80036d0:	51eb851f 	.word	0x51eb851f
 80036d4:	40091eb8 	.word	0x40091eb8
 80036d8:	20000304 	.word	0x20000304
 80036dc:	20000334 	.word	0x20000334
 80036e0:	43340000 	.word	0x43340000
 80036e4:	20000300 	.word	0x20000300
 80036e8:	200002ec 	.word	0x200002ec
 80036ec:	447a0000 	.word	0x447a0000
 80036f0:	20000350 	.word	0x20000350
 80036f4:	3f7ae148 	.word	0x3f7ae148
 80036f8:	3ca3d700 	.word	0x3ca3d700
 80036fc:	20000354 	.word	0x20000354
 8003700:	20000340 	.word	0x20000340
 8003704:	2000030c 	.word	0x2000030c
 8003708:	20000308 	.word	0x20000308
 800370c:	20000310 	.word	0x20000310
 8003710:	20000314 	.word	0x20000314
 8003714:	20000318 	.word	0x20000318
 8003718:	2000031c 	.word	0x2000031c
 800371c:	20000320 	.word	0x20000320
 8003720:	20000324 	.word	0x20000324
 8003724:	20000380 	.word	0x20000380
 8003728:	200002e8 	.word	0x200002e8
 800372c:	40020400 	.word	0x40020400
 8003730:	200002b4 	.word	0x200002b4
 8003734:	40020800 	.word	0x40020800
 8003738:	20000011 	.word	0x20000011
 800373c:	200002ae 	.word	0x200002ae
 8003740:	20000004 	.word	0x20000004
 8003744:	20000268 	.word	0x20000268
 8003748:	20000270 	.word	0x20000270
 800374c:	20000198 	.word	0x20000198
 8003750:	2000000c 	.word	0x2000000c
 8003754:	200002b5 	.word	0x200002b5
 8003758:	200003ac 	.word	0x200003ac
 800375c:	200002ad 	.word	0x200002ad
 8003760:	20000384 	.word	0x20000384
 8003764:	200002f0 	.word	0x200002f0
 8003768:	20000374 	.word	0x20000374
 800376c:	200002b7 	.word	0x200002b7

		case UCUS_BASLADI:
						MEGU_mod=2;
 8003770:	4b52      	ldr	r3, [pc, #328]	@ (80038bc <main+0xdfc>)
 8003772:	2202      	movs	r2, #2
 8003774:	701a      	strb	r2, [r3, #0]
						if(altitude_kalman>350 && new_data==1)
 8003776:	4b52      	ldr	r3, [pc, #328]	@ (80038c0 <main+0xe00>)
 8003778:	edd3 7a00 	vldr	s15, [r3]
 800377c:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80038c4 <main+0xe04>
 8003780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003788:	dd0b      	ble.n	80037a2 <main+0xce2>
 800378a:	4b4f      	ldr	r3, [pc, #316]	@ (80038c8 <main+0xe08>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d107      	bne.n	80037a2 <main+0xce2>
						{
							kontrol_counter++;
 8003792:	4b4e      	ldr	r3, [pc, #312]	@ (80038cc <main+0xe0c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	3301      	adds	r3, #1
 8003798:	4a4c      	ldr	r2, [pc, #304]	@ (80038cc <main+0xe0c>)
 800379a:	6013      	str	r3, [r2, #0]
							new_data=0;
 800379c:	4b4a      	ldr	r3, [pc, #296]	@ (80038c8 <main+0xe08>)
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
						}

						if(kontrol_counter >=10)
 80037a2:	4b4a      	ldr	r3, [pc, #296]	@ (80038cc <main+0xe0c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b09      	cmp	r3, #9
 80037a8:	dd3d      	ble.n	8003826 <main+0xd66>
						{
							MEGU=KADEME_AYRILDIMI;
 80037aa:	4b49      	ldr	r3, [pc, #292]	@ (80038d0 <main+0xe10>)
 80037ac:	2202      	movs	r2, #2
 80037ae:	701a      	strb	r2, [r3, #0]
							kontrol_counter =0;
 80037b0:	4b46      	ldr	r3, [pc, #280]	@ (80038cc <main+0xe0c>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]
						}
			 break;
 80037b6:	e036      	b.n	8003826 <main+0xd66>

		case KADEME_AYRILDIMI:
						MEGU_mod=3;
 80037b8:	4b40      	ldr	r3, [pc, #256]	@ (80038bc <main+0xdfc>)
 80037ba:	2203      	movs	r2, #3
 80037bc:	701a      	strb	r2, [r3, #0]

						if(manyetik_switch==1)
 80037be:	4b45      	ldr	r3, [pc, #276]	@ (80038d4 <main+0xe14>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d107      	bne.n	80037d6 <main+0xd16>
						{
							kontrol_counter++;
 80037c6:	4b41      	ldr	r3, [pc, #260]	@ (80038cc <main+0xe0c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	3301      	adds	r3, #1
 80037cc:	4a3f      	ldr	r2, [pc, #252]	@ (80038cc <main+0xe0c>)
 80037ce:	6013      	str	r3, [r2, #0]
							new_data=0;
 80037d0:	4b3d      	ldr	r3, [pc, #244]	@ (80038c8 <main+0xe08>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
						}

						if(kontrol_counter >=30)
 80037d6:	4b3d      	ldr	r3, [pc, #244]	@ (80038cc <main+0xe0c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b1d      	cmp	r3, #29
 80037dc:	dd25      	ble.n	800382a <main+0xd6a>
						{

							MEGU=AYRILDI;
 80037de:	4b3c      	ldr	r3, [pc, #240]	@ (80038d0 <main+0xe10>)
 80037e0:	2203      	movs	r2, #3
 80037e2:	701a      	strb	r2, [r3, #0]
							kontrol_counter =0;
 80037e4:	4b39      	ldr	r3, [pc, #228]	@ (80038cc <main+0xe0c>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
						}

			 break;
 80037ea:	e01e      	b.n	800382a <main+0xd6a>

		case AYRILDI:
						MEGU_mod=4;
 80037ec:	4b33      	ldr	r3, [pc, #204]	@ (80038bc <main+0xdfc>)
 80037ee:	2204      	movs	r2, #4
 80037f0:	701a      	strb	r2, [r3, #0]
						if( motor_ates==1 ) // pozisyon kontrolü
 80037f2:	4b39      	ldr	r3, [pc, #228]	@ (80038d8 <main+0xe18>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d119      	bne.n	800382e <main+0xd6e>
						{

							if(set1-set_timer==10)
 80037fa:	4b38      	ldr	r3, [pc, #224]	@ (80038dc <main+0xe1c>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	4b38      	ldr	r3, [pc, #224]	@ (80038e0 <main+0xe20>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b0a      	cmp	r3, #10
 8003806:	d112      	bne.n	800382e <main+0xd6e>
							{
							HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8003808:	2110      	movs	r1, #16
 800380a:	4836      	ldr	r0, [pc, #216]	@ (80038e4 <main+0xe24>)
 800380c:	f001 fb01 	bl	8004e12 <HAL_GPIO_TogglePin>
							HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8003810:	2110      	movs	r1, #16
 8003812:	4835      	ldr	r0, [pc, #212]	@ (80038e8 <main+0xe28>)
 8003814:	f001 fafd 	bl	8004e12 <HAL_GPIO_TogglePin>

							set1=set_timer;
 8003818:	4b31      	ldr	r3, [pc, #196]	@ (80038e0 <main+0xe20>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a2f      	ldr	r2, [pc, #188]	@ (80038dc <main+0xe1c>)
 800381e:	6013      	str	r3, [r2, #0]
							}
						}

			 break;
 8003820:	e005      	b.n	800382e <main+0xd6e>
			  break;
 8003822:	bf00      	nop
 8003824:	e004      	b.n	8003830 <main+0xd70>
			 break;
 8003826:	bf00      	nop
 8003828:	e002      	b.n	8003830 <main+0xd70>
			 break;
 800382a:	bf00      	nop
 800382c:	e000      	b.n	8003830 <main+0xd70>
			 break;
 800382e:	bf00      	nop

		}

/************************************************************************************/
		  if(altitude >250 && MEGU <3)
 8003830:	4b2e      	ldr	r3, [pc, #184]	@ (80038ec <main+0xe2c>)
 8003832:	edd3 7a00 	vldr	s15, [r3]
 8003836:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80038f0 <main+0xe30>
 800383a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800383e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003842:	dd06      	ble.n	8003852 <main+0xd92>
 8003844:	4b22      	ldr	r3, [pc, #136]	@ (80038d0 <main+0xe10>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b02      	cmp	r3, #2
 800384a:	d802      	bhi.n	8003852 <main+0xd92>
		  {
			  altitude_rampa_control =1;
 800384c:	4b29      	ldr	r3, [pc, #164]	@ (80038f4 <main+0xe34>)
 800384e:	2201      	movs	r2, #1
 8003850:	701a      	strb	r2, [r3, #0]
		  }
/*************************************************************************************/
		  if(altitude>altitude_max) altitude_max = altitude_kalman;
 8003852:	4b26      	ldr	r3, [pc, #152]	@ (80038ec <main+0xe2c>)
 8003854:	ed93 7a00 	vldr	s14, [r3]
 8003858:	4b27      	ldr	r3, [pc, #156]	@ (80038f8 <main+0xe38>)
 800385a:	edd3 7a00 	vldr	s15, [r3]
 800385e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003866:	dd03      	ble.n	8003870 <main+0xdb0>
 8003868:	4b15      	ldr	r3, [pc, #84]	@ (80038c0 <main+0xe00>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a22      	ldr	r2, [pc, #136]	@ (80038f8 <main+0xe38>)
 800386e:	6013      	str	r3, [r2, #0]

		  if(speed>speed_max) speed_max = speed;
 8003870:	4b22      	ldr	r3, [pc, #136]	@ (80038fc <main+0xe3c>)
 8003872:	ed93 7a00 	vldr	s14, [r3]
 8003876:	4b22      	ldr	r3, [pc, #136]	@ (8003900 <main+0xe40>)
 8003878:	edd3 7a00 	vldr	s15, [r3]
 800387c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003884:	dd03      	ble.n	800388e <main+0xdce>
 8003886:	4b1d      	ldr	r3, [pc, #116]	@ (80038fc <main+0xe3c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a1d      	ldr	r2, [pc, #116]	@ (8003900 <main+0xe40>)
 800388c:	6013      	str	r3, [r2, #0]

		  if( -Lsm_Sensor.Accel_X> x_max) x_max =  -Lsm_Sensor.Accel_X;
 800388e:	4b1d      	ldr	r3, [pc, #116]	@ (8003904 <main+0xe44>)
 8003890:	edd3 7a00 	vldr	s15, [r3]
 8003894:	eeb1 7a67 	vneg.f32	s14, s15
 8003898:	4b1b      	ldr	r3, [pc, #108]	@ (8003908 <main+0xe48>)
 800389a:	edd3 7a00 	vldr	s15, [r3]
 800389e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a6:	dd07      	ble.n	80038b8 <main+0xdf8>
 80038a8:	4b16      	ldr	r3, [pc, #88]	@ (8003904 <main+0xe44>)
 80038aa:	edd3 7a00 	vldr	s15, [r3]
 80038ae:	eef1 7a67 	vneg.f32	s15, s15
 80038b2:	4b15      	ldr	r3, [pc, #84]	@ (8003908 <main+0xe48>)
 80038b4:	edc3 7a00 	vstr	s15, [r3]
	  MEGU_TX_BUF_FILL();
 80038b8:	f7ff ba37 	b.w	8002d2a <main+0x26a>
 80038bc:	200002ad 	.word	0x200002ad
 80038c0:	200003a8 	.word	0x200003a8
 80038c4:	43af0000 	.word	0x43af0000
 80038c8:	200002e8 	.word	0x200002e8
 80038cc:	20000374 	.word	0x20000374
 80038d0:	200003ac 	.word	0x200003ac
 80038d4:	20000011 	.word	0x20000011
 80038d8:	200002b5 	.word	0x200002b5
 80038dc:	200002c0 	.word	0x200002c0
 80038e0:	200002bc 	.word	0x200002bc
 80038e4:	40020800 	.word	0x40020800
 80038e8:	40020400 	.word	0x40020400
 80038ec:	200002cc 	.word	0x200002cc
 80038f0:	437a0000 	.word	0x437a0000
 80038f4:	200002f0 	.word	0x200002f0
 80038f8:	200002fc 	.word	0x200002fc
 80038fc:	200002e4 	.word	0x200002e4
 8003900:	200002f4 	.word	0x200002f4
 8003904:	20000384 	.word	0x20000384
 8003908:	200002f8 	.word	0x200002f8

0800390c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b094      	sub	sp, #80	@ 0x50
 8003910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003912:	f107 031c 	add.w	r3, r7, #28
 8003916:	2234      	movs	r2, #52	@ 0x34
 8003918:	2100      	movs	r1, #0
 800391a:	4618      	mov	r0, r3
 800391c:	f005 fafa 	bl	8008f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003920:	f107 0308 	add.w	r3, r7, #8
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	605a      	str	r2, [r3, #4]
 800392a:	609a      	str	r2, [r3, #8]
 800392c:	60da      	str	r2, [r3, #12]
 800392e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003930:	2300      	movs	r3, #0
 8003932:	607b      	str	r3, [r7, #4]
 8003934:	4b29      	ldr	r3, [pc, #164]	@ (80039dc <SystemClock_Config+0xd0>)
 8003936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003938:	4a28      	ldr	r2, [pc, #160]	@ (80039dc <SystemClock_Config+0xd0>)
 800393a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800393e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003940:	4b26      	ldr	r3, [pc, #152]	@ (80039dc <SystemClock_Config+0xd0>)
 8003942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003944:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003948:	607b      	str	r3, [r7, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800394c:	2300      	movs	r3, #0
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	4b23      	ldr	r3, [pc, #140]	@ (80039e0 <SystemClock_Config+0xd4>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a22      	ldr	r2, [pc, #136]	@ (80039e0 <SystemClock_Config+0xd4>)
 8003956:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	4b20      	ldr	r3, [pc, #128]	@ (80039e0 <SystemClock_Config+0xd4>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003964:	603b      	str	r3, [r7, #0]
 8003966:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003968:	2301      	movs	r3, #1
 800396a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800396c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003970:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003972:	2302      	movs	r3, #2
 8003974:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003976:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800397a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800397c:	2304      	movs	r3, #4
 800397e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003980:	23a8      	movs	r3, #168	@ 0xa8
 8003982:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003984:	2302      	movs	r3, #2
 8003986:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003988:	2307      	movs	r3, #7
 800398a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800398c:	2302      	movs	r3, #2
 800398e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003990:	f107 031c 	add.w	r3, r7, #28
 8003994:	4618      	mov	r0, r3
 8003996:	f003 fb03 	bl	8006fa0 <HAL_RCC_OscConfig>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80039a0:	f000 fc6c 	bl	800427c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039a4:	230f      	movs	r3, #15
 80039a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80039a8:	2303      	movs	r3, #3
 80039aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039ac:	2300      	movs	r3, #0
 80039ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80039b0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80039b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80039b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80039bc:	f107 0308 	add.w	r3, r7, #8
 80039c0:	2105      	movs	r1, #5
 80039c2:	4618      	mov	r0, r3
 80039c4:	f002 ffa2 	bl	800690c <HAL_RCC_ClockConfig>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80039ce:	f000 fc55 	bl	800427c <Error_Handler>
  }
}
 80039d2:	bf00      	nop
 80039d4:	3750      	adds	r7, #80	@ 0x50
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40023800 	.word	0x40023800
 80039e0:	40007000 	.word	0x40007000

080039e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80039e8:	4b12      	ldr	r3, [pc, #72]	@ (8003a34 <MX_I2C1_Init+0x50>)
 80039ea:	4a13      	ldr	r2, [pc, #76]	@ (8003a38 <MX_I2C1_Init+0x54>)
 80039ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80039ee:	4b11      	ldr	r3, [pc, #68]	@ (8003a34 <MX_I2C1_Init+0x50>)
 80039f0:	4a12      	ldr	r2, [pc, #72]	@ (8003a3c <MX_I2C1_Init+0x58>)
 80039f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003a34 <MX_I2C1_Init+0x50>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80039fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003a34 <MX_I2C1_Init+0x50>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a00:	4b0c      	ldr	r3, [pc, #48]	@ (8003a34 <MX_I2C1_Init+0x50>)
 8003a02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003a06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a08:	4b0a      	ldr	r3, [pc, #40]	@ (8003a34 <MX_I2C1_Init+0x50>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003a0e:	4b09      	ldr	r3, [pc, #36]	@ (8003a34 <MX_I2C1_Init+0x50>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a14:	4b07      	ldr	r3, [pc, #28]	@ (8003a34 <MX_I2C1_Init+0x50>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a1a:	4b06      	ldr	r3, [pc, #24]	@ (8003a34 <MX_I2C1_Init+0x50>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a20:	4804      	ldr	r0, [pc, #16]	@ (8003a34 <MX_I2C1_Init+0x50>)
 8003a22:	f001 fa11 	bl	8004e48 <HAL_I2C_Init>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003a2c:	f000 fc26 	bl	800427c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003a30:	bf00      	nop
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	200000b4 	.word	0x200000b4
 8003a38:	40005400 	.word	0x40005400
 8003a3c:	00061a80 	.word	0x00061a80

08003a40 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a46:	463b      	mov	r3, r7
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003a4e:	4b15      	ldr	r3, [pc, #84]	@ (8003aa4 <MX_TIM6_Init+0x64>)
 8003a50:	4a15      	ldr	r2, [pc, #84]	@ (8003aa8 <MX_TIM6_Init+0x68>)
 8003a52:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 840;
 8003a54:	4b13      	ldr	r3, [pc, #76]	@ (8003aa4 <MX_TIM6_Init+0x64>)
 8003a56:	f44f 7252 	mov.w	r2, #840	@ 0x348
 8003a5a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a5c:	4b11      	ldr	r3, [pc, #68]	@ (8003aa4 <MX_TIM6_Init+0x64>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 8003a62:	4b10      	ldr	r3, [pc, #64]	@ (8003aa4 <MX_TIM6_Init+0x64>)
 8003a64:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003a68:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8003aa4 <MX_TIM6_Init+0x64>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003a70:	480c      	ldr	r0, [pc, #48]	@ (8003aa4 <MX_TIM6_Init+0x64>)
 8003a72:	f003 fd33 	bl	80074dc <HAL_TIM_Base_Init>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003a7c:	f000 fbfe 	bl	800427c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a80:	2300      	movs	r3, #0
 8003a82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a84:	2300      	movs	r3, #0
 8003a86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003a88:	463b      	mov	r3, r7
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	4805      	ldr	r0, [pc, #20]	@ (8003aa4 <MX_TIM6_Init+0x64>)
 8003a8e:	f003 ffb5 	bl	80079fc <HAL_TIMEx_MasterConfigSynchronization>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003a98:	f000 fbf0 	bl	800427c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	20000108 	.word	0x20000108
 8003aa8:	40001000 	.word	0x40001000

08003aac <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8003aec <MX_TIM10_Init+0x40>)
 8003ab2:	4a0f      	ldr	r2, [pc, #60]	@ (8003af0 <MX_TIM10_Init+0x44>)
 8003ab4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1680;
 8003ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8003aec <MX_TIM10_Init+0x40>)
 8003ab8:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8003abc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003abe:	4b0b      	ldr	r3, [pc, #44]	@ (8003aec <MX_TIM10_Init+0x40>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8003ac4:	4b09      	ldr	r3, [pc, #36]	@ (8003aec <MX_TIM10_Init+0x40>)
 8003ac6:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003aca:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003acc:	4b07      	ldr	r3, [pc, #28]	@ (8003aec <MX_TIM10_Init+0x40>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ad2:	4b06      	ldr	r3, [pc, #24]	@ (8003aec <MX_TIM10_Init+0x40>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003ad8:	4804      	ldr	r0, [pc, #16]	@ (8003aec <MX_TIM10_Init+0x40>)
 8003ada:	f003 fcff 	bl	80074dc <HAL_TIM_Base_Init>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8003ae4:	f000 fbca 	bl	800427c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003ae8:	bf00      	nop
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	20000150 	.word	0x20000150
 8003af0:	40014400 	.word	0x40014400

08003af4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003af8:	4b11      	ldr	r3, [pc, #68]	@ (8003b40 <MX_USART6_UART_Init+0x4c>)
 8003afa:	4a12      	ldr	r2, [pc, #72]	@ (8003b44 <MX_USART6_UART_Init+0x50>)
 8003afc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 19200;
 8003afe:	4b10      	ldr	r3, [pc, #64]	@ (8003b40 <MX_USART6_UART_Init+0x4c>)
 8003b00:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003b04:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003b06:	4b0e      	ldr	r3, [pc, #56]	@ (8003b40 <MX_USART6_UART_Init+0x4c>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b40 <MX_USART6_UART_Init+0x4c>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003b12:	4b0b      	ldr	r3, [pc, #44]	@ (8003b40 <MX_USART6_UART_Init+0x4c>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003b18:	4b09      	ldr	r3, [pc, #36]	@ (8003b40 <MX_USART6_UART_Init+0x4c>)
 8003b1a:	220c      	movs	r2, #12
 8003b1c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b1e:	4b08      	ldr	r3, [pc, #32]	@ (8003b40 <MX_USART6_UART_Init+0x4c>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b24:	4b06      	ldr	r3, [pc, #24]	@ (8003b40 <MX_USART6_UART_Init+0x4c>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003b2a:	4805      	ldr	r0, [pc, #20]	@ (8003b40 <MX_USART6_UART_Init+0x4c>)
 8003b2c:	f003 fff6 	bl	8007b1c <HAL_UART_Init>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003b36:	f000 fba1 	bl	800427c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003b3a:	bf00      	nop
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000198 	.word	0x20000198
 8003b44:	40011400 	.word	0x40011400

08003b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08a      	sub	sp, #40	@ 0x28
 8003b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b4e:	f107 0314 	add.w	r3, r7, #20
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	605a      	str	r2, [r3, #4]
 8003b58:	609a      	str	r2, [r3, #8]
 8003b5a:	60da      	str	r2, [r3, #12]
 8003b5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b5e:	2300      	movs	r3, #0
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	4b57      	ldr	r3, [pc, #348]	@ (8003cc0 <MX_GPIO_Init+0x178>)
 8003b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b66:	4a56      	ldr	r2, [pc, #344]	@ (8003cc0 <MX_GPIO_Init+0x178>)
 8003b68:	f043 0304 	orr.w	r3, r3, #4
 8003b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b6e:	4b54      	ldr	r3, [pc, #336]	@ (8003cc0 <MX_GPIO_Init+0x178>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	613b      	str	r3, [r7, #16]
 8003b78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	4b50      	ldr	r3, [pc, #320]	@ (8003cc0 <MX_GPIO_Init+0x178>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b82:	4a4f      	ldr	r2, [pc, #316]	@ (8003cc0 <MX_GPIO_Init+0x178>)
 8003b84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b8a:	4b4d      	ldr	r3, [pc, #308]	@ (8003cc0 <MX_GPIO_Init+0x178>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b96:	2300      	movs	r3, #0
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	4b49      	ldr	r3, [pc, #292]	@ (8003cc0 <MX_GPIO_Init+0x178>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9e:	4a48      	ldr	r2, [pc, #288]	@ (8003cc0 <MX_GPIO_Init+0x178>)
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ba6:	4b46      	ldr	r3, [pc, #280]	@ (8003cc0 <MX_GPIO_Init+0x178>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	60bb      	str	r3, [r7, #8]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	4b42      	ldr	r3, [pc, #264]	@ (8003cc0 <MX_GPIO_Init+0x178>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bba:	4a41      	ldr	r2, [pc, #260]	@ (8003cc0 <MX_GPIO_Init+0x178>)
 8003bbc:	f043 0302 	orr.w	r3, r3, #2
 8003bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bc2:	4b3f      	ldr	r3, [pc, #252]	@ (8003cc0 <MX_GPIO_Init+0x178>)
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	607b      	str	r3, [r7, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003bd4:	483b      	ldr	r0, [pc, #236]	@ (8003cc4 <MX_GPIO_Init+0x17c>)
 8003bd6:	f001 f903 	bl	8004de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|BUZZER_Pin|GATE_D_Pin|GATE_C_Pin, GPIO_PIN_RESET);
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f640 4112 	movw	r1, #3090	@ 0xc12
 8003be0:	4838      	ldr	r0, [pc, #224]	@ (8003cc4 <MX_GPIO_Init+0x17c>)
 8003be2:	f001 f8fd 	bl	8004de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|GATE_B_Pin|GATE_A_Pin, GPIO_PIN_RESET);
 8003be6:	2200      	movs	r2, #0
 8003be8:	f246 0118 	movw	r1, #24600	@ 0x6018
 8003bec:	4836      	ldr	r0, [pc, #216]	@ (8003cc8 <MX_GPIO_Init+0x180>)
 8003bee:	f001 f8f7 	bl	8004de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 CS_Pin BUZZER_Pin GATE_D_Pin
                           GATE_C_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|CS_Pin|BUZZER_Pin|GATE_D_Pin
 8003bf2:	f642 4312 	movw	r3, #11282	@ 0x2c12
 8003bf6:	617b      	str	r3, [r7, #20]
                          |GATE_C_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c00:	2300      	movs	r3, #0
 8003c02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c04:	f107 0314 	add.w	r3, r7, #20
 8003c08:	4619      	mov	r1, r3
 8003c0a:	482e      	ldr	r0, [pc, #184]	@ (8003cc4 <MX_GPIO_Init+0x17c>)
 8003c0c:	f000 ff3c 	bl	8004a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003c10:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c16:	2300      	movs	r3, #0
 8003c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c1e:	f107 0314 	add.w	r3, r7, #20
 8003c22:	4619      	mov	r1, r3
 8003c24:	4827      	ldr	r0, [pc, #156]	@ (8003cc4 <MX_GPIO_Init+0x17c>)
 8003c26:	f000 ff2f 	bl	8004a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003c2a:	2380      	movs	r3, #128	@ 0x80
 8003c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c2e:	2302      	movs	r3, #2
 8003c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c36:	2303      	movs	r3, #3
 8003c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c3a:	2305      	movs	r3, #5
 8003c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c3e:	f107 0314 	add.w	r3, r7, #20
 8003c42:	4619      	mov	r1, r3
 8003c44:	4821      	ldr	r0, [pc, #132]	@ (8003ccc <MX_GPIO_Init+0x184>)
 8003c46:	f000 ff1f 	bl	8004a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003c4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c50:	2300      	movs	r3, #0
 8003c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c54:	2301      	movs	r3, #1
 8003c56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c58:	f107 0314 	add.w	r3, r7, #20
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	481a      	ldr	r0, [pc, #104]	@ (8003cc8 <MX_GPIO_Init+0x180>)
 8003c60:	f000 ff12 	bl	8004a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin GATE_B_Pin GATE_A_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|GATE_B_Pin|GATE_A_Pin;
 8003c64:	f246 0318 	movw	r3, #24600	@ 0x6018
 8003c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c72:	2300      	movs	r3, #0
 8003c74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c76:	f107 0314 	add.w	r3, r7, #20
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4812      	ldr	r0, [pc, #72]	@ (8003cc8 <MX_GPIO_Init+0x180>)
 8003c7e:	f000 ff03 	bl	8004a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8003c82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003c90:	f107 0314 	add.w	r3, r7, #20
 8003c94:	4619      	mov	r1, r3
 8003c96:	480b      	ldr	r0, [pc, #44]	@ (8003cc4 <MX_GPIO_Init+0x17c>)
 8003c98:	f000 fef6 	bl	8004a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|INT2_Pin;
 8003c9c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ca2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cac:	f107 0314 	add.w	r3, r7, #20
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4805      	ldr	r0, [pc, #20]	@ (8003cc8 <MX_GPIO_Init+0x180>)
 8003cb4:	f000 fee8 	bl	8004a88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003cb8:	bf00      	nop
 8003cba:	3728      	adds	r7, #40	@ 0x28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	40020800 	.word	0x40020800
 8003cc8:	40020400 	.word	0x40020400
 8003ccc:	40020000 	.word	0x40020000

08003cd0 <BME_I2C_Testsensor>:

/* USER CODE BEGIN 4 */
int16_t BME_I2C_Testsensor(void){
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef status;

	status=HAL_I2C_IsDeviceReady(&hi2c1,0x76 <<1, 4, 100);
 8003cd6:	2364      	movs	r3, #100	@ 0x64
 8003cd8:	2204      	movs	r2, #4
 8003cda:	21ec      	movs	r1, #236	@ 0xec
 8003cdc:	4807      	ldr	r0, [pc, #28]	@ (8003cfc <BME_I2C_Testsensor+0x2c>)
 8003cde:	f002 f83b 	bl	8005d58 <HAL_I2C_IsDeviceReady>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	71fb      	strb	r3, [r7, #7]


	if(HAL_OK==status){
 8003ce6:	79fb      	ldrb	r3, [r7, #7]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <BME_I2C_Testsensor+0x20>

		return 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	e000      	b.n	8003cf2 <BME_I2C_Testsensor+0x22>
		}
	else {
		return 1;
 8003cf0:	2301      	movs	r3, #1
		}


}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	200000b4 	.word	0x200000b4

08003d00 <LSM_I2C_Testsensor>:
int16_t LSM_I2C_Testsensor(void){
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef status;

	status=HAL_I2C_IsDeviceReady(&hi2c1,0x6A <<1, 4, 100);
 8003d06:	2364      	movs	r3, #100	@ 0x64
 8003d08:	2204      	movs	r2, #4
 8003d0a:	21d4      	movs	r1, #212	@ 0xd4
 8003d0c:	4807      	ldr	r0, [pc, #28]	@ (8003d2c <LSM_I2C_Testsensor+0x2c>)
 8003d0e:	f002 f823 	bl	8005d58 <HAL_I2C_IsDeviceReady>
 8003d12:	4603      	mov	r3, r0
 8003d14:	71fb      	strb	r3, [r7, #7]


	if(HAL_OK==status){
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <LSM_I2C_Testsensor+0x20>

		return 0;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	e000      	b.n	8003d22 <LSM_I2C_Testsensor+0x22>
		}
	else {
		return 1;
 8003d20:	2301      	movs	r3, #1
		}


}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	200000b4 	.word	0x200000b4

08003d30 <BME280_Get_Altitude>:

float BME280_Get_Altitude(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
	float press = comp_data.pressure / 10000.0;
 8003d36:	4b2c      	ldr	r3, [pc, #176]	@ (8003de8 <BME280_Get_Altitude+0xb8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fc fba6 	bl	800048c <__aeabi_ui2d>
 8003d40:	a321      	add	r3, pc, #132	@ (adr r3, 8003dc8 <BME280_Get_Altitude+0x98>)
 8003d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d46:	f7fc fd45 	bl	80007d4 <__aeabi_ddiv>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4610      	mov	r0, r2
 8003d50:	4619      	mov	r1, r3
 8003d52:	f7fc fec5 	bl	8000ae0 <__aeabi_d2f>
 8003d56:	4603      	mov	r3, r0
 8003d58:	607b      	str	r3, [r7, #4]
//	float temp = comp_data.temperature / 100.0;
	alt = 44330 * (1 - pow((press / 1013.25),(1/5.255)));
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7fc fbb8 	bl	80004d0 <__aeabi_f2d>
 8003d60:	a31b      	add	r3, pc, #108	@ (adr r3, 8003dd0 <BME280_Get_Altitude+0xa0>)
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	f7fc fd35 	bl	80007d4 <__aeabi_ddiv>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	ec43 2b17 	vmov	d7, r2, r3
 8003d72:	ed9f 1b19 	vldr	d1, [pc, #100]	@ 8003dd8 <BME280_Get_Altitude+0xa8>
 8003d76:	eeb0 0a47 	vmov.f32	s0, s14
 8003d7a:	eef0 0a67 	vmov.f32	s1, s15
 8003d7e:	f005 f965 	bl	800904c <pow>
 8003d82:	ec53 2b10 	vmov	r2, r3, d0
 8003d86:	f04f 0000 	mov.w	r0, #0
 8003d8a:	4918      	ldr	r1, [pc, #96]	@ (8003dec <BME280_Get_Altitude+0xbc>)
 8003d8c:	f7fc fa40 	bl	8000210 <__aeabi_dsub>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4610      	mov	r0, r2
 8003d96:	4619      	mov	r1, r3
 8003d98:	a311      	add	r3, pc, #68	@ (adr r3, 8003de0 <BME280_Get_Altitude+0xb0>)
 8003d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9e:	f7fc fbef 	bl	8000580 <__aeabi_dmul>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4610      	mov	r0, r2
 8003da8:	4619      	mov	r1, r3
 8003daa:	f7fc fe99 	bl	8000ae0 <__aeabi_d2f>
 8003dae:	4603      	mov	r3, r0
 8003db0:	4a0f      	ldr	r2, [pc, #60]	@ (8003df0 <BME280_Get_Altitude+0xc0>)
 8003db2:	6013      	str	r3, [r2, #0]
	//alt = ((pow((P0/press), (1/5.257))-1) * (temp + 273.15)) / 0.0065;

	return (alt);
 8003db4:	4b0e      	ldr	r3, [pc, #56]	@ (8003df0 <BME280_Get_Altitude+0xc0>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	ee07 3a90 	vmov	s15, r3
}
 8003dbc:	eeb0 0a67 	vmov.f32	s0, s15
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	00000000 	.word	0x00000000
 8003dcc:	40c38800 	.word	0x40c38800
 8003dd0:	00000000 	.word	0x00000000
 8003dd4:	408faa00 	.word	0x408faa00
 8003dd8:	ccd9456c 	.word	0xccd9456c
 8003ddc:	3fc85b95 	.word	0x3fc85b95
 8003de0:	00000000 	.word	0x00000000
 8003de4:	40e5a540 	.word	0x40e5a540
 8003de8:	200003f0 	.word	0x200003f0
 8003dec:	3ff00000 	.word	0x3ff00000
 8003df0:	200002dc 	.word	0x200002dc

08003df4 <user_i2c_read>:
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af02      	add	r7, sp, #8
 8003dfa:	603a      	str	r2, [r7, #0]
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4603      	mov	r3, r0
 8003e00:	71fb      	strb	r3, [r7, #7]
 8003e02:	460b      	mov	r3, r1
 8003e04:	71bb      	strb	r3, [r7, #6]
 8003e06:	4613      	mov	r3, r2
 8003e08:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	b299      	uxth	r1, r3
 8003e12:	1dba      	adds	r2, r7, #6
 8003e14:	230a      	movs	r3, #10
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	2301      	movs	r3, #1
 8003e1a:	4811      	ldr	r0, [pc, #68]	@ (8003e60 <user_i2c_read+0x6c>)
 8003e1c:	f001 f958 	bl	80050d0 <HAL_I2C_Master_Transmit>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <user_i2c_read+0x38>
 8003e26:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2a:	e014      	b.n	8003e56 <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c1, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8003e2c:	79fb      	ldrb	r3, [r7, #7]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	b21b      	sxth	r3, r3
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	b21b      	sxth	r3, r3
 8003e38:	b299      	uxth	r1, r3
 8003e3a:	88bb      	ldrh	r3, [r7, #4]
 8003e3c:	220a      	movs	r2, #10
 8003e3e:	9200      	str	r2, [sp, #0]
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	4807      	ldr	r0, [pc, #28]	@ (8003e60 <user_i2c_read+0x6c>)
 8003e44:	f001 fa42 	bl	80052cc <HAL_I2C_Master_Receive>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <user_i2c_read+0x60>
 8003e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e52:	e000      	b.n	8003e56 <user_i2c_read+0x62>

  return 0;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	200000b4 	.word	0x200000b4

08003e64 <user_delay_ms>:

void user_delay_ms(uint32_t period)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fc43 	bl	80046f8 <HAL_Delay>
}
 8003e72:	bf00      	nop
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <user_i2c_write>:
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af02      	add	r7, sp, #8
 8003e82:	603a      	str	r2, [r7, #0]
 8003e84:	461a      	mov	r2, r3
 8003e86:	4603      	mov	r3, r0
 8003e88:	71fb      	strb	r3, [r7, #7]
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	71bb      	strb	r3, [r7, #6]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 8003e92:	88bb      	ldrh	r3, [r7, #4]
 8003e94:	3301      	adds	r3, #1
 8003e96:	4618      	mov	r0, r3
 8003e98:	f004 ff7e 	bl	8008d98 <malloc>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 8003ea0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	88ba      	ldrh	r2, [r7, #4]
 8003eae:	6839      	ldr	r1, [r7, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f005 f873 	bl	8008f9c <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c1, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	b299      	uxth	r1, r3
 8003ebe:	88bb      	ldrh	r3, [r7, #4]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec8:	9200      	str	r2, [sp, #0]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4808      	ldr	r0, [pc, #32]	@ (8003ef0 <user_i2c_write+0x74>)
 8003ece:	f001 f8ff 	bl	80050d0 <HAL_I2C_Master_Transmit>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <user_i2c_write+0x62>
 8003ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8003edc:	e003      	b.n	8003ee6 <user_i2c_write+0x6a>

  free(buf);
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f004 ff62 	bl	8008da8 <free>
  return 0;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	200000b4 	.word	0x200000b4

08003ef4 <Buzzer>:

void Buzzer(int how_many , uint32_t how_long)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
	if((how_many %2) == 1) how_many++;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	bfb8      	it	lt
 8003f08:	425b      	neglt	r3, r3
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d102      	bne.n	8003f14 <Buzzer+0x20>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3301      	adds	r3, #1
 8003f12:	607b      	str	r3, [r7, #4]

	  for(uint8_t i=0;i<how_many; i++)
 8003f14:	2300      	movs	r3, #0
 8003f16:	73fb      	strb	r3, [r7, #15]
 8003f18:	e013      	b.n	8003f42 <Buzzer+0x4e>
	  {
	  	    HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_4);
 8003f1a:	2110      	movs	r1, #16
 8003f1c:	481c      	ldr	r0, [pc, #112]	@ (8003f90 <Buzzer+0x9c>)
 8003f1e:	f000 ff78 	bl	8004e12 <HAL_GPIO_TogglePin>
	  	    HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8003f22:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003f26:	481b      	ldr	r0, [pc, #108]	@ (8003f94 <Buzzer+0xa0>)
 8003f28:	f000 ff73 	bl	8004e12 <HAL_GPIO_TogglePin>
	  	    HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13);
 8003f2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003f30:	4818      	ldr	r0, [pc, #96]	@ (8003f94 <Buzzer+0xa0>)
 8003f32:	f000 ff6e 	bl	8004e12 <HAL_GPIO_TogglePin>
	  		HAL_Delay(how_long);
 8003f36:	6838      	ldr	r0, [r7, #0]
 8003f38:	f000 fbde 	bl	80046f8 <HAL_Delay>
	  for(uint8_t i=0;i<how_many; i++)
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	73fb      	strb	r3, [r7, #15]
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	dce7      	bgt.n	8003f1a <Buzzer+0x26>

	  }

	  fitil_kontrol=  HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8003f4a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003f4e:	4811      	ldr	r0, [pc, #68]	@ (8003f94 <Buzzer+0xa0>)
 8003f50:	f000 ff2e 	bl	8004db0 <HAL_GPIO_ReadPin>
 8003f54:	4603      	mov	r3, r0
 8003f56:	461a      	mov	r2, r3
 8003f58:	4b0f      	ldr	r3, [pc, #60]	@ (8003f98 <Buzzer+0xa4>)
 8003f5a:	701a      	strb	r2, [r3, #0]
	  if(!fitil_kontrol)
 8003f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8003f98 <Buzzer+0xa4>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d111      	bne.n	8003f88 <Buzzer+0x94>
	  		{
	  			HAL_Delay(1000);
 8003f64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003f68:	f000 fbc6 	bl	80046f8 <HAL_Delay>
	  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	2110      	movs	r1, #16
 8003f70:	4807      	ldr	r0, [pc, #28]	@ (8003f90 <Buzzer+0x9c>)
 8003f72:	f000 ff35 	bl	8004de0 <HAL_GPIO_WritePin>
	  			HAL_Delay(3000);
 8003f76:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003f7a:	f000 fbbd 	bl	80046f8 <HAL_Delay>
	  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2110      	movs	r1, #16
 8003f82:	4803      	ldr	r0, [pc, #12]	@ (8003f90 <Buzzer+0x9c>)
 8003f84:	f000 ff2c 	bl	8004de0 <HAL_GPIO_WritePin>
	  		}
}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40020800 	.word	0x40020800
 8003f94:	40020400 	.word	0x40020400
 8003f98:	200002b4 	.word	0x200002b4

08003f9c <Altitude_Offset>:

void Altitude_Offset()
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<5;i++)
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	71fb      	strb	r3, [r7, #7]
 8003fa6:	e02b      	b.n	8004000 <Altitude_Offset+0x64>
	{
		HAL_Delay(40);
 8003fa8:	2028      	movs	r0, #40	@ 0x28
 8003faa:	f000 fba5 	bl	80046f8 <HAL_Delay>
	  rslt = bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 8003fae:	4918      	ldr	r1, [pc, #96]	@ (8004010 <Altitude_Offset+0x74>)
 8003fb0:	2001      	movs	r0, #1
 8003fb2:	f7fd f8f6 	bl	80011a2 <bme280_set_sensor_mode>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4b16      	ldr	r3, [pc, #88]	@ (8004014 <Altitude_Offset+0x78>)
 8003fbc:	701a      	strb	r2, [r3, #0]
	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8003fbe:	4a14      	ldr	r2, [pc, #80]	@ (8004010 <Altitude_Offset+0x74>)
 8003fc0:	4915      	ldr	r1, [pc, #84]	@ (8004018 <Altitude_Offset+0x7c>)
 8003fc2:	2007      	movs	r0, #7
 8003fc4:	f7fd f969 	bl	800129a <bme280_get_sensor_data>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	461a      	mov	r2, r3
 8003fcc:	4b11      	ldr	r3, [pc, #68]	@ (8004014 <Altitude_Offset+0x78>)
 8003fce:	701a      	strb	r2, [r3, #0]
	  if(rslt == BME280_OK)
 8003fd0:	4b10      	ldr	r3, [pc, #64]	@ (8004014 <Altitude_Offset+0x78>)
 8003fd2:	f993 3000 	ldrsb.w	r3, [r3]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10f      	bne.n	8003ffa <Altitude_Offset+0x5e>
	  { pressure = comp_data.pressure;
 8003fda:	4b0f      	ldr	r3, [pc, #60]	@ (8004018 <Altitude_Offset+0x7c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800401c <Altitude_Offset+0x80>)
 8003fe8:	edc3 7a00 	vstr	s15, [r3]
	    offset_altitude=BME280_Get_Altitude();
 8003fec:	f7ff fea0 	bl	8003d30 <BME280_Get_Altitude>
 8003ff0:	eef0 7a40 	vmov.f32	s15, s0
 8003ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8004020 <Altitude_Offset+0x84>)
 8003ff6:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i=0;i<5;i++)
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	71fb      	strb	r3, [r7, #7]
 8004000:	79fb      	ldrb	r3, [r7, #7]
 8004002:	2b04      	cmp	r3, #4
 8004004:	d9d0      	bls.n	8003fa8 <Altitude_Offset+0xc>
	  }
	}
}
 8004006:	bf00      	nop
 8004008:	bf00      	nop
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	200003b0 	.word	0x200003b0
 8004014:	200003fc 	.word	0x200003fc
 8004018:	200003f0 	.word	0x200003f0
 800401c:	200002d8 	.word	0x200002d8
 8004020:	200002d4 	.word	0x200002d4

08004024 <compare_arrays>:


int compare_arrays(uint8_t *array1, uint8_t *array2, uint16_t size) {
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	4613      	mov	r3, r2
 8004030:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < size-1; i++) {
 8004032:	2300      	movs	r3, #0
 8004034:	82fb      	strh	r3, [r7, #22]
 8004036:	e00e      	b.n	8004056 <compare_arrays+0x32>
        if (array1[i] != array2[i]) {
 8004038:	8afb      	ldrh	r3, [r7, #22]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4413      	add	r3, r2
 800403e:	781a      	ldrb	r2, [r3, #0]
 8004040:	8afb      	ldrh	r3, [r7, #22]
 8004042:	68b9      	ldr	r1, [r7, #8]
 8004044:	440b      	add	r3, r1
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d001      	beq.n	8004050 <compare_arrays+0x2c>
            return 0; // Diziler farklı
 800404c:	2300      	movs	r3, #0
 800404e:	e008      	b.n	8004062 <compare_arrays+0x3e>
    for (uint16_t i = 0; i < size-1; i++) {
 8004050:	8afb      	ldrh	r3, [r7, #22]
 8004052:	3301      	adds	r3, #1
 8004054:	82fb      	strh	r3, [r7, #22]
 8004056:	8afa      	ldrh	r2, [r7, #22]
 8004058:	88fb      	ldrh	r3, [r7, #6]
 800405a:	3b01      	subs	r3, #1
 800405c:	429a      	cmp	r2, r3
 800405e:	dbeb      	blt.n	8004038 <compare_arrays+0x14>
        }
    }
    return 1; // Diziler aynı
 8004060:	2301      	movs	r3, #1
}
 8004062:	4618      	mov	r0, r3
 8004064:	371c      	adds	r7, #28
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
	...

08004070 <MEGU_TX_BUF_FILL>:

void MEGU_TX_BUF_FILL(void)
{
 8004070:	b480      	push	{r7}
 8004072:	b089      	sub	sp, #36	@ 0x24
 8004074:	af00      	add	r7, sp, #0
	  EGU_TX_BUFFER[0]=egu_byte_0;
 8004076:	2254      	movs	r2, #84	@ 0x54
 8004078:	4b56      	ldr	r3, [pc, #344]	@ (80041d4 <MEGU_TX_BUF_FILL+0x164>)
 800407a:	701a      	strb	r2, [r3, #0]
	  EGU_TX_BUFFER[1]=egu_byte_1;
 800407c:	2252      	movs	r2, #82	@ 0x52
 800407e:	4b55      	ldr	r3, [pc, #340]	@ (80041d4 <MEGU_TX_BUF_FILL+0x164>)
 8004080:	705a      	strb	r2, [r3, #1]


	  float2unit8 f2u8_zaman;
	  f2u8_zaman.fVal=zaman;
 8004082:	4b55      	ldr	r3, [pc, #340]	@ (80041d8 <MEGU_TX_BUF_FILL+0x168>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	617b      	str	r3, [r7, #20]
     	 for(uint8_t i=0;i<4;i++)
 8004088:	2300      	movs	r3, #0
 800408a:	77fb      	strb	r3, [r7, #31]
 800408c:	e00b      	b.n	80040a6 <MEGU_TX_BUF_FILL+0x36>
	 	 {
     		EGU_TX_BUFFER[i+2]=f2u8_zaman.array[i];
 800408e:	7ffa      	ldrb	r2, [r7, #31]
 8004090:	7ffb      	ldrb	r3, [r7, #31]
 8004092:	3302      	adds	r3, #2
 8004094:	3220      	adds	r2, #32
 8004096:	443a      	add	r2, r7
 8004098:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 800409c:	4a4d      	ldr	r2, [pc, #308]	@ (80041d4 <MEGU_TX_BUF_FILL+0x164>)
 800409e:	54d1      	strb	r1, [r2, r3]
     	 for(uint8_t i=0;i<4;i++)
 80040a0:	7ffb      	ldrb	r3, [r7, #31]
 80040a2:	3301      	adds	r3, #1
 80040a4:	77fb      	strb	r3, [r7, #31]
 80040a6:	7ffb      	ldrb	r3, [r7, #31]
 80040a8:	2b03      	cmp	r3, #3
 80040aa:	d9f0      	bls.n	800408e <MEGU_TX_BUF_FILL+0x1e>
	 	 }
   	  float2unit8 f2u8_battery;
   	  f2u8_battery.fVal=MEGU_battery;
 80040ac:	4b4b      	ldr	r3, [pc, #300]	@ (80041dc <MEGU_TX_BUF_FILL+0x16c>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	ee07 3a90 	vmov	s15, r3
 80040b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b8:	edc7 7a04 	vstr	s15, [r7, #16]
        	 for(uint8_t i=0;i<4;i++)
 80040bc:	2300      	movs	r3, #0
 80040be:	77bb      	strb	r3, [r7, #30]
 80040c0:	e00b      	b.n	80040da <MEGU_TX_BUF_FILL+0x6a>
   	 	 {
        		EGU_TX_BUFFER[i+6]=f2u8_battery.array[i];
 80040c2:	7fba      	ldrb	r2, [r7, #30]
 80040c4:	7fbb      	ldrb	r3, [r7, #30]
 80040c6:	3306      	adds	r3, #6
 80040c8:	3220      	adds	r2, #32
 80040ca:	443a      	add	r2, r7
 80040cc:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 80040d0:	4a40      	ldr	r2, [pc, #256]	@ (80041d4 <MEGU_TX_BUF_FILL+0x164>)
 80040d2:	54d1      	strb	r1, [r2, r3]
        	 for(uint8_t i=0;i<4;i++)
 80040d4:	7fbb      	ldrb	r3, [r7, #30]
 80040d6:	3301      	adds	r3, #1
 80040d8:	77bb      	strb	r3, [r7, #30]
 80040da:	7fbb      	ldrb	r3, [r7, #30]
 80040dc:	2b03      	cmp	r3, #3
 80040de:	d9f0      	bls.n	80040c2 <MEGU_TX_BUF_FILL+0x52>
   	 	 }
	 float2unit8 f2u8_alt;
	 f2u8_alt.fVal=altitude_kalman;
 80040e0:	4b3f      	ldr	r3, [pc, #252]	@ (80041e0 <MEGU_TX_BUF_FILL+0x170>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60fb      	str	r3, [r7, #12]
			 for(uint8_t i=0;i<4;i++)
 80040e6:	2300      	movs	r3, #0
 80040e8:	777b      	strb	r3, [r7, #29]
 80040ea:	e00b      	b.n	8004104 <MEGU_TX_BUF_FILL+0x94>
		 {
				EGU_TX_BUFFER[i+10]=f2u8_alt.array[i];
 80040ec:	7f7a      	ldrb	r2, [r7, #29]
 80040ee:	7f7b      	ldrb	r3, [r7, #29]
 80040f0:	330a      	adds	r3, #10
 80040f2:	3220      	adds	r2, #32
 80040f4:	443a      	add	r2, r7
 80040f6:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 80040fa:	4a36      	ldr	r2, [pc, #216]	@ (80041d4 <MEGU_TX_BUF_FILL+0x164>)
 80040fc:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 80040fe:	7f7b      	ldrb	r3, [r7, #29]
 8004100:	3301      	adds	r3, #1
 8004102:	777b      	strb	r3, [r7, #29]
 8004104:	7f7b      	ldrb	r3, [r7, #29]
 8004106:	2b03      	cmp	r3, #3
 8004108:	d9f0      	bls.n	80040ec <MEGU_TX_BUF_FILL+0x7c>
		 }
	 float2unit8 f2u8_max_alt;
	 f2u8_max_alt.fVal=max_altitude;
 800410a:	4b36      	ldr	r3, [pc, #216]	@ (80041e4 <MEGU_TX_BUF_FILL+0x174>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60bb      	str	r3, [r7, #8]
	 	 	 for(uint8_t i=0;i<4;i++)
 8004110:	2300      	movs	r3, #0
 8004112:	773b      	strb	r3, [r7, #28]
 8004114:	e00b      	b.n	800412e <MEGU_TX_BUF_FILL+0xbe>
		 {
				EGU_TX_BUFFER[i+14]=f2u8_max_alt.array[i];
 8004116:	7f3a      	ldrb	r2, [r7, #28]
 8004118:	7f3b      	ldrb	r3, [r7, #28]
 800411a:	330e      	adds	r3, #14
 800411c:	3220      	adds	r2, #32
 800411e:	443a      	add	r2, r7
 8004120:	f812 1c18 	ldrb.w	r1, [r2, #-24]
 8004124:	4a2b      	ldr	r2, [pc, #172]	@ (80041d4 <MEGU_TX_BUF_FILL+0x164>)
 8004126:	54d1      	strb	r1, [r2, r3]
	 	 	 for(uint8_t i=0;i<4;i++)
 8004128:	7f3b      	ldrb	r3, [r7, #28]
 800412a:	3301      	adds	r3, #1
 800412c:	773b      	strb	r3, [r7, #28]
 800412e:	7f3b      	ldrb	r3, [r7, #28]
 8004130:	2b03      	cmp	r3, #3
 8004132:	d9f0      	bls.n	8004116 <MEGU_TX_BUF_FILL+0xa6>
		 }
	 float2unit8 f2u8_x;
	 f2u8_x.fVal=Lsm_Sensor.Accel_X;
 8004134:	4b2c      	ldr	r3, [pc, #176]	@ (80041e8 <MEGU_TX_BUF_FILL+0x178>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	607b      	str	r3, [r7, #4]
	 	 	 for(uint8_t i=0;i<4;i++)
 800413a:	2300      	movs	r3, #0
 800413c:	76fb      	strb	r3, [r7, #27]
 800413e:	e00b      	b.n	8004158 <MEGU_TX_BUF_FILL+0xe8>
		 {
				EGU_TX_BUFFER[i+18]=f2u8_x.array[i];
 8004140:	7efa      	ldrb	r2, [r7, #27]
 8004142:	7efb      	ldrb	r3, [r7, #27]
 8004144:	3312      	adds	r3, #18
 8004146:	3220      	adds	r2, #32
 8004148:	443a      	add	r2, r7
 800414a:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 800414e:	4a21      	ldr	r2, [pc, #132]	@ (80041d4 <MEGU_TX_BUF_FILL+0x164>)
 8004150:	54d1      	strb	r1, [r2, r3]
	 	 	 for(uint8_t i=0;i<4;i++)
 8004152:	7efb      	ldrb	r3, [r7, #27]
 8004154:	3301      	adds	r3, #1
 8004156:	76fb      	strb	r3, [r7, #27]
 8004158:	7efb      	ldrb	r3, [r7, #27]
 800415a:	2b03      	cmp	r3, #3
 800415c:	d9f0      	bls.n	8004140 <MEGU_TX_BUF_FILL+0xd0>
		 }
	  float2unit8 f2u8_pitch;
	  f2u8_pitch.fVal=real_pitch;
 800415e:	4b23      	ldr	r3, [pc, #140]	@ (80041ec <MEGU_TX_BUF_FILL+0x17c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	603b      	str	r3, [r7, #0]
	  	 	 for(uint8_t i=0;i<4;i++)
 8004164:	2300      	movs	r3, #0
 8004166:	76bb      	strb	r3, [r7, #26]
 8004168:	e00b      	b.n	8004182 <MEGU_TX_BUF_FILL+0x112>
		 {
	 			EGU_TX_BUFFER[i+22]=f2u8_pitch.array[i];
 800416a:	7eba      	ldrb	r2, [r7, #26]
 800416c:	7ebb      	ldrb	r3, [r7, #26]
 800416e:	3316      	adds	r3, #22
 8004170:	3220      	adds	r2, #32
 8004172:	443a      	add	r2, r7
 8004174:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 8004178:	4a16      	ldr	r2, [pc, #88]	@ (80041d4 <MEGU_TX_BUF_FILL+0x164>)
 800417a:	54d1      	strb	r1, [r2, r3]
	  	 	 for(uint8_t i=0;i<4;i++)
 800417c:	7ebb      	ldrb	r3, [r7, #26]
 800417e:	3301      	adds	r3, #1
 8004180:	76bb      	strb	r3, [r7, #26]
 8004182:	7ebb      	ldrb	r3, [r7, #26]
 8004184:	2b03      	cmp	r3, #3
 8004186:	d9f0      	bls.n	800416a <MEGU_TX_BUF_FILL+0xfa>
		 }




	  EGU_TX_BUFFER[26]=rampa_control;//uçuş başladı mı
 8004188:	4b19      	ldr	r3, [pc, #100]	@ (80041f0 <MEGU_TX_BUF_FILL+0x180>)
 800418a:	781a      	ldrb	r2, [r3, #0]
 800418c:	4b11      	ldr	r3, [pc, #68]	@ (80041d4 <MEGU_TX_BUF_FILL+0x164>)
 800418e:	769a      	strb	r2, [r3, #26]
	  EGU_TX_BUFFER[27]=motor_ates;//motor ateşleme sinyali geldi mi
 8004190:	4b18      	ldr	r3, [pc, #96]	@ (80041f4 <MEGU_TX_BUF_FILL+0x184>)
 8004192:	781a      	ldrb	r2, [r3, #0]
 8004194:	4b0f      	ldr	r3, [pc, #60]	@ (80041d4 <MEGU_TX_BUF_FILL+0x164>)
 8004196:	76da      	strb	r2, [r3, #27]
	  EGU_TX_BUFFER[28]=manyetik_switch;
 8004198:	4b17      	ldr	r3, [pc, #92]	@ (80041f8 <MEGU_TX_BUF_FILL+0x188>)
 800419a:	781a      	ldrb	r2, [r3, #0]
 800419c:	4b0d      	ldr	r3, [pc, #52]	@ (80041d4 <MEGU_TX_BUF_FILL+0x164>)
 800419e:	771a      	strb	r2, [r3, #28]
	  EGU_TX_BUFFER[29]=ariza;//ariza tespit
 80041a0:	4b16      	ldr	r3, [pc, #88]	@ (80041fc <MEGU_TX_BUF_FILL+0x18c>)
 80041a2:	781a      	ldrb	r2, [r3, #0]
 80041a4:	4b0b      	ldr	r3, [pc, #44]	@ (80041d4 <MEGU_TX_BUF_FILL+0x164>)
 80041a6:	775a      	strb	r2, [r3, #29]
	  EGU_TX_BUFFER[30]=fitil_kontrol;
 80041a8:	4b15      	ldr	r3, [pc, #84]	@ (8004200 <MEGU_TX_BUF_FILL+0x190>)
 80041aa:	781a      	ldrb	r2, [r3, #0]
 80041ac:	4b09      	ldr	r3, [pc, #36]	@ (80041d4 <MEGU_TX_BUF_FILL+0x164>)
 80041ae:	779a      	strb	r2, [r3, #30]
	  EGU_TX_BUFFER[31]=egu_byte_31;
 80041b0:	2200      	movs	r2, #0
 80041b2:	4b08      	ldr	r3, [pc, #32]	@ (80041d4 <MEGU_TX_BUF_FILL+0x164>)
 80041b4:	77da      	strb	r2, [r3, #31]
	  EGU_TX_BUFFER[32]=egu_byte_32;
 80041b6:	220d      	movs	r2, #13
 80041b8:	4b06      	ldr	r3, [pc, #24]	@ (80041d4 <MEGU_TX_BUF_FILL+0x164>)
 80041ba:	f883 2020 	strb.w	r2, [r3, #32]
	  EGU_TX_BUFFER[33]=egu_byte_33;
 80041be:	220a      	movs	r2, #10
 80041c0:	4b04      	ldr	r3, [pc, #16]	@ (80041d4 <MEGU_TX_BUF_FILL+0x164>)
 80041c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21



}
 80041c6:	bf00      	nop
 80041c8:	3724      	adds	r7, #36	@ 0x24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	20000270 	.word	0x20000270
 80041d8:	200002b0 	.word	0x200002b0
 80041dc:	200002ac 	.word	0x200002ac
 80041e0:	200003a8 	.word	0x200003a8
 80041e4:	200002d0 	.word	0x200002d0
 80041e8:	20000384 	.word	0x20000384
 80041ec:	20000300 	.word	0x20000300
 80041f0:	200002b7 	.word	0x200002b7
 80041f4:	200002b5 	.word	0x200002b5
 80041f8:	20000011 	.word	0x20000011
 80041fc:	200002ba 	.word	0x200002ba
 8004200:	200002b4 	.word	0x200002b4

08004204 <bme_config>:
void bme_config(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
	  dev.dev_id = BME280_I2C_ADDR_PRIM;
 8004208:	4b17      	ldr	r3, [pc, #92]	@ (8004268 <bme_config+0x64>)
 800420a:	2276      	movs	r2, #118	@ 0x76
 800420c:	705a      	strb	r2, [r3, #1]
	  dev.intf = BME280_I2C_INTF;
 800420e:	4b16      	ldr	r3, [pc, #88]	@ (8004268 <bme_config+0x64>)
 8004210:	2201      	movs	r2, #1
 8004212:	709a      	strb	r2, [r3, #2]
	  dev.read = user_i2c_read;
 8004214:	4b14      	ldr	r3, [pc, #80]	@ (8004268 <bme_config+0x64>)
 8004216:	4a15      	ldr	r2, [pc, #84]	@ (800426c <bme_config+0x68>)
 8004218:	605a      	str	r2, [r3, #4]
	  dev.write = user_i2c_write;
 800421a:	4b13      	ldr	r3, [pc, #76]	@ (8004268 <bme_config+0x64>)
 800421c:	4a14      	ldr	r2, [pc, #80]	@ (8004270 <bme_config+0x6c>)
 800421e:	609a      	str	r2, [r3, #8]
	  dev.delay_ms = user_delay_ms;
 8004220:	4b11      	ldr	r3, [pc, #68]	@ (8004268 <bme_config+0x64>)
 8004222:	4a14      	ldr	r2, [pc, #80]	@ (8004274 <bme_config+0x70>)
 8004224:	60da      	str	r2, [r3, #12]

	  rslt = bme280_init(&dev);
 8004226:	4810      	ldr	r0, [pc, #64]	@ (8004268 <bme_config+0x64>)
 8004228:	f7fc fe72 	bl	8000f10 <bme280_init>
 800422c:	4603      	mov	r3, r0
 800422e:	461a      	mov	r2, r3
 8004230:	4b11      	ldr	r3, [pc, #68]	@ (8004278 <bme_config+0x74>)
 8004232:	701a      	strb	r2, [r3, #0]

	  dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8004234:	4b0c      	ldr	r3, [pc, #48]	@ (8004268 <bme_config+0x64>)
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
	  dev.settings.osr_p = BME280_OVERSAMPLING_4X;
 800423c:	4b0a      	ldr	r3, [pc, #40]	@ (8004268 <bme_config+0x64>)
 800423e:	2203      	movs	r2, #3
 8004240:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	  dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8004244:	4b08      	ldr	r3, [pc, #32]	@ (8004268 <bme_config+0x64>)
 8004246:	2202      	movs	r2, #2
 8004248:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
	  dev.settings.filter = BME280_FILTER_COEFF_16;
 800424c:	4b06      	ldr	r3, [pc, #24]	@ (8004268 <bme_config+0x64>)
 800424e:	2204      	movs	r2, #4
 8004250:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
	  rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8004254:	4904      	ldr	r1, [pc, #16]	@ (8004268 <bme_config+0x64>)
 8004256:	200f      	movs	r0, #15
 8004258:	f7fc ff4e 	bl	80010f8 <bme280_set_sensor_settings>
 800425c:	4603      	mov	r3, r0
 800425e:	461a      	mov	r2, r3
 8004260:	4b05      	ldr	r3, [pc, #20]	@ (8004278 <bme_config+0x74>)
 8004262:	701a      	strb	r2, [r3, #0]


}
 8004264:	bf00      	nop
 8004266:	bd80      	pop	{r7, pc}
 8004268:	200003b0 	.word	0x200003b0
 800426c:	08003df5 	.word	0x08003df5
 8004270:	08003e7d 	.word	0x08003e7d
 8004274:	08003e65 	.word	0x08003e65
 8004278:	200003fc 	.word	0x200003fc

0800427c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004280:	b672      	cpsid	i
}
 8004282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004284:	bf00      	nop
 8004286:	e7fd      	b.n	8004284 <Error_Handler+0x8>

08004288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800428e:	2300      	movs	r3, #0
 8004290:	607b      	str	r3, [r7, #4]
 8004292:	4b10      	ldr	r3, [pc, #64]	@ (80042d4 <HAL_MspInit+0x4c>)
 8004294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004296:	4a0f      	ldr	r2, [pc, #60]	@ (80042d4 <HAL_MspInit+0x4c>)
 8004298:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800429c:	6453      	str	r3, [r2, #68]	@ 0x44
 800429e:	4b0d      	ldr	r3, [pc, #52]	@ (80042d4 <HAL_MspInit+0x4c>)
 80042a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042a6:	607b      	str	r3, [r7, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042aa:	2300      	movs	r3, #0
 80042ac:	603b      	str	r3, [r7, #0]
 80042ae:	4b09      	ldr	r3, [pc, #36]	@ (80042d4 <HAL_MspInit+0x4c>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b2:	4a08      	ldr	r2, [pc, #32]	@ (80042d4 <HAL_MspInit+0x4c>)
 80042b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80042ba:	4b06      	ldr	r3, [pc, #24]	@ (80042d4 <HAL_MspInit+0x4c>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40023800 	.word	0x40023800

080042d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08a      	sub	sp, #40	@ 0x28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e0:	f107 0314 	add.w	r3, r7, #20
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	605a      	str	r2, [r3, #4]
 80042ea:	609a      	str	r2, [r3, #8]
 80042ec:	60da      	str	r2, [r3, #12]
 80042ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a19      	ldr	r2, [pc, #100]	@ (800435c <HAL_I2C_MspInit+0x84>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d12b      	bne.n	8004352 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042fa:	2300      	movs	r3, #0
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	4b18      	ldr	r3, [pc, #96]	@ (8004360 <HAL_I2C_MspInit+0x88>)
 8004300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004302:	4a17      	ldr	r2, [pc, #92]	@ (8004360 <HAL_I2C_MspInit+0x88>)
 8004304:	f043 0302 	orr.w	r3, r3, #2
 8004308:	6313      	str	r3, [r2, #48]	@ 0x30
 800430a:	4b15      	ldr	r3, [pc, #84]	@ (8004360 <HAL_I2C_MspInit+0x88>)
 800430c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	613b      	str	r3, [r7, #16]
 8004314:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004316:	23c0      	movs	r3, #192	@ 0xc0
 8004318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800431a:	2312      	movs	r3, #18
 800431c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431e:	2300      	movs	r3, #0
 8004320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004322:	2303      	movs	r3, #3
 8004324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004326:	2304      	movs	r3, #4
 8004328:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800432a:	f107 0314 	add.w	r3, r7, #20
 800432e:	4619      	mov	r1, r3
 8004330:	480c      	ldr	r0, [pc, #48]	@ (8004364 <HAL_I2C_MspInit+0x8c>)
 8004332:	f000 fba9 	bl	8004a88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004336:	2300      	movs	r3, #0
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	4b09      	ldr	r3, [pc, #36]	@ (8004360 <HAL_I2C_MspInit+0x88>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433e:	4a08      	ldr	r2, [pc, #32]	@ (8004360 <HAL_I2C_MspInit+0x88>)
 8004340:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004344:	6413      	str	r3, [r2, #64]	@ 0x40
 8004346:	4b06      	ldr	r3, [pc, #24]	@ (8004360 <HAL_I2C_MspInit+0x88>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004352:	bf00      	nop
 8004354:	3728      	adds	r7, #40	@ 0x28
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40005400 	.word	0x40005400
 8004360:	40023800 	.word	0x40023800
 8004364:	40020400 	.word	0x40020400

08004368 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1c      	ldr	r2, [pc, #112]	@ (80043e8 <HAL_TIM_Base_MspInit+0x80>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d116      	bne.n	80043a8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	4b1b      	ldr	r3, [pc, #108]	@ (80043ec <HAL_TIM_Base_MspInit+0x84>)
 8004380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004382:	4a1a      	ldr	r2, [pc, #104]	@ (80043ec <HAL_TIM_Base_MspInit+0x84>)
 8004384:	f043 0310 	orr.w	r3, r3, #16
 8004388:	6413      	str	r3, [r2, #64]	@ 0x40
 800438a:	4b18      	ldr	r3, [pc, #96]	@ (80043ec <HAL_TIM_Base_MspInit+0x84>)
 800438c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438e:	f003 0310 	and.w	r3, r3, #16
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004396:	2200      	movs	r2, #0
 8004398:	2100      	movs	r1, #0
 800439a:	2036      	movs	r0, #54	@ 0x36
 800439c:	f000 faab 	bl	80048f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80043a0:	2036      	movs	r0, #54	@ 0x36
 80043a2:	f000 fac4 	bl	800492e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80043a6:	e01a      	b.n	80043de <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a10      	ldr	r2, [pc, #64]	@ (80043f0 <HAL_TIM_Base_MspInit+0x88>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d115      	bne.n	80043de <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80043b2:	2300      	movs	r3, #0
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	4b0d      	ldr	r3, [pc, #52]	@ (80043ec <HAL_TIM_Base_MspInit+0x84>)
 80043b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ba:	4a0c      	ldr	r2, [pc, #48]	@ (80043ec <HAL_TIM_Base_MspInit+0x84>)
 80043bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80043c2:	4b0a      	ldr	r3, [pc, #40]	@ (80043ec <HAL_TIM_Base_MspInit+0x84>)
 80043c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80043ce:	2200      	movs	r2, #0
 80043d0:	2100      	movs	r1, #0
 80043d2:	2019      	movs	r0, #25
 80043d4:	f000 fa8f 	bl	80048f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80043d8:	2019      	movs	r0, #25
 80043da:	f000 faa8 	bl	800492e <HAL_NVIC_EnableIRQ>
}
 80043de:	bf00      	nop
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40001000 	.word	0x40001000
 80043ec:	40023800 	.word	0x40023800
 80043f0:	40014400 	.word	0x40014400

080043f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08a      	sub	sp, #40	@ 0x28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043fc:	f107 0314 	add.w	r3, r7, #20
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	605a      	str	r2, [r3, #4]
 8004406:	609a      	str	r2, [r3, #8]
 8004408:	60da      	str	r2, [r3, #12]
 800440a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a1d      	ldr	r2, [pc, #116]	@ (8004488 <HAL_UART_MspInit+0x94>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d133      	bne.n	800447e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8004416:	2300      	movs	r3, #0
 8004418:	613b      	str	r3, [r7, #16]
 800441a:	4b1c      	ldr	r3, [pc, #112]	@ (800448c <HAL_UART_MspInit+0x98>)
 800441c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800441e:	4a1b      	ldr	r2, [pc, #108]	@ (800448c <HAL_UART_MspInit+0x98>)
 8004420:	f043 0320 	orr.w	r3, r3, #32
 8004424:	6453      	str	r3, [r2, #68]	@ 0x44
 8004426:	4b19      	ldr	r3, [pc, #100]	@ (800448c <HAL_UART_MspInit+0x98>)
 8004428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442a:	f003 0320 	and.w	r3, r3, #32
 800442e:	613b      	str	r3, [r7, #16]
 8004430:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	4b15      	ldr	r3, [pc, #84]	@ (800448c <HAL_UART_MspInit+0x98>)
 8004438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443a:	4a14      	ldr	r2, [pc, #80]	@ (800448c <HAL_UART_MspInit+0x98>)
 800443c:	f043 0304 	orr.w	r3, r3, #4
 8004440:	6313      	str	r3, [r2, #48]	@ 0x30
 8004442:	4b12      	ldr	r3, [pc, #72]	@ (800448c <HAL_UART_MspInit+0x98>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = TX6_RS_Pin|RX6_RS_Pin;
 800444e:	23c0      	movs	r3, #192	@ 0xc0
 8004450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004452:	2302      	movs	r3, #2
 8004454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004456:	2300      	movs	r3, #0
 8004458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800445a:	2303      	movs	r3, #3
 800445c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800445e:	2308      	movs	r3, #8
 8004460:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004462:	f107 0314 	add.w	r3, r7, #20
 8004466:	4619      	mov	r1, r3
 8004468:	4809      	ldr	r0, [pc, #36]	@ (8004490 <HAL_UART_MspInit+0x9c>)
 800446a:	f000 fb0d 	bl	8004a88 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800446e:	2200      	movs	r2, #0
 8004470:	2100      	movs	r1, #0
 8004472:	2047      	movs	r0, #71	@ 0x47
 8004474:	f000 fa3f 	bl	80048f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004478:	2047      	movs	r0, #71	@ 0x47
 800447a:	f000 fa58 	bl	800492e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART6_MspInit 1 */

  }

}
 800447e:	bf00      	nop
 8004480:	3728      	adds	r7, #40	@ 0x28
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	40011400 	.word	0x40011400
 800448c:	40023800 	.word	0x40023800
 8004490:	40020800 	.word	0x40020800

08004494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004498:	bf00      	nop
 800449a:	e7fd      	b.n	8004498 <NMI_Handler+0x4>

0800449c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044a0:	bf00      	nop
 80044a2:	e7fd      	b.n	80044a0 <HardFault_Handler+0x4>

080044a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044a8:	bf00      	nop
 80044aa:	e7fd      	b.n	80044a8 <MemManage_Handler+0x4>

080044ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044b0:	bf00      	nop
 80044b2:	e7fd      	b.n	80044b0 <BusFault_Handler+0x4>

080044b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044b8:	bf00      	nop
 80044ba:	e7fd      	b.n	80044b8 <UsageFault_Handler+0x4>

080044bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044c0:	bf00      	nop
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044ca:	b480      	push	{r7}
 80044cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044ce:	bf00      	nop
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044dc:	bf00      	nop
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044ea:	f000 f8e5 	bl	80046b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044ee:	bf00      	nop
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80044f8:	4802      	ldr	r0, [pc, #8]	@ (8004504 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80044fa:	f003 f8af 	bl	800765c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80044fe:	bf00      	nop
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000150 	.word	0x20000150

08004508 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800450c:	4802      	ldr	r0, [pc, #8]	@ (8004518 <TIM6_DAC_IRQHandler+0x10>)
 800450e:	f003 f8a5 	bl	800765c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004512:	bf00      	nop
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	20000108 	.word	0x20000108

0800451c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004520:	4802      	ldr	r0, [pc, #8]	@ (800452c <USART6_IRQHandler+0x10>)
 8004522:	f003 fc0b 	bl	8007d3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004526:	bf00      	nop
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	20000198 	.word	0x20000198

08004530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004538:	4a14      	ldr	r2, [pc, #80]	@ (800458c <_sbrk+0x5c>)
 800453a:	4b15      	ldr	r3, [pc, #84]	@ (8004590 <_sbrk+0x60>)
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004544:	4b13      	ldr	r3, [pc, #76]	@ (8004594 <_sbrk+0x64>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d102      	bne.n	8004552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800454c:	4b11      	ldr	r3, [pc, #68]	@ (8004594 <_sbrk+0x64>)
 800454e:	4a12      	ldr	r2, [pc, #72]	@ (8004598 <_sbrk+0x68>)
 8004550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004552:	4b10      	ldr	r3, [pc, #64]	@ (8004594 <_sbrk+0x64>)
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4413      	add	r3, r2
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	429a      	cmp	r2, r3
 800455e:	d207      	bcs.n	8004570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004560:	f004 fcf0 	bl	8008f44 <__errno>
 8004564:	4603      	mov	r3, r0
 8004566:	220c      	movs	r2, #12
 8004568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800456a:	f04f 33ff 	mov.w	r3, #4294967295
 800456e:	e009      	b.n	8004584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004570:	4b08      	ldr	r3, [pc, #32]	@ (8004594 <_sbrk+0x64>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004576:	4b07      	ldr	r3, [pc, #28]	@ (8004594 <_sbrk+0x64>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4413      	add	r3, r2
 800457e:	4a05      	ldr	r2, [pc, #20]	@ (8004594 <_sbrk+0x64>)
 8004580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004582:	68fb      	ldr	r3, [r7, #12]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3718      	adds	r7, #24
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	20020000 	.word	0x20020000
 8004590:	00000400 	.word	0x00000400
 8004594:	20000400 	.word	0x20000400
 8004598:	20000568 	.word	0x20000568

0800459c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80045a0:	4b06      	ldr	r3, [pc, #24]	@ (80045bc <SystemInit+0x20>)
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a6:	4a05      	ldr	r2, [pc, #20]	@ (80045bc <SystemInit+0x20>)
 80045a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80045ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80045b0:	bf00      	nop
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	e000ed00 	.word	0xe000ed00

080045c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80045c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80045f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80045c4:	480d      	ldr	r0, [pc, #52]	@ (80045fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80045c6:	490e      	ldr	r1, [pc, #56]	@ (8004600 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80045c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004604 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80045ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045cc:	e002      	b.n	80045d4 <LoopCopyDataInit>

080045ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045d2:	3304      	adds	r3, #4

080045d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045d8:	d3f9      	bcc.n	80045ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045da:	4a0b      	ldr	r2, [pc, #44]	@ (8004608 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80045dc:	4c0b      	ldr	r4, [pc, #44]	@ (800460c <LoopFillZerobss+0x26>)
  movs r3, #0
 80045de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045e0:	e001      	b.n	80045e6 <LoopFillZerobss>

080045e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045e4:	3204      	adds	r2, #4

080045e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045e8:	d3fb      	bcc.n	80045e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80045ea:	f7ff ffd7 	bl	800459c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045ee:	f004 fcaf 	bl	8008f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045f2:	f7fe fa65 	bl	8002ac0 <main>
  bx  lr    
 80045f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80045f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80045fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004600:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8004604:	0800a2f0 	.word	0x0800a2f0
  ldr r2, =_sbss
 8004608:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800460c:	20000564 	.word	0x20000564

08004610 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004610:	e7fe      	b.n	8004610 <ADC_IRQHandler>
	...

08004614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004618:	4b0e      	ldr	r3, [pc, #56]	@ (8004654 <HAL_Init+0x40>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a0d      	ldr	r2, [pc, #52]	@ (8004654 <HAL_Init+0x40>)
 800461e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004622:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004624:	4b0b      	ldr	r3, [pc, #44]	@ (8004654 <HAL_Init+0x40>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a0a      	ldr	r2, [pc, #40]	@ (8004654 <HAL_Init+0x40>)
 800462a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800462e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004630:	4b08      	ldr	r3, [pc, #32]	@ (8004654 <HAL_Init+0x40>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a07      	ldr	r2, [pc, #28]	@ (8004654 <HAL_Init+0x40>)
 8004636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800463a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800463c:	2003      	movs	r0, #3
 800463e:	f000 f94f 	bl	80048e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004642:	200f      	movs	r0, #15
 8004644:	f000 f808 	bl	8004658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004648:	f7ff fe1e 	bl	8004288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	40023c00 	.word	0x40023c00

08004658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004660:	4b12      	ldr	r3, [pc, #72]	@ (80046ac <HAL_InitTick+0x54>)
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	4b12      	ldr	r3, [pc, #72]	@ (80046b0 <HAL_InitTick+0x58>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	4619      	mov	r1, r3
 800466a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800466e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004672:	fbb2 f3f3 	udiv	r3, r2, r3
 8004676:	4618      	mov	r0, r3
 8004678:	f000 f967 	bl	800494a <HAL_SYSTICK_Config>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e00e      	b.n	80046a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b0f      	cmp	r3, #15
 800468a:	d80a      	bhi.n	80046a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800468c:	2200      	movs	r2, #0
 800468e:	6879      	ldr	r1, [r7, #4]
 8004690:	f04f 30ff 	mov.w	r0, #4294967295
 8004694:	f000 f92f 	bl	80048f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004698:	4a06      	ldr	r2, [pc, #24]	@ (80046b4 <HAL_InitTick+0x5c>)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	e000      	b.n	80046a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	20000014 	.word	0x20000014
 80046b0:	2000001c 	.word	0x2000001c
 80046b4:	20000018 	.word	0x20000018

080046b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046bc:	4b06      	ldr	r3, [pc, #24]	@ (80046d8 <HAL_IncTick+0x20>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	461a      	mov	r2, r3
 80046c2:	4b06      	ldr	r3, [pc, #24]	@ (80046dc <HAL_IncTick+0x24>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4413      	add	r3, r2
 80046c8:	4a04      	ldr	r2, [pc, #16]	@ (80046dc <HAL_IncTick+0x24>)
 80046ca:	6013      	str	r3, [r2, #0]
}
 80046cc:	bf00      	nop
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	2000001c 	.word	0x2000001c
 80046dc:	20000404 	.word	0x20000404

080046e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  return uwTick;
 80046e4:	4b03      	ldr	r3, [pc, #12]	@ (80046f4 <HAL_GetTick+0x14>)
 80046e6:	681b      	ldr	r3, [r3, #0]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	20000404 	.word	0x20000404

080046f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004700:	f7ff ffee 	bl	80046e0 <HAL_GetTick>
 8004704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004710:	d005      	beq.n	800471e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004712:	4b0a      	ldr	r3, [pc, #40]	@ (800473c <HAL_Delay+0x44>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4413      	add	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800471e:	bf00      	nop
 8004720:	f7ff ffde 	bl	80046e0 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	429a      	cmp	r2, r3
 800472e:	d8f7      	bhi.n	8004720 <HAL_Delay+0x28>
  {
  }
}
 8004730:	bf00      	nop
 8004732:	bf00      	nop
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	2000001c 	.word	0x2000001c

08004740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004750:	4b0c      	ldr	r3, [pc, #48]	@ (8004784 <__NVIC_SetPriorityGrouping+0x44>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800475c:	4013      	ands	r3, r2
 800475e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004768:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800476c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004772:	4a04      	ldr	r2, [pc, #16]	@ (8004784 <__NVIC_SetPriorityGrouping+0x44>)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	60d3      	str	r3, [r2, #12]
}
 8004778:	bf00      	nop
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	e000ed00 	.word	0xe000ed00

08004788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800478c:	4b04      	ldr	r3, [pc, #16]	@ (80047a0 <__NVIC_GetPriorityGrouping+0x18>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	0a1b      	lsrs	r3, r3, #8
 8004792:	f003 0307 	and.w	r3, r3, #7
}
 8004796:	4618      	mov	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	e000ed00 	.word	0xe000ed00

080047a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	4603      	mov	r3, r0
 80047ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	db0b      	blt.n	80047ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047b6:	79fb      	ldrb	r3, [r7, #7]
 80047b8:	f003 021f 	and.w	r2, r3, #31
 80047bc:	4907      	ldr	r1, [pc, #28]	@ (80047dc <__NVIC_EnableIRQ+0x38>)
 80047be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c2:	095b      	lsrs	r3, r3, #5
 80047c4:	2001      	movs	r0, #1
 80047c6:	fa00 f202 	lsl.w	r2, r0, r2
 80047ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	e000e100 	.word	0xe000e100

080047e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	4603      	mov	r3, r0
 80047e8:	6039      	str	r1, [r7, #0]
 80047ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	db0a      	blt.n	800480a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	490c      	ldr	r1, [pc, #48]	@ (800482c <__NVIC_SetPriority+0x4c>)
 80047fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fe:	0112      	lsls	r2, r2, #4
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	440b      	add	r3, r1
 8004804:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004808:	e00a      	b.n	8004820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	b2da      	uxtb	r2, r3
 800480e:	4908      	ldr	r1, [pc, #32]	@ (8004830 <__NVIC_SetPriority+0x50>)
 8004810:	79fb      	ldrb	r3, [r7, #7]
 8004812:	f003 030f 	and.w	r3, r3, #15
 8004816:	3b04      	subs	r3, #4
 8004818:	0112      	lsls	r2, r2, #4
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	440b      	add	r3, r1
 800481e:	761a      	strb	r2, [r3, #24]
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	e000e100 	.word	0xe000e100
 8004830:	e000ed00 	.word	0xe000ed00

08004834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004834:	b480      	push	{r7}
 8004836:	b089      	sub	sp, #36	@ 0x24
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	f1c3 0307 	rsb	r3, r3, #7
 800484e:	2b04      	cmp	r3, #4
 8004850:	bf28      	it	cs
 8004852:	2304      	movcs	r3, #4
 8004854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	3304      	adds	r3, #4
 800485a:	2b06      	cmp	r3, #6
 800485c:	d902      	bls.n	8004864 <NVIC_EncodePriority+0x30>
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	3b03      	subs	r3, #3
 8004862:	e000      	b.n	8004866 <NVIC_EncodePriority+0x32>
 8004864:	2300      	movs	r3, #0
 8004866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004868:	f04f 32ff 	mov.w	r2, #4294967295
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	43da      	mvns	r2, r3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	401a      	ands	r2, r3
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800487c:	f04f 31ff 	mov.w	r1, #4294967295
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	fa01 f303 	lsl.w	r3, r1, r3
 8004886:	43d9      	mvns	r1, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800488c:	4313      	orrs	r3, r2
         );
}
 800488e:	4618      	mov	r0, r3
 8004890:	3724      	adds	r7, #36	@ 0x24
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
	...

0800489c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048ac:	d301      	bcc.n	80048b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048ae:	2301      	movs	r3, #1
 80048b0:	e00f      	b.n	80048d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048b2:	4a0a      	ldr	r2, [pc, #40]	@ (80048dc <SysTick_Config+0x40>)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048ba:	210f      	movs	r1, #15
 80048bc:	f04f 30ff 	mov.w	r0, #4294967295
 80048c0:	f7ff ff8e 	bl	80047e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048c4:	4b05      	ldr	r3, [pc, #20]	@ (80048dc <SysTick_Config+0x40>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048ca:	4b04      	ldr	r3, [pc, #16]	@ (80048dc <SysTick_Config+0x40>)
 80048cc:	2207      	movs	r2, #7
 80048ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	e000e010 	.word	0xe000e010

080048e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7ff ff29 	bl	8004740 <__NVIC_SetPriorityGrouping>
}
 80048ee:	bf00      	nop
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b086      	sub	sp, #24
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	4603      	mov	r3, r0
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	607a      	str	r2, [r7, #4]
 8004902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004908:	f7ff ff3e 	bl	8004788 <__NVIC_GetPriorityGrouping>
 800490c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	68b9      	ldr	r1, [r7, #8]
 8004912:	6978      	ldr	r0, [r7, #20]
 8004914:	f7ff ff8e 	bl	8004834 <NVIC_EncodePriority>
 8004918:	4602      	mov	r2, r0
 800491a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800491e:	4611      	mov	r1, r2
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff ff5d 	bl	80047e0 <__NVIC_SetPriority>
}
 8004926:	bf00      	nop
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b082      	sub	sp, #8
 8004932:	af00      	add	r7, sp, #0
 8004934:	4603      	mov	r3, r0
 8004936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff ff31 	bl	80047a4 <__NVIC_EnableIRQ>
}
 8004942:	bf00      	nop
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b082      	sub	sp, #8
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7ff ffa2 	bl	800489c <SysTick_Config>
 8004958:	4603      	mov	r3, r0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b084      	sub	sp, #16
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800496e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004970:	f7ff feb6 	bl	80046e0 <HAL_GetTick>
 8004974:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d008      	beq.n	8004994 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2280      	movs	r2, #128	@ 0x80
 8004986:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e052      	b.n	8004a3a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0216 	bic.w	r2, r2, #22
 80049a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695a      	ldr	r2, [r3, #20]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049b2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d103      	bne.n	80049c4 <HAL_DMA_Abort+0x62>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d007      	beq.n	80049d4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0208 	bic.w	r2, r2, #8
 80049d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0201 	bic.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049e4:	e013      	b.n	8004a0e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049e6:	f7ff fe7b 	bl	80046e0 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b05      	cmp	r3, #5
 80049f2:	d90c      	bls.n	8004a0e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2220      	movs	r2, #32
 80049f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2203      	movs	r2, #3
 80049fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e015      	b.n	8004a3a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1e4      	bne.n	80049e6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a20:	223f      	movs	r2, #63	@ 0x3f
 8004a22:	409a      	lsls	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d004      	beq.n	8004a60 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2280      	movs	r2, #128	@ 0x80
 8004a5a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e00c      	b.n	8004a7a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2205      	movs	r2, #5
 8004a64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0201 	bic.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
	...

08004a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b089      	sub	sp, #36	@ 0x24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61fb      	str	r3, [r7, #28]
 8004aa2:	e165      	b.n	8004d70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	f040 8154 	bne.w	8004d6a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d005      	beq.n	8004ada <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d130      	bne.n	8004b3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	2203      	movs	r2, #3
 8004ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aea:	43db      	mvns	r3, r3
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	4013      	ands	r3, r2
 8004af0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b10:	2201      	movs	r2, #1
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	fa02 f303 	lsl.w	r3, r2, r3
 8004b18:	43db      	mvns	r3, r3
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	091b      	lsrs	r3, r3, #4
 8004b26:	f003 0201 	and.w	r2, r3, #1
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f003 0303 	and.w	r3, r3, #3
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d017      	beq.n	8004b78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	2203      	movs	r2, #3
 8004b54:	fa02 f303 	lsl.w	r3, r2, r3
 8004b58:	43db      	mvns	r3, r3
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f003 0303 	and.w	r3, r3, #3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d123      	bne.n	8004bcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	08da      	lsrs	r2, r3, #3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3208      	adds	r2, #8
 8004b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	220f      	movs	r2, #15
 8004b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba0:	43db      	mvns	r3, r3
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	691a      	ldr	r2, [r3, #16]
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	08da      	lsrs	r2, r3, #3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	3208      	adds	r2, #8
 8004bc6:	69b9      	ldr	r1, [r7, #24]
 8004bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	2203      	movs	r2, #3
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	43db      	mvns	r3, r3
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	4013      	ands	r3, r2
 8004be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f003 0203 	and.w	r2, r3, #3
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 80ae 	beq.w	8004d6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	4b5d      	ldr	r3, [pc, #372]	@ (8004d88 <HAL_GPIO_Init+0x300>)
 8004c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c16:	4a5c      	ldr	r2, [pc, #368]	@ (8004d88 <HAL_GPIO_Init+0x300>)
 8004c18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c1e:	4b5a      	ldr	r3, [pc, #360]	@ (8004d88 <HAL_GPIO_Init+0x300>)
 8004c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c2a:	4a58      	ldr	r2, [pc, #352]	@ (8004d8c <HAL_GPIO_Init+0x304>)
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	089b      	lsrs	r3, r3, #2
 8004c30:	3302      	adds	r3, #2
 8004c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	220f      	movs	r2, #15
 8004c42:	fa02 f303 	lsl.w	r3, r2, r3
 8004c46:	43db      	mvns	r3, r3
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a4f      	ldr	r2, [pc, #316]	@ (8004d90 <HAL_GPIO_Init+0x308>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d025      	beq.n	8004ca2 <HAL_GPIO_Init+0x21a>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a4e      	ldr	r2, [pc, #312]	@ (8004d94 <HAL_GPIO_Init+0x30c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d01f      	beq.n	8004c9e <HAL_GPIO_Init+0x216>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a4d      	ldr	r2, [pc, #308]	@ (8004d98 <HAL_GPIO_Init+0x310>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d019      	beq.n	8004c9a <HAL_GPIO_Init+0x212>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a4c      	ldr	r2, [pc, #304]	@ (8004d9c <HAL_GPIO_Init+0x314>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d013      	beq.n	8004c96 <HAL_GPIO_Init+0x20e>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a4b      	ldr	r2, [pc, #300]	@ (8004da0 <HAL_GPIO_Init+0x318>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d00d      	beq.n	8004c92 <HAL_GPIO_Init+0x20a>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a4a      	ldr	r2, [pc, #296]	@ (8004da4 <HAL_GPIO_Init+0x31c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d007      	beq.n	8004c8e <HAL_GPIO_Init+0x206>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a49      	ldr	r2, [pc, #292]	@ (8004da8 <HAL_GPIO_Init+0x320>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d101      	bne.n	8004c8a <HAL_GPIO_Init+0x202>
 8004c86:	2306      	movs	r3, #6
 8004c88:	e00c      	b.n	8004ca4 <HAL_GPIO_Init+0x21c>
 8004c8a:	2307      	movs	r3, #7
 8004c8c:	e00a      	b.n	8004ca4 <HAL_GPIO_Init+0x21c>
 8004c8e:	2305      	movs	r3, #5
 8004c90:	e008      	b.n	8004ca4 <HAL_GPIO_Init+0x21c>
 8004c92:	2304      	movs	r3, #4
 8004c94:	e006      	b.n	8004ca4 <HAL_GPIO_Init+0x21c>
 8004c96:	2303      	movs	r3, #3
 8004c98:	e004      	b.n	8004ca4 <HAL_GPIO_Init+0x21c>
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	e002      	b.n	8004ca4 <HAL_GPIO_Init+0x21c>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e000      	b.n	8004ca4 <HAL_GPIO_Init+0x21c>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	69fa      	ldr	r2, [r7, #28]
 8004ca6:	f002 0203 	and.w	r2, r2, #3
 8004caa:	0092      	lsls	r2, r2, #2
 8004cac:	4093      	lsls	r3, r2
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cb4:	4935      	ldr	r1, [pc, #212]	@ (8004d8c <HAL_GPIO_Init+0x304>)
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	089b      	lsrs	r3, r3, #2
 8004cba:	3302      	adds	r3, #2
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cc2:	4b3a      	ldr	r3, [pc, #232]	@ (8004dac <HAL_GPIO_Init+0x324>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	43db      	mvns	r3, r3
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ce6:	4a31      	ldr	r2, [pc, #196]	@ (8004dac <HAL_GPIO_Init+0x324>)
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004cec:	4b2f      	ldr	r3, [pc, #188]	@ (8004dac <HAL_GPIO_Init+0x324>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	43db      	mvns	r3, r3
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d003      	beq.n	8004d10 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d10:	4a26      	ldr	r2, [pc, #152]	@ (8004dac <HAL_GPIO_Init+0x324>)
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d16:	4b25      	ldr	r3, [pc, #148]	@ (8004dac <HAL_GPIO_Init+0x324>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	43db      	mvns	r3, r3
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	4013      	ands	r3, r2
 8004d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d3a:	4a1c      	ldr	r2, [pc, #112]	@ (8004dac <HAL_GPIO_Init+0x324>)
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d40:	4b1a      	ldr	r3, [pc, #104]	@ (8004dac <HAL_GPIO_Init+0x324>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	43db      	mvns	r3, r3
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004d5c:	69ba      	ldr	r2, [r7, #24]
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d64:	4a11      	ldr	r2, [pc, #68]	@ (8004dac <HAL_GPIO_Init+0x324>)
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	61fb      	str	r3, [r7, #28]
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	2b0f      	cmp	r3, #15
 8004d74:	f67f ae96 	bls.w	8004aa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d78:	bf00      	nop
 8004d7a:	bf00      	nop
 8004d7c:	3724      	adds	r7, #36	@ 0x24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	40013800 	.word	0x40013800
 8004d90:	40020000 	.word	0x40020000
 8004d94:	40020400 	.word	0x40020400
 8004d98:	40020800 	.word	0x40020800
 8004d9c:	40020c00 	.word	0x40020c00
 8004da0:	40021000 	.word	0x40021000
 8004da4:	40021400 	.word	0x40021400
 8004da8:	40021800 	.word	0x40021800
 8004dac:	40013c00 	.word	0x40013c00

08004db0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	460b      	mov	r3, r1
 8004dba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691a      	ldr	r2, [r3, #16]
 8004dc0:	887b      	ldrh	r3, [r7, #2]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	73fb      	strb	r3, [r7, #15]
 8004dcc:	e001      	b.n	8004dd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	807b      	strh	r3, [r7, #2]
 8004dec:	4613      	mov	r3, r2
 8004dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004df0:	787b      	ldrb	r3, [r7, #1]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004df6:	887a      	ldrh	r2, [r7, #2]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004dfc:	e003      	b.n	8004e06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004dfe:	887b      	ldrh	r3, [r7, #2]
 8004e00:	041a      	lsls	r2, r3, #16
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	619a      	str	r2, [r3, #24]
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b085      	sub	sp, #20
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e24:	887a      	ldrh	r2, [r7, #2]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	041a      	lsls	r2, r3, #16
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	43d9      	mvns	r1, r3
 8004e30:	887b      	ldrh	r3, [r7, #2]
 8004e32:	400b      	ands	r3, r1
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	619a      	str	r2, [r3, #24]
}
 8004e3a:	bf00      	nop
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
	...

08004e48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e12b      	b.n	80050b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7ff fa32 	bl	80042d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2224      	movs	r2, #36	@ 0x24
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0201 	bic.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004eaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004eac:	f001 fe20 	bl	8006af0 <HAL_RCC_GetPCLK1Freq>
 8004eb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	4a81      	ldr	r2, [pc, #516]	@ (80050bc <HAL_I2C_Init+0x274>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d807      	bhi.n	8004ecc <HAL_I2C_Init+0x84>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4a80      	ldr	r2, [pc, #512]	@ (80050c0 <HAL_I2C_Init+0x278>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	bf94      	ite	ls
 8004ec4:	2301      	movls	r3, #1
 8004ec6:	2300      	movhi	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	e006      	b.n	8004eda <HAL_I2C_Init+0x92>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4a7d      	ldr	r2, [pc, #500]	@ (80050c4 <HAL_I2C_Init+0x27c>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	bf94      	ite	ls
 8004ed4:	2301      	movls	r3, #1
 8004ed6:	2300      	movhi	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e0e7      	b.n	80050b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	4a78      	ldr	r2, [pc, #480]	@ (80050c8 <HAL_I2C_Init+0x280>)
 8004ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eea:	0c9b      	lsrs	r3, r3, #18
 8004eec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	4a6a      	ldr	r2, [pc, #424]	@ (80050bc <HAL_I2C_Init+0x274>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d802      	bhi.n	8004f1c <HAL_I2C_Init+0xd4>
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	e009      	b.n	8004f30 <HAL_I2C_Init+0xe8>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004f22:	fb02 f303 	mul.w	r3, r2, r3
 8004f26:	4a69      	ldr	r2, [pc, #420]	@ (80050cc <HAL_I2C_Init+0x284>)
 8004f28:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2c:	099b      	lsrs	r3, r3, #6
 8004f2e:	3301      	adds	r3, #1
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6812      	ldr	r2, [r2, #0]
 8004f34:	430b      	orrs	r3, r1
 8004f36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004f42:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	495c      	ldr	r1, [pc, #368]	@ (80050bc <HAL_I2C_Init+0x274>)
 8004f4c:	428b      	cmp	r3, r1
 8004f4e:	d819      	bhi.n	8004f84 <HAL_I2C_Init+0x13c>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	1e59      	subs	r1, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f5e:	1c59      	adds	r1, r3, #1
 8004f60:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004f64:	400b      	ands	r3, r1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <HAL_I2C_Init+0x138>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	1e59      	subs	r1, r3, #1
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f78:	3301      	adds	r3, #1
 8004f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f7e:	e051      	b.n	8005024 <HAL_I2C_Init+0x1dc>
 8004f80:	2304      	movs	r3, #4
 8004f82:	e04f      	b.n	8005024 <HAL_I2C_Init+0x1dc>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d111      	bne.n	8004fb0 <HAL_I2C_Init+0x168>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	1e58      	subs	r0, r3, #1
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6859      	ldr	r1, [r3, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	440b      	add	r3, r1
 8004f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	bf0c      	ite	eq
 8004fa8:	2301      	moveq	r3, #1
 8004faa:	2300      	movne	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	e012      	b.n	8004fd6 <HAL_I2C_Init+0x18e>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	1e58      	subs	r0, r3, #1
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6859      	ldr	r1, [r3, #4]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	0099      	lsls	r1, r3, #2
 8004fc0:	440b      	add	r3, r1
 8004fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	bf0c      	ite	eq
 8004fd0:	2301      	moveq	r3, #1
 8004fd2:	2300      	movne	r3, #0
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <HAL_I2C_Init+0x196>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e022      	b.n	8005024 <HAL_I2C_Init+0x1dc>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10e      	bne.n	8005004 <HAL_I2C_Init+0x1bc>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	1e58      	subs	r0, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6859      	ldr	r1, [r3, #4]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	440b      	add	r3, r1
 8004ff4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ffe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005002:	e00f      	b.n	8005024 <HAL_I2C_Init+0x1dc>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	1e58      	subs	r0, r3, #1
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6859      	ldr	r1, [r3, #4]
 800500c:	460b      	mov	r3, r1
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	440b      	add	r3, r1
 8005012:	0099      	lsls	r1, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	fbb0 f3f3 	udiv	r3, r0, r3
 800501a:	3301      	adds	r3, #1
 800501c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005020:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	6809      	ldr	r1, [r1, #0]
 8005028:	4313      	orrs	r3, r2
 800502a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	69da      	ldr	r2, [r3, #28]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005052:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6911      	ldr	r1, [r2, #16]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	68d2      	ldr	r2, [r2, #12]
 800505e:	4311      	orrs	r1, r2
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6812      	ldr	r2, [r2, #0]
 8005064:	430b      	orrs	r3, r1
 8005066:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	695a      	ldr	r2, [r3, #20]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0201 	orr.w	r2, r2, #1
 8005092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2220      	movs	r2, #32
 800509e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	000186a0 	.word	0x000186a0
 80050c0:	001e847f 	.word	0x001e847f
 80050c4:	003d08ff 	.word	0x003d08ff
 80050c8:	431bde83 	.word	0x431bde83
 80050cc:	10624dd3 	.word	0x10624dd3

080050d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af02      	add	r7, sp, #8
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	607a      	str	r2, [r7, #4]
 80050da:	461a      	mov	r2, r3
 80050dc:	460b      	mov	r3, r1
 80050de:	817b      	strh	r3, [r7, #10]
 80050e0:	4613      	mov	r3, r2
 80050e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050e4:	f7ff fafc 	bl	80046e0 <HAL_GetTick>
 80050e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b20      	cmp	r3, #32
 80050f4:	f040 80e0 	bne.w	80052b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	2319      	movs	r3, #25
 80050fe:	2201      	movs	r2, #1
 8005100:	4970      	ldr	r1, [pc, #448]	@ (80052c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f001 fa24 	bl	8006550 <I2C_WaitOnFlagUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800510e:	2302      	movs	r3, #2
 8005110:	e0d3      	b.n	80052ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_I2C_Master_Transmit+0x50>
 800511c:	2302      	movs	r3, #2
 800511e:	e0cc      	b.n	80052ba <HAL_I2C_Master_Transmit+0x1ea>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b01      	cmp	r3, #1
 8005134:	d007      	beq.n	8005146 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f042 0201 	orr.w	r2, r2, #1
 8005144:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005154:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2221      	movs	r2, #33	@ 0x21
 800515a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2210      	movs	r2, #16
 8005162:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	893a      	ldrh	r2, [r7, #8]
 8005176:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4a50      	ldr	r2, [pc, #320]	@ (80052c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8005186:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005188:	8979      	ldrh	r1, [r7, #10]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	6a3a      	ldr	r2, [r7, #32]
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 ff10 	bl	8005fb4 <I2C_MasterRequestWrite>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e08d      	b.n	80052ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800519e:	2300      	movs	r3, #0
 80051a0:	613b      	str	r3, [r7, #16]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	613b      	str	r3, [r7, #16]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80051b4:	e066      	b.n	8005284 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	6a39      	ldr	r1, [r7, #32]
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f001 fa9e 	bl	80066fc <I2C_WaitOnTXEFlagUntilTimeout>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00d      	beq.n	80051e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d107      	bne.n	80051de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e06b      	b.n	80052ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e6:	781a      	ldrb	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800520a:	3b01      	subs	r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b04      	cmp	r3, #4
 800521e:	d11b      	bne.n	8005258 <HAL_I2C_Master_Transmit+0x188>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005224:	2b00      	cmp	r3, #0
 8005226:	d017      	beq.n	8005258 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522c:	781a      	ldrb	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005242:	b29b      	uxth	r3, r3
 8005244:	3b01      	subs	r3, #1
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005250:	3b01      	subs	r3, #1
 8005252:	b29a      	uxth	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	6a39      	ldr	r1, [r7, #32]
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f001 fa8e 	bl	800677e <I2C_WaitOnBTFFlagUntilTimeout>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00d      	beq.n	8005284 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526c:	2b04      	cmp	r3, #4
 800526e:	d107      	bne.n	8005280 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800527e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e01a      	b.n	80052ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005288:	2b00      	cmp	r3, #0
 800528a:	d194      	bne.n	80051b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800529a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80052b4:	2300      	movs	r3, #0
 80052b6:	e000      	b.n	80052ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80052b8:	2302      	movs	r3, #2
  }
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	00100002 	.word	0x00100002
 80052c8:	ffff0000 	.word	0xffff0000

080052cc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08c      	sub	sp, #48	@ 0x30
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	607a      	str	r2, [r7, #4]
 80052d6:	461a      	mov	r2, r3
 80052d8:	460b      	mov	r3, r1
 80052da:	817b      	strh	r3, [r7, #10]
 80052dc:	4613      	mov	r3, r2
 80052de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052e0:	f7ff f9fe 	bl	80046e0 <HAL_GetTick>
 80052e4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b20      	cmp	r3, #32
 80052f0:	f040 820b 	bne.w	800570a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	2319      	movs	r3, #25
 80052fa:	2201      	movs	r2, #1
 80052fc:	497c      	ldr	r1, [pc, #496]	@ (80054f0 <HAL_I2C_Master_Receive+0x224>)
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f001 f926 	bl	8006550 <I2C_WaitOnFlagUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800530a:	2302      	movs	r3, #2
 800530c:	e1fe      	b.n	800570c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_I2C_Master_Receive+0x50>
 8005318:	2302      	movs	r3, #2
 800531a:	e1f7      	b.n	800570c <HAL_I2C_Master_Receive+0x440>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b01      	cmp	r3, #1
 8005330:	d007      	beq.n	8005342 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f042 0201 	orr.w	r2, r2, #1
 8005340:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005350:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2222      	movs	r2, #34	@ 0x22
 8005356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2210      	movs	r2, #16
 800535e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	893a      	ldrh	r2, [r7, #8]
 8005372:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005378:	b29a      	uxth	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4a5c      	ldr	r2, [pc, #368]	@ (80054f4 <HAL_I2C_Master_Receive+0x228>)
 8005382:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005384:	8979      	ldrh	r1, [r7, #10]
 8005386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005388:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 fe94 	bl	80060b8 <I2C_MasterRequestRead>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e1b8      	b.n	800570c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d113      	bne.n	80053ca <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053a2:	2300      	movs	r3, #0
 80053a4:	623b      	str	r3, [r7, #32]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	623b      	str	r3, [r7, #32]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	623b      	str	r3, [r7, #32]
 80053b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	e18c      	b.n	80056e4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d11b      	bne.n	800540a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053e2:	2300      	movs	r3, #0
 80053e4:	61fb      	str	r3, [r7, #28]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	61fb      	str	r3, [r7, #28]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	61fb      	str	r3, [r7, #28]
 80053f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005406:	601a      	str	r2, [r3, #0]
 8005408:	e16c      	b.n	80056e4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800540e:	2b02      	cmp	r3, #2
 8005410:	d11b      	bne.n	800544a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005420:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005430:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005432:	2300      	movs	r3, #0
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	61bb      	str	r3, [r7, #24]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	61bb      	str	r3, [r7, #24]
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	e14c      	b.n	80056e4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005458:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800545a:	2300      	movs	r3, #0
 800545c:	617b      	str	r3, [r7, #20]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	617b      	str	r3, [r7, #20]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	617b      	str	r3, [r7, #20]
 800546e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005470:	e138      	b.n	80056e4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005476:	2b03      	cmp	r3, #3
 8005478:	f200 80f1 	bhi.w	800565e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005480:	2b01      	cmp	r3, #1
 8005482:	d123      	bne.n	80054cc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005484:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005486:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f001 f9b9 	bl	8006800 <I2C_WaitOnRXNEFlagUntilTimeout>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d001      	beq.n	8005498 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e139      	b.n	800570c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691a      	ldr	r2, [r3, #16]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054aa:	1c5a      	adds	r2, r3, #1
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	3b01      	subs	r3, #1
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80054ca:	e10b      	b.n	80056e4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d14e      	bne.n	8005572 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054da:	2200      	movs	r2, #0
 80054dc:	4906      	ldr	r1, [pc, #24]	@ (80054f8 <HAL_I2C_Master_Receive+0x22c>)
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f001 f836 	bl	8006550 <I2C_WaitOnFlagUntilTimeout>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d008      	beq.n	80054fc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e10e      	b.n	800570c <HAL_I2C_Master_Receive+0x440>
 80054ee:	bf00      	nop
 80054f0:	00100002 	.word	0x00100002
 80054f4:	ffff0000 	.word	0xffff0000
 80054f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800550a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	691a      	ldr	r2, [r3, #16]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005528:	3b01      	subs	r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005534:	b29b      	uxth	r3, r3
 8005536:	3b01      	subs	r3, #1
 8005538:	b29a      	uxth	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	691a      	ldr	r2, [r3, #16]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005548:	b2d2      	uxtb	r2, r2
 800554a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800555a:	3b01      	subs	r3, #1
 800555c:	b29a      	uxth	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005566:	b29b      	uxth	r3, r3
 8005568:	3b01      	subs	r3, #1
 800556a:	b29a      	uxth	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005570:	e0b8      	b.n	80056e4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005578:	2200      	movs	r2, #0
 800557a:	4966      	ldr	r1, [pc, #408]	@ (8005714 <HAL_I2C_Master_Receive+0x448>)
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 ffe7 	bl	8006550 <I2C_WaitOnFlagUntilTimeout>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e0bf      	b.n	800570c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800559a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	691a      	ldr	r2, [r3, #16]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	3b01      	subs	r3, #1
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d4:	2200      	movs	r2, #0
 80055d6:	494f      	ldr	r1, [pc, #316]	@ (8005714 <HAL_I2C_Master_Receive+0x448>)
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 ffb9 	bl	8006550 <I2C_WaitOnFlagUntilTimeout>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e091      	b.n	800570c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	691a      	ldr	r2, [r3, #16]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560a:	1c5a      	adds	r2, r3, #1
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005614:	3b01      	subs	r3, #1
 8005616:	b29a      	uxth	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005620:	b29b      	uxth	r3, r3
 8005622:	3b01      	subs	r3, #1
 8005624:	b29a      	uxth	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	691a      	ldr	r2, [r3, #16]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005634:	b2d2      	uxtb	r2, r2
 8005636:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563c:	1c5a      	adds	r2, r3, #1
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005646:	3b01      	subs	r3, #1
 8005648:	b29a      	uxth	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005652:	b29b      	uxth	r3, r3
 8005654:	3b01      	subs	r3, #1
 8005656:	b29a      	uxth	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800565c:	e042      	b.n	80056e4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800565e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005660:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f001 f8cc 	bl	8006800 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e04c      	b.n	800570c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	691a      	ldr	r2, [r3, #16]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567c:	b2d2      	uxtb	r2, r2
 800567e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005684:	1c5a      	adds	r2, r3, #1
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800568e:	3b01      	subs	r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800569a:	b29b      	uxth	r3, r3
 800569c:	3b01      	subs	r3, #1
 800569e:	b29a      	uxth	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	f003 0304 	and.w	r3, r3, #4
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	d118      	bne.n	80056e4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	691a      	ldr	r2, [r3, #16]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056bc:	b2d2      	uxtb	r2, r2
 80056be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056ce:	3b01      	subs	r3, #1
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056da:	b29b      	uxth	r3, r3
 80056dc:	3b01      	subs	r3, #1
 80056de:	b29a      	uxth	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f47f aec2 	bne.w	8005472 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	e000      	b.n	800570c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800570a:	2302      	movs	r3, #2
  }
}
 800570c:	4618      	mov	r0, r3
 800570e:	3728      	adds	r7, #40	@ 0x28
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	00010004 	.word	0x00010004

08005718 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b088      	sub	sp, #32
 800571c:	af02      	add	r7, sp, #8
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	4608      	mov	r0, r1
 8005722:	4611      	mov	r1, r2
 8005724:	461a      	mov	r2, r3
 8005726:	4603      	mov	r3, r0
 8005728:	817b      	strh	r3, [r7, #10]
 800572a:	460b      	mov	r3, r1
 800572c:	813b      	strh	r3, [r7, #8]
 800572e:	4613      	mov	r3, r2
 8005730:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005732:	f7fe ffd5 	bl	80046e0 <HAL_GetTick>
 8005736:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b20      	cmp	r3, #32
 8005742:	f040 80d9 	bne.w	80058f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	2319      	movs	r3, #25
 800574c:	2201      	movs	r2, #1
 800574e:	496d      	ldr	r1, [pc, #436]	@ (8005904 <HAL_I2C_Mem_Write+0x1ec>)
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 fefd 	bl	8006550 <I2C_WaitOnFlagUntilTimeout>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800575c:	2302      	movs	r3, #2
 800575e:	e0cc      	b.n	80058fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005766:	2b01      	cmp	r3, #1
 8005768:	d101      	bne.n	800576e <HAL_I2C_Mem_Write+0x56>
 800576a:	2302      	movs	r3, #2
 800576c:	e0c5      	b.n	80058fa <HAL_I2C_Mem_Write+0x1e2>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b01      	cmp	r3, #1
 8005782:	d007      	beq.n	8005794 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2221      	movs	r2, #33	@ 0x21
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2240      	movs	r2, #64	@ 0x40
 80057b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a3a      	ldr	r2, [r7, #32]
 80057be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80057c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4a4d      	ldr	r2, [pc, #308]	@ (8005908 <HAL_I2C_Mem_Write+0x1f0>)
 80057d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057d6:	88f8      	ldrh	r0, [r7, #6]
 80057d8:	893a      	ldrh	r2, [r7, #8]
 80057da:	8979      	ldrh	r1, [r7, #10]
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	9301      	str	r3, [sp, #4]
 80057e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	4603      	mov	r3, r0
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 fd34 	bl	8006254 <I2C_RequestMemoryWrite>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d052      	beq.n	8005898 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e081      	b.n	80058fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 ff7e 	bl	80066fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00d      	beq.n	8005822 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580a:	2b04      	cmp	r3, #4
 800580c:	d107      	bne.n	800581e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800581c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e06b      	b.n	80058fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005826:	781a      	ldrb	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800583c:	3b01      	subs	r3, #1
 800583e:	b29a      	uxth	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005848:	b29b      	uxth	r3, r3
 800584a:	3b01      	subs	r3, #1
 800584c:	b29a      	uxth	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b04      	cmp	r3, #4
 800585e:	d11b      	bne.n	8005898 <HAL_I2C_Mem_Write+0x180>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005864:	2b00      	cmp	r3, #0
 8005866:	d017      	beq.n	8005898 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586c:	781a      	ldrb	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005882:	3b01      	subs	r3, #1
 8005884:	b29a      	uxth	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1aa      	bne.n	80057f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 ff6a 	bl	800677e <I2C_WaitOnBTFFlagUntilTimeout>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00d      	beq.n	80058cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b4:	2b04      	cmp	r3, #4
 80058b6:	d107      	bne.n	80058c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e016      	b.n	80058fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2220      	movs	r2, #32
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80058f4:	2300      	movs	r3, #0
 80058f6:	e000      	b.n	80058fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80058f8:	2302      	movs	r3, #2
  }
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	00100002 	.word	0x00100002
 8005908:	ffff0000 	.word	0xffff0000

0800590c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b08c      	sub	sp, #48	@ 0x30
 8005910:	af02      	add	r7, sp, #8
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	4608      	mov	r0, r1
 8005916:	4611      	mov	r1, r2
 8005918:	461a      	mov	r2, r3
 800591a:	4603      	mov	r3, r0
 800591c:	817b      	strh	r3, [r7, #10]
 800591e:	460b      	mov	r3, r1
 8005920:	813b      	strh	r3, [r7, #8]
 8005922:	4613      	mov	r3, r2
 8005924:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005926:	f7fe fedb 	bl	80046e0 <HAL_GetTick>
 800592a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b20      	cmp	r3, #32
 8005936:	f040 8208 	bne.w	8005d4a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	2319      	movs	r3, #25
 8005940:	2201      	movs	r2, #1
 8005942:	497b      	ldr	r1, [pc, #492]	@ (8005b30 <HAL_I2C_Mem_Read+0x224>)
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 fe03 	bl	8006550 <I2C_WaitOnFlagUntilTimeout>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005950:	2302      	movs	r3, #2
 8005952:	e1fb      	b.n	8005d4c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800595a:	2b01      	cmp	r3, #1
 800595c:	d101      	bne.n	8005962 <HAL_I2C_Mem_Read+0x56>
 800595e:	2302      	movs	r3, #2
 8005960:	e1f4      	b.n	8005d4c <HAL_I2C_Mem_Read+0x440>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b01      	cmp	r3, #1
 8005976:	d007      	beq.n	8005988 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0201 	orr.w	r2, r2, #1
 8005986:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005996:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2222      	movs	r2, #34	@ 0x22
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2240      	movs	r2, #64	@ 0x40
 80059a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80059b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4a5b      	ldr	r2, [pc, #364]	@ (8005b34 <HAL_I2C_Mem_Read+0x228>)
 80059c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059ca:	88f8      	ldrh	r0, [r7, #6]
 80059cc:	893a      	ldrh	r2, [r7, #8]
 80059ce:	8979      	ldrh	r1, [r7, #10]
 80059d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d2:	9301      	str	r3, [sp, #4]
 80059d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	4603      	mov	r3, r0
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 fcd0 	bl	8006380 <I2C_RequestMemoryRead>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e1b0      	b.n	8005d4c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d113      	bne.n	8005a1a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059f2:	2300      	movs	r3, #0
 80059f4:	623b      	str	r3, [r7, #32]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	623b      	str	r3, [r7, #32]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	623b      	str	r3, [r7, #32]
 8005a06:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a16:	601a      	str	r2, [r3, #0]
 8005a18:	e184      	b.n	8005d24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d11b      	bne.n	8005a5a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a32:	2300      	movs	r3, #0
 8005a34:	61fb      	str	r3, [r7, #28]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	61fb      	str	r3, [r7, #28]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	61fb      	str	r3, [r7, #28]
 8005a46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a56:	601a      	str	r2, [r3, #0]
 8005a58:	e164      	b.n	8005d24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d11b      	bne.n	8005a9a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a70:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a82:	2300      	movs	r3, #0
 8005a84:	61bb      	str	r3, [r7, #24]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	61bb      	str	r3, [r7, #24]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	61bb      	str	r3, [r7, #24]
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	e144      	b.n	8005d24 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	617b      	str	r3, [r7, #20]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005ab0:	e138      	b.n	8005d24 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	f200 80f1 	bhi.w	8005c9e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d123      	bne.n	8005b0c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ac6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f000 fe99 	bl	8006800 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e139      	b.n	8005d4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	691a      	ldr	r2, [r3, #16]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005af4:	3b01      	subs	r3, #1
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	3b01      	subs	r3, #1
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005b0a:	e10b      	b.n	8005d24 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d14e      	bne.n	8005bb2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	4906      	ldr	r1, [pc, #24]	@ (8005b38 <HAL_I2C_Mem_Read+0x22c>)
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 fd16 	bl	8006550 <I2C_WaitOnFlagUntilTimeout>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d008      	beq.n	8005b3c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e10e      	b.n	8005d4c <HAL_I2C_Mem_Read+0x440>
 8005b2e:	bf00      	nop
 8005b30:	00100002 	.word	0x00100002
 8005b34:	ffff0000 	.word	0xffff0000
 8005b38:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	691a      	ldr	r2, [r3, #16]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5e:	1c5a      	adds	r2, r3, #1
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	3b01      	subs	r3, #1
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	691a      	ldr	r2, [r3, #16]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b88:	b2d2      	uxtb	r2, r2
 8005b8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b90:	1c5a      	adds	r2, r3, #1
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005bb0:	e0b8      	b.n	8005d24 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb8:	2200      	movs	r2, #0
 8005bba:	4966      	ldr	r1, [pc, #408]	@ (8005d54 <HAL_I2C_Mem_Read+0x448>)
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f000 fcc7 	bl	8006550 <I2C_WaitOnFlagUntilTimeout>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e0bf      	b.n	8005d4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	691a      	ldr	r2, [r3, #16]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bee:	1c5a      	adds	r2, r3, #1
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	3b01      	subs	r3, #1
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c14:	2200      	movs	r2, #0
 8005c16:	494f      	ldr	r1, [pc, #316]	@ (8005d54 <HAL_I2C_Mem_Read+0x448>)
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 fc99 	bl	8006550 <I2C_WaitOnFlagUntilTimeout>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e091      	b.n	8005d4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	691a      	ldr	r2, [r3, #16]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c42:	b2d2      	uxtb	r2, r2
 8005c44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c54:	3b01      	subs	r3, #1
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	691a      	ldr	r2, [r3, #16]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c74:	b2d2      	uxtb	r2, r2
 8005c76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c9c:	e042      	b.n	8005d24 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ca0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 fdac 	bl	8006800 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e04c      	b.n	8005d4c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cbc:	b2d2      	uxtb	r2, r2
 8005cbe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc4:	1c5a      	adds	r2, r3, #1
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	f003 0304 	and.w	r3, r3, #4
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d118      	bne.n	8005d24 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	691a      	ldr	r2, [r3, #16]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfc:	b2d2      	uxtb	r2, r2
 8005cfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f47f aec2 	bne.w	8005ab2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005d46:	2300      	movs	r3, #0
 8005d48:	e000      	b.n	8005d4c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005d4a:	2302      	movs	r3, #2
  }
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3728      	adds	r7, #40	@ 0x28
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	00010004 	.word	0x00010004

08005d58 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b08a      	sub	sp, #40	@ 0x28
 8005d5c:	af02      	add	r7, sp, #8
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	607a      	str	r2, [r7, #4]
 8005d62:	603b      	str	r3, [r7, #0]
 8005d64:	460b      	mov	r3, r1
 8005d66:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005d68:	f7fe fcba 	bl	80046e0 <HAL_GetTick>
 8005d6c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b20      	cmp	r3, #32
 8005d7c:	f040 8111 	bne.w	8005fa2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	2319      	movs	r3, #25
 8005d86:	2201      	movs	r2, #1
 8005d88:	4988      	ldr	r1, [pc, #544]	@ (8005fac <HAL_I2C_IsDeviceReady+0x254>)
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 fbe0 	bl	8006550 <I2C_WaitOnFlagUntilTimeout>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005d96:	2302      	movs	r3, #2
 8005d98:	e104      	b.n	8005fa4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d101      	bne.n	8005da8 <HAL_I2C_IsDeviceReady+0x50>
 8005da4:	2302      	movs	r3, #2
 8005da6:	e0fd      	b.n	8005fa4 <HAL_I2C_IsDeviceReady+0x24c>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d007      	beq.n	8005dce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f042 0201 	orr.w	r2, r2, #1
 8005dcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ddc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2224      	movs	r2, #36	@ 0x24
 8005de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4a70      	ldr	r2, [pc, #448]	@ (8005fb0 <HAL_I2C_IsDeviceReady+0x258>)
 8005df0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e00:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f000 fb9e 	bl	8006550 <I2C_WaitOnFlagUntilTimeout>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00d      	beq.n	8005e36 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e28:	d103      	bne.n	8005e32 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e30:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e0b6      	b.n	8005fa4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e36:	897b      	ldrh	r3, [r7, #10]
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005e44:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005e46:	f7fe fc4b 	bl	80046e0 <HAL_GetTick>
 8005e4a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	bf0c      	ite	eq
 8005e5a:	2301      	moveq	r3, #1
 8005e5c:	2300      	movne	r3, #0
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e70:	bf0c      	ite	eq
 8005e72:	2301      	moveq	r3, #1
 8005e74:	2300      	movne	r3, #0
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005e7a:	e025      	b.n	8005ec8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e7c:	f7fe fc30 	bl	80046e0 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d302      	bcc.n	8005e92 <HAL_I2C_IsDeviceReady+0x13a>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d103      	bne.n	8005e9a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	22a0      	movs	r2, #160	@ 0xa0
 8005e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	bf0c      	ite	eq
 8005ea8:	2301      	moveq	r3, #1
 8005eaa:	2300      	movne	r3, #0
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ebe:	bf0c      	ite	eq
 8005ec0:	2301      	moveq	r3, #1
 8005ec2:	2300      	movne	r3, #0
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2ba0      	cmp	r3, #160	@ 0xa0
 8005ed2:	d005      	beq.n	8005ee0 <HAL_I2C_IsDeviceReady+0x188>
 8005ed4:	7dfb      	ldrb	r3, [r7, #23]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d102      	bne.n	8005ee0 <HAL_I2C_IsDeviceReady+0x188>
 8005eda:	7dbb      	ldrb	r3, [r7, #22]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0cd      	beq.n	8005e7c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d129      	bne.n	8005f4a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f04:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f06:	2300      	movs	r3, #0
 8005f08:	613b      	str	r3, [r7, #16]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	613b      	str	r3, [r7, #16]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	613b      	str	r3, [r7, #16]
 8005f1a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	2319      	movs	r3, #25
 8005f22:	2201      	movs	r2, #1
 8005f24:	4921      	ldr	r1, [pc, #132]	@ (8005fac <HAL_I2C_IsDeviceReady+0x254>)
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 fb12 	bl	8006550 <I2C_WaitOnFlagUntilTimeout>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e036      	b.n	8005fa4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	e02c      	b.n	8005fa4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f58:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f62:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	2319      	movs	r3, #25
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	490f      	ldr	r1, [pc, #60]	@ (8005fac <HAL_I2C_IsDeviceReady+0x254>)
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 faee 	bl	8006550 <I2C_WaitOnFlagUntilTimeout>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e012      	b.n	8005fa4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	3301      	adds	r3, #1
 8005f82:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	f4ff af32 	bcc.w	8005df2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e000      	b.n	8005fa4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005fa2:	2302      	movs	r3, #2
  }
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3720      	adds	r7, #32
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	00100002 	.word	0x00100002
 8005fb0:	ffff0000 	.word	0xffff0000

08005fb4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b088      	sub	sp, #32
 8005fb8:	af02      	add	r7, sp, #8
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	607a      	str	r2, [r7, #4]
 8005fbe:	603b      	str	r3, [r7, #0]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d006      	beq.n	8005fde <I2C_MasterRequestWrite+0x2a>
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d003      	beq.n	8005fde <I2C_MasterRequestWrite+0x2a>
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005fdc:	d108      	bne.n	8005ff0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	e00b      	b.n	8006008 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff4:	2b12      	cmp	r3, #18
 8005ff6:	d107      	bne.n	8006008 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006006:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 fa9b 	bl	8006550 <I2C_WaitOnFlagUntilTimeout>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00d      	beq.n	800603c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800602a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800602e:	d103      	bne.n	8006038 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006036:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e035      	b.n	80060a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006044:	d108      	bne.n	8006058 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006046:	897b      	ldrh	r3, [r7, #10]
 8006048:	b2db      	uxtb	r3, r3
 800604a:	461a      	mov	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006054:	611a      	str	r2, [r3, #16]
 8006056:	e01b      	b.n	8006090 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006058:	897b      	ldrh	r3, [r7, #10]
 800605a:	11db      	asrs	r3, r3, #7
 800605c:	b2db      	uxtb	r3, r3
 800605e:	f003 0306 	and.w	r3, r3, #6
 8006062:	b2db      	uxtb	r3, r3
 8006064:	f063 030f 	orn	r3, r3, #15
 8006068:	b2da      	uxtb	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	490e      	ldr	r1, [pc, #56]	@ (80060b0 <I2C_MasterRequestWrite+0xfc>)
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 fac1 	bl	80065fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e010      	b.n	80060a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006086:	897b      	ldrh	r3, [r7, #10]
 8006088:	b2da      	uxtb	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	4907      	ldr	r1, [pc, #28]	@ (80060b4 <I2C_MasterRequestWrite+0x100>)
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f000 fab1 	bl	80065fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	00010008 	.word	0x00010008
 80060b4:	00010002 	.word	0x00010002

080060b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b088      	sub	sp, #32
 80060bc:	af02      	add	r7, sp, #8
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	607a      	str	r2, [r7, #4]
 80060c2:	603b      	str	r3, [r7, #0]
 80060c4:	460b      	mov	r3, r1
 80060c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80060dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	d006      	beq.n	80060f2 <I2C_MasterRequestRead+0x3a>
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d003      	beq.n	80060f2 <I2C_MasterRequestRead+0x3a>
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80060f0:	d108      	bne.n	8006104 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	e00b      	b.n	800611c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006108:	2b11      	cmp	r3, #17
 800610a:	d107      	bne.n	800611c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800611a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f000 fa11 	bl	8006550 <I2C_WaitOnFlagUntilTimeout>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00d      	beq.n	8006150 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800613e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006142:	d103      	bne.n	800614c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800614a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e079      	b.n	8006244 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006158:	d108      	bne.n	800616c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800615a:	897b      	ldrh	r3, [r7, #10]
 800615c:	b2db      	uxtb	r3, r3
 800615e:	f043 0301 	orr.w	r3, r3, #1
 8006162:	b2da      	uxtb	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	611a      	str	r2, [r3, #16]
 800616a:	e05f      	b.n	800622c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800616c:	897b      	ldrh	r3, [r7, #10]
 800616e:	11db      	asrs	r3, r3, #7
 8006170:	b2db      	uxtb	r3, r3
 8006172:	f003 0306 	and.w	r3, r3, #6
 8006176:	b2db      	uxtb	r3, r3
 8006178:	f063 030f 	orn	r3, r3, #15
 800617c:	b2da      	uxtb	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	4930      	ldr	r1, [pc, #192]	@ (800624c <I2C_MasterRequestRead+0x194>)
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 fa37 	bl	80065fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e054      	b.n	8006244 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800619a:	897b      	ldrh	r3, [r7, #10]
 800619c:	b2da      	uxtb	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	4929      	ldr	r1, [pc, #164]	@ (8006250 <I2C_MasterRequestRead+0x198>)
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 fa27 	bl	80065fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e044      	b.n	8006244 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ba:	2300      	movs	r3, #0
 80061bc:	613b      	str	r3, [r7, #16]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	613b      	str	r3, [r7, #16]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 f9af 	bl	8006550 <I2C_WaitOnFlagUntilTimeout>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00d      	beq.n	8006214 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006206:	d103      	bne.n	8006210 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800620e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e017      	b.n	8006244 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006214:	897b      	ldrh	r3, [r7, #10]
 8006216:	11db      	asrs	r3, r3, #7
 8006218:	b2db      	uxtb	r3, r3
 800621a:	f003 0306 	and.w	r3, r3, #6
 800621e:	b2db      	uxtb	r3, r3
 8006220:	f063 030e 	orn	r3, r3, #14
 8006224:	b2da      	uxtb	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	4907      	ldr	r1, [pc, #28]	@ (8006250 <I2C_MasterRequestRead+0x198>)
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 f9e3 	bl	80065fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	00010008 	.word	0x00010008
 8006250:	00010002 	.word	0x00010002

08006254 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b088      	sub	sp, #32
 8006258:	af02      	add	r7, sp, #8
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	4608      	mov	r0, r1
 800625e:	4611      	mov	r1, r2
 8006260:	461a      	mov	r2, r3
 8006262:	4603      	mov	r3, r0
 8006264:	817b      	strh	r3, [r7, #10]
 8006266:	460b      	mov	r3, r1
 8006268:	813b      	strh	r3, [r7, #8]
 800626a:	4613      	mov	r3, r2
 800626c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800627c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800627e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	6a3b      	ldr	r3, [r7, #32]
 8006284:	2200      	movs	r2, #0
 8006286:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f000 f960 	bl	8006550 <I2C_WaitOnFlagUntilTimeout>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00d      	beq.n	80062b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062a4:	d103      	bne.n	80062ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80062ae:	2303      	movs	r3, #3
 80062b0:	e05f      	b.n	8006372 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062b2:	897b      	ldrh	r3, [r7, #10]
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	461a      	mov	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80062c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c4:	6a3a      	ldr	r2, [r7, #32]
 80062c6:	492d      	ldr	r1, [pc, #180]	@ (800637c <I2C_RequestMemoryWrite+0x128>)
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f000 f998 	bl	80065fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d001      	beq.n	80062d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e04c      	b.n	8006372 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062d8:	2300      	movs	r3, #0
 80062da:	617b      	str	r3, [r7, #20]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	617b      	str	r3, [r7, #20]
 80062ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062f0:	6a39      	ldr	r1, [r7, #32]
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f000 fa02 	bl	80066fc <I2C_WaitOnTXEFlagUntilTimeout>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00d      	beq.n	800631a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006302:	2b04      	cmp	r3, #4
 8006304:	d107      	bne.n	8006316 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006314:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e02b      	b.n	8006372 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800631a:	88fb      	ldrh	r3, [r7, #6]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d105      	bne.n	800632c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006320:	893b      	ldrh	r3, [r7, #8]
 8006322:	b2da      	uxtb	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	611a      	str	r2, [r3, #16]
 800632a:	e021      	b.n	8006370 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800632c:	893b      	ldrh	r3, [r7, #8]
 800632e:	0a1b      	lsrs	r3, r3, #8
 8006330:	b29b      	uxth	r3, r3
 8006332:	b2da      	uxtb	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800633a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800633c:	6a39      	ldr	r1, [r7, #32]
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 f9dc 	bl	80066fc <I2C_WaitOnTXEFlagUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00d      	beq.n	8006366 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634e:	2b04      	cmp	r3, #4
 8006350:	d107      	bne.n	8006362 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006360:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e005      	b.n	8006372 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006366:	893b      	ldrh	r3, [r7, #8]
 8006368:	b2da      	uxtb	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3718      	adds	r7, #24
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	00010002 	.word	0x00010002

08006380 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b088      	sub	sp, #32
 8006384:	af02      	add	r7, sp, #8
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	4608      	mov	r0, r1
 800638a:	4611      	mov	r1, r2
 800638c:	461a      	mov	r2, r3
 800638e:	4603      	mov	r3, r0
 8006390:	817b      	strh	r3, [r7, #10]
 8006392:	460b      	mov	r3, r1
 8006394:	813b      	strh	r3, [r7, #8]
 8006396:	4613      	mov	r3, r2
 8006398:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80063a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 f8c2 	bl	8006550 <I2C_WaitOnFlagUntilTimeout>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00d      	beq.n	80063ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063e0:	d103      	bne.n	80063ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e0aa      	b.n	8006544 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80063ee:	897b      	ldrh	r3, [r7, #10]
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	461a      	mov	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80063fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006400:	6a3a      	ldr	r2, [r7, #32]
 8006402:	4952      	ldr	r1, [pc, #328]	@ (800654c <I2C_RequestMemoryRead+0x1cc>)
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 f8fa 	bl	80065fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e097      	b.n	8006544 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006414:	2300      	movs	r3, #0
 8006416:	617b      	str	r3, [r7, #20]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800642a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800642c:	6a39      	ldr	r1, [r7, #32]
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 f964 	bl	80066fc <I2C_WaitOnTXEFlagUntilTimeout>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00d      	beq.n	8006456 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643e:	2b04      	cmp	r3, #4
 8006440:	d107      	bne.n	8006452 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006450:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e076      	b.n	8006544 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006456:	88fb      	ldrh	r3, [r7, #6]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d105      	bne.n	8006468 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800645c:	893b      	ldrh	r3, [r7, #8]
 800645e:	b2da      	uxtb	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	611a      	str	r2, [r3, #16]
 8006466:	e021      	b.n	80064ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006468:	893b      	ldrh	r3, [r7, #8]
 800646a:	0a1b      	lsrs	r3, r3, #8
 800646c:	b29b      	uxth	r3, r3
 800646e:	b2da      	uxtb	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006478:	6a39      	ldr	r1, [r7, #32]
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f000 f93e 	bl	80066fc <I2C_WaitOnTXEFlagUntilTimeout>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00d      	beq.n	80064a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800648a:	2b04      	cmp	r3, #4
 800648c:	d107      	bne.n	800649e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800649c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e050      	b.n	8006544 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064a2:	893b      	ldrh	r3, [r7, #8]
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064ae:	6a39      	ldr	r1, [r7, #32]
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f000 f923 	bl	80066fc <I2C_WaitOnTXEFlagUntilTimeout>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00d      	beq.n	80064d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c0:	2b04      	cmp	r3, #4
 80064c2:	d107      	bne.n	80064d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e035      	b.n	8006544 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 f82b 	bl	8006550 <I2C_WaitOnFlagUntilTimeout>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00d      	beq.n	800651c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800650a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800650e:	d103      	bne.n	8006518 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006516:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e013      	b.n	8006544 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800651c:	897b      	ldrh	r3, [r7, #10]
 800651e:	b2db      	uxtb	r3, r3
 8006520:	f043 0301 	orr.w	r3, r3, #1
 8006524:	b2da      	uxtb	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800652c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652e:	6a3a      	ldr	r2, [r7, #32]
 8006530:	4906      	ldr	r1, [pc, #24]	@ (800654c <I2C_RequestMemoryRead+0x1cc>)
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f000 f863 	bl	80065fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e000      	b.n	8006544 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3718      	adds	r7, #24
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	00010002 	.word	0x00010002

08006550 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	603b      	str	r3, [r7, #0]
 800655c:	4613      	mov	r3, r2
 800655e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006560:	e025      	b.n	80065ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006568:	d021      	beq.n	80065ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800656a:	f7fe f8b9 	bl	80046e0 <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	429a      	cmp	r2, r3
 8006578:	d302      	bcc.n	8006580 <I2C_WaitOnFlagUntilTimeout+0x30>
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d116      	bne.n	80065ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2220      	movs	r2, #32
 800658a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659a:	f043 0220 	orr.w	r2, r3, #32
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e023      	b.n	80065f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	0c1b      	lsrs	r3, r3, #16
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d10d      	bne.n	80065d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	43da      	mvns	r2, r3
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	4013      	ands	r3, r2
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	bf0c      	ite	eq
 80065ca:	2301      	moveq	r3, #1
 80065cc:	2300      	movne	r3, #0
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	461a      	mov	r2, r3
 80065d2:	e00c      	b.n	80065ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	43da      	mvns	r2, r3
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4013      	ands	r3, r2
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	bf0c      	ite	eq
 80065e6:	2301      	moveq	r3, #1
 80065e8:	2300      	movne	r3, #0
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	461a      	mov	r2, r3
 80065ee:	79fb      	ldrb	r3, [r7, #7]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d0b6      	beq.n	8006562 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b084      	sub	sp, #16
 8006602:	af00      	add	r7, sp, #0
 8006604:	60f8      	str	r0, [r7, #12]
 8006606:	60b9      	str	r1, [r7, #8]
 8006608:	607a      	str	r2, [r7, #4]
 800660a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800660c:	e051      	b.n	80066b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006618:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800661c:	d123      	bne.n	8006666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800662c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006636:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2220      	movs	r2, #32
 8006642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006652:	f043 0204 	orr.w	r2, r3, #4
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e046      	b.n	80066f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666c:	d021      	beq.n	80066b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800666e:	f7fe f837 	bl	80046e0 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	429a      	cmp	r2, r3
 800667c:	d302      	bcc.n	8006684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d116      	bne.n	80066b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2220      	movs	r2, #32
 800668e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800669e:	f043 0220 	orr.w	r2, r3, #32
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e020      	b.n	80066f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	0c1b      	lsrs	r3, r3, #16
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d10c      	bne.n	80066d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	43da      	mvns	r2, r3
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	4013      	ands	r3, r2
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	bf14      	ite	ne
 80066ce:	2301      	movne	r3, #1
 80066d0:	2300      	moveq	r3, #0
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	e00b      	b.n	80066ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	43da      	mvns	r2, r3
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	4013      	ands	r3, r2
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	bf14      	ite	ne
 80066e8:	2301      	movne	r3, #1
 80066ea:	2300      	moveq	r3, #0
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d18d      	bne.n	800660e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006708:	e02d      	b.n	8006766 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f000 f8ce 	bl	80068ac <I2C_IsAcknowledgeFailed>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e02d      	b.n	8006776 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006720:	d021      	beq.n	8006766 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006722:	f7fd ffdd 	bl	80046e0 <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	429a      	cmp	r2, r3
 8006730:	d302      	bcc.n	8006738 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d116      	bne.n	8006766 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2220      	movs	r2, #32
 8006742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006752:	f043 0220 	orr.w	r2, r3, #32
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e007      	b.n	8006776 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006770:	2b80      	cmp	r3, #128	@ 0x80
 8006772:	d1ca      	bne.n	800670a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b084      	sub	sp, #16
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	60b9      	str	r1, [r7, #8]
 8006788:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800678a:	e02d      	b.n	80067e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f000 f88d 	bl	80068ac <I2C_IsAcknowledgeFailed>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d001      	beq.n	800679c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e02d      	b.n	80067f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a2:	d021      	beq.n	80067e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067a4:	f7fd ff9c 	bl	80046e0 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d302      	bcc.n	80067ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d116      	bne.n	80067e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2220      	movs	r2, #32
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d4:	f043 0220 	orr.w	r2, r3, #32
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e007      	b.n	80067f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	f003 0304 	and.w	r3, r3, #4
 80067f2:	2b04      	cmp	r3, #4
 80067f4:	d1ca      	bne.n	800678c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800680c:	e042      	b.n	8006894 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	f003 0310 	and.w	r3, r3, #16
 8006818:	2b10      	cmp	r3, #16
 800681a:	d119      	bne.n	8006850 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f06f 0210 	mvn.w	r2, #16
 8006824:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2220      	movs	r2, #32
 8006830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e029      	b.n	80068a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006850:	f7fd ff46 	bl	80046e0 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	429a      	cmp	r2, r3
 800685e:	d302      	bcc.n	8006866 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d116      	bne.n	8006894 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2220      	movs	r2, #32
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006880:	f043 0220 	orr.w	r2, r3, #32
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e007      	b.n	80068a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800689e:	2b40      	cmp	r3, #64	@ 0x40
 80068a0:	d1b5      	bne.n	800680e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068c2:	d11b      	bne.n	80068fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80068cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e8:	f043 0204 	orr.w	r2, r3, #4
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e000      	b.n	80068fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
	...

0800690c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e0cc      	b.n	8006aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006920:	4b68      	ldr	r3, [pc, #416]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 030f 	and.w	r3, r3, #15
 8006928:	683a      	ldr	r2, [r7, #0]
 800692a:	429a      	cmp	r2, r3
 800692c:	d90c      	bls.n	8006948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800692e:	4b65      	ldr	r3, [pc, #404]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	b2d2      	uxtb	r2, r2
 8006934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006936:	4b63      	ldr	r3, [pc, #396]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 030f 	and.w	r3, r3, #15
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	429a      	cmp	r2, r3
 8006942:	d001      	beq.n	8006948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e0b8      	b.n	8006aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b00      	cmp	r3, #0
 8006952:	d020      	beq.n	8006996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b00      	cmp	r3, #0
 800695e:	d005      	beq.n	800696c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006960:	4b59      	ldr	r3, [pc, #356]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	4a58      	ldr	r2, [pc, #352]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8006966:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800696a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0308 	and.w	r3, r3, #8
 8006974:	2b00      	cmp	r3, #0
 8006976:	d005      	beq.n	8006984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006978:	4b53      	ldr	r3, [pc, #332]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	4a52      	ldr	r2, [pc, #328]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800697e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006984:	4b50      	ldr	r3, [pc, #320]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	494d      	ldr	r1, [pc, #308]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8006992:	4313      	orrs	r3, r2
 8006994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d044      	beq.n	8006a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d107      	bne.n	80069ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069aa:	4b47      	ldr	r3, [pc, #284]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d119      	bne.n	80069ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e07f      	b.n	8006aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d003      	beq.n	80069ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	d107      	bne.n	80069da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ca:	4b3f      	ldr	r3, [pc, #252]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d109      	bne.n	80069ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e06f      	b.n	8006aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069da:	4b3b      	ldr	r3, [pc, #236]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e067      	b.n	8006aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069ea:	4b37      	ldr	r3, [pc, #220]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f023 0203 	bic.w	r2, r3, #3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	4934      	ldr	r1, [pc, #208]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069fc:	f7fd fe70 	bl	80046e0 <HAL_GetTick>
 8006a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a02:	e00a      	b.n	8006a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a04:	f7fd fe6c 	bl	80046e0 <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d901      	bls.n	8006a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e04f      	b.n	8006aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a1a:	4b2b      	ldr	r3, [pc, #172]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f003 020c 	and.w	r2, r3, #12
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d1eb      	bne.n	8006a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a2c:	4b25      	ldr	r3, [pc, #148]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 030f 	and.w	r3, r3, #15
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d20c      	bcs.n	8006a54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a3a:	4b22      	ldr	r3, [pc, #136]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a42:	4b20      	ldr	r3, [pc, #128]	@ (8006ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 030f 	and.w	r3, r3, #15
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d001      	beq.n	8006a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e032      	b.n	8006aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0304 	and.w	r3, r3, #4
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d008      	beq.n	8006a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a60:	4b19      	ldr	r3, [pc, #100]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	4916      	ldr	r1, [pc, #88]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0308 	and.w	r3, r3, #8
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d009      	beq.n	8006a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a7e:	4b12      	ldr	r3, [pc, #72]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	00db      	lsls	r3, r3, #3
 8006a8c:	490e      	ldr	r1, [pc, #56]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a92:	f000 f855 	bl	8006b40 <HAL_RCC_GetSysClockFreq>
 8006a96:	4602      	mov	r2, r0
 8006a98:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	091b      	lsrs	r3, r3, #4
 8006a9e:	f003 030f 	and.w	r3, r3, #15
 8006aa2:	490a      	ldr	r1, [pc, #40]	@ (8006acc <HAL_RCC_ClockConfig+0x1c0>)
 8006aa4:	5ccb      	ldrb	r3, [r1, r3]
 8006aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8006aaa:	4a09      	ldr	r2, [pc, #36]	@ (8006ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8006aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006aae:	4b09      	ldr	r3, [pc, #36]	@ (8006ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fd fdd0 	bl	8004658 <HAL_InitTick>

  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	40023c00 	.word	0x40023c00
 8006ac8:	40023800 	.word	0x40023800
 8006acc:	0800a260 	.word	0x0800a260
 8006ad0:	20000014 	.word	0x20000014
 8006ad4:	20000018 	.word	0x20000018

08006ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006adc:	4b03      	ldr	r3, [pc, #12]	@ (8006aec <HAL_RCC_GetHCLKFreq+0x14>)
 8006ade:	681b      	ldr	r3, [r3, #0]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	20000014 	.word	0x20000014

08006af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006af4:	f7ff fff0 	bl	8006ad8 <HAL_RCC_GetHCLKFreq>
 8006af8:	4602      	mov	r2, r0
 8006afa:	4b05      	ldr	r3, [pc, #20]	@ (8006b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	0a9b      	lsrs	r3, r3, #10
 8006b00:	f003 0307 	and.w	r3, r3, #7
 8006b04:	4903      	ldr	r1, [pc, #12]	@ (8006b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b06:	5ccb      	ldrb	r3, [r1, r3]
 8006b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	40023800 	.word	0x40023800
 8006b14:	0800a270 	.word	0x0800a270

08006b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b1c:	f7ff ffdc 	bl	8006ad8 <HAL_RCC_GetHCLKFreq>
 8006b20:	4602      	mov	r2, r0
 8006b22:	4b05      	ldr	r3, [pc, #20]	@ (8006b38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	0b5b      	lsrs	r3, r3, #13
 8006b28:	f003 0307 	and.w	r3, r3, #7
 8006b2c:	4903      	ldr	r1, [pc, #12]	@ (8006b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b2e:	5ccb      	ldrb	r3, [r1, r3]
 8006b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	40023800 	.word	0x40023800
 8006b3c:	0800a270 	.word	0x0800a270

08006b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b44:	b0ae      	sub	sp, #184	@ 0xb8
 8006b46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006b54:	2300      	movs	r3, #0
 8006b56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006b60:	2300      	movs	r3, #0
 8006b62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b66:	4bcb      	ldr	r3, [pc, #812]	@ (8006e94 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f003 030c 	and.w	r3, r3, #12
 8006b6e:	2b0c      	cmp	r3, #12
 8006b70:	f200 8206 	bhi.w	8006f80 <HAL_RCC_GetSysClockFreq+0x440>
 8006b74:	a201      	add	r2, pc, #4	@ (adr r2, 8006b7c <HAL_RCC_GetSysClockFreq+0x3c>)
 8006b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b7a:	bf00      	nop
 8006b7c:	08006bb1 	.word	0x08006bb1
 8006b80:	08006f81 	.word	0x08006f81
 8006b84:	08006f81 	.word	0x08006f81
 8006b88:	08006f81 	.word	0x08006f81
 8006b8c:	08006bb9 	.word	0x08006bb9
 8006b90:	08006f81 	.word	0x08006f81
 8006b94:	08006f81 	.word	0x08006f81
 8006b98:	08006f81 	.word	0x08006f81
 8006b9c:	08006bc1 	.word	0x08006bc1
 8006ba0:	08006f81 	.word	0x08006f81
 8006ba4:	08006f81 	.word	0x08006f81
 8006ba8:	08006f81 	.word	0x08006f81
 8006bac:	08006db1 	.word	0x08006db1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006bb0:	4bb9      	ldr	r3, [pc, #740]	@ (8006e98 <HAL_RCC_GetSysClockFreq+0x358>)
 8006bb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8006bb6:	e1e7      	b.n	8006f88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006bb8:	4bb8      	ldr	r3, [pc, #736]	@ (8006e9c <HAL_RCC_GetSysClockFreq+0x35c>)
 8006bba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006bbe:	e1e3      	b.n	8006f88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006bc0:	4bb4      	ldr	r3, [pc, #720]	@ (8006e94 <HAL_RCC_GetSysClockFreq+0x354>)
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bcc:	4bb1      	ldr	r3, [pc, #708]	@ (8006e94 <HAL_RCC_GetSysClockFreq+0x354>)
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d071      	beq.n	8006cbc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bd8:	4bae      	ldr	r3, [pc, #696]	@ (8006e94 <HAL_RCC_GetSysClockFreq+0x354>)
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	099b      	lsrs	r3, r3, #6
 8006bde:	2200      	movs	r2, #0
 8006be0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006be4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006be8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006bfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006bfe:	4622      	mov	r2, r4
 8006c00:	462b      	mov	r3, r5
 8006c02:	f04f 0000 	mov.w	r0, #0
 8006c06:	f04f 0100 	mov.w	r1, #0
 8006c0a:	0159      	lsls	r1, r3, #5
 8006c0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c10:	0150      	lsls	r0, r2, #5
 8006c12:	4602      	mov	r2, r0
 8006c14:	460b      	mov	r3, r1
 8006c16:	4621      	mov	r1, r4
 8006c18:	1a51      	subs	r1, r2, r1
 8006c1a:	6439      	str	r1, [r7, #64]	@ 0x40
 8006c1c:	4629      	mov	r1, r5
 8006c1e:	eb63 0301 	sbc.w	r3, r3, r1
 8006c22:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c24:	f04f 0200 	mov.w	r2, #0
 8006c28:	f04f 0300 	mov.w	r3, #0
 8006c2c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8006c30:	4649      	mov	r1, r9
 8006c32:	018b      	lsls	r3, r1, #6
 8006c34:	4641      	mov	r1, r8
 8006c36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c3a:	4641      	mov	r1, r8
 8006c3c:	018a      	lsls	r2, r1, #6
 8006c3e:	4641      	mov	r1, r8
 8006c40:	1a51      	subs	r1, r2, r1
 8006c42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006c44:	4649      	mov	r1, r9
 8006c46:	eb63 0301 	sbc.w	r3, r3, r1
 8006c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c4c:	f04f 0200 	mov.w	r2, #0
 8006c50:	f04f 0300 	mov.w	r3, #0
 8006c54:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006c58:	4649      	mov	r1, r9
 8006c5a:	00cb      	lsls	r3, r1, #3
 8006c5c:	4641      	mov	r1, r8
 8006c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c62:	4641      	mov	r1, r8
 8006c64:	00ca      	lsls	r2, r1, #3
 8006c66:	4610      	mov	r0, r2
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	4622      	mov	r2, r4
 8006c6e:	189b      	adds	r3, r3, r2
 8006c70:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c72:	462b      	mov	r3, r5
 8006c74:	460a      	mov	r2, r1
 8006c76:	eb42 0303 	adc.w	r3, r2, r3
 8006c7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c7c:	f04f 0200 	mov.w	r2, #0
 8006c80:	f04f 0300 	mov.w	r3, #0
 8006c84:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006c88:	4629      	mov	r1, r5
 8006c8a:	024b      	lsls	r3, r1, #9
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c92:	4621      	mov	r1, r4
 8006c94:	024a      	lsls	r2, r1, #9
 8006c96:	4610      	mov	r0, r2
 8006c98:	4619      	mov	r1, r3
 8006c9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ca4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006ca8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006cac:	f7f9 ffb8 	bl	8000c20 <__aeabi_uldivmod>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006cba:	e067      	b.n	8006d8c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cbc:	4b75      	ldr	r3, [pc, #468]	@ (8006e94 <HAL_RCC_GetSysClockFreq+0x354>)
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	099b      	lsrs	r3, r3, #6
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006cc8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006ccc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006cda:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006cde:	4622      	mov	r2, r4
 8006ce0:	462b      	mov	r3, r5
 8006ce2:	f04f 0000 	mov.w	r0, #0
 8006ce6:	f04f 0100 	mov.w	r1, #0
 8006cea:	0159      	lsls	r1, r3, #5
 8006cec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cf0:	0150      	lsls	r0, r2, #5
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	1a51      	subs	r1, r2, r1
 8006cfa:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006cfc:	4629      	mov	r1, r5
 8006cfe:	eb63 0301 	sbc.w	r3, r3, r1
 8006d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d04:	f04f 0200 	mov.w	r2, #0
 8006d08:	f04f 0300 	mov.w	r3, #0
 8006d0c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8006d10:	4649      	mov	r1, r9
 8006d12:	018b      	lsls	r3, r1, #6
 8006d14:	4641      	mov	r1, r8
 8006d16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d1a:	4641      	mov	r1, r8
 8006d1c:	018a      	lsls	r2, r1, #6
 8006d1e:	4641      	mov	r1, r8
 8006d20:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d24:	4649      	mov	r1, r9
 8006d26:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d2a:	f04f 0200 	mov.w	r2, #0
 8006d2e:	f04f 0300 	mov.w	r3, #0
 8006d32:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d36:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d3e:	4692      	mov	sl, r2
 8006d40:	469b      	mov	fp, r3
 8006d42:	4623      	mov	r3, r4
 8006d44:	eb1a 0303 	adds.w	r3, sl, r3
 8006d48:	623b      	str	r3, [r7, #32]
 8006d4a:	462b      	mov	r3, r5
 8006d4c:	eb4b 0303 	adc.w	r3, fp, r3
 8006d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d52:	f04f 0200 	mov.w	r2, #0
 8006d56:	f04f 0300 	mov.w	r3, #0
 8006d5a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006d5e:	4629      	mov	r1, r5
 8006d60:	028b      	lsls	r3, r1, #10
 8006d62:	4621      	mov	r1, r4
 8006d64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d68:	4621      	mov	r1, r4
 8006d6a:	028a      	lsls	r2, r1, #10
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	4619      	mov	r1, r3
 8006d70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d74:	2200      	movs	r2, #0
 8006d76:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d78:	677a      	str	r2, [r7, #116]	@ 0x74
 8006d7a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006d7e:	f7f9 ff4f 	bl	8000c20 <__aeabi_uldivmod>
 8006d82:	4602      	mov	r2, r0
 8006d84:	460b      	mov	r3, r1
 8006d86:	4613      	mov	r3, r2
 8006d88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006d8c:	4b41      	ldr	r3, [pc, #260]	@ (8006e94 <HAL_RCC_GetSysClockFreq+0x354>)
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	0c1b      	lsrs	r3, r3, #16
 8006d92:	f003 0303 	and.w	r3, r3, #3
 8006d96:	3301      	adds	r3, #1
 8006d98:	005b      	lsls	r3, r3, #1
 8006d9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8006d9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006da2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006daa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006dae:	e0eb      	b.n	8006f88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006db0:	4b38      	ldr	r3, [pc, #224]	@ (8006e94 <HAL_RCC_GetSysClockFreq+0x354>)
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006db8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006dbc:	4b35      	ldr	r3, [pc, #212]	@ (8006e94 <HAL_RCC_GetSysClockFreq+0x354>)
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d06b      	beq.n	8006ea0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dc8:	4b32      	ldr	r3, [pc, #200]	@ (8006e94 <HAL_RCC_GetSysClockFreq+0x354>)
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	099b      	lsrs	r3, r3, #6
 8006dce:	2200      	movs	r2, #0
 8006dd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006dd2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006dd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dda:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ddc:	2300      	movs	r3, #0
 8006dde:	667b      	str	r3, [r7, #100]	@ 0x64
 8006de0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006de4:	4622      	mov	r2, r4
 8006de6:	462b      	mov	r3, r5
 8006de8:	f04f 0000 	mov.w	r0, #0
 8006dec:	f04f 0100 	mov.w	r1, #0
 8006df0:	0159      	lsls	r1, r3, #5
 8006df2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006df6:	0150      	lsls	r0, r2, #5
 8006df8:	4602      	mov	r2, r0
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	4621      	mov	r1, r4
 8006dfe:	1a51      	subs	r1, r2, r1
 8006e00:	61b9      	str	r1, [r7, #24]
 8006e02:	4629      	mov	r1, r5
 8006e04:	eb63 0301 	sbc.w	r3, r3, r1
 8006e08:	61fb      	str	r3, [r7, #28]
 8006e0a:	f04f 0200 	mov.w	r2, #0
 8006e0e:	f04f 0300 	mov.w	r3, #0
 8006e12:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006e16:	4659      	mov	r1, fp
 8006e18:	018b      	lsls	r3, r1, #6
 8006e1a:	4651      	mov	r1, sl
 8006e1c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e20:	4651      	mov	r1, sl
 8006e22:	018a      	lsls	r2, r1, #6
 8006e24:	4651      	mov	r1, sl
 8006e26:	ebb2 0801 	subs.w	r8, r2, r1
 8006e2a:	4659      	mov	r1, fp
 8006e2c:	eb63 0901 	sbc.w	r9, r3, r1
 8006e30:	f04f 0200 	mov.w	r2, #0
 8006e34:	f04f 0300 	mov.w	r3, #0
 8006e38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e44:	4690      	mov	r8, r2
 8006e46:	4699      	mov	r9, r3
 8006e48:	4623      	mov	r3, r4
 8006e4a:	eb18 0303 	adds.w	r3, r8, r3
 8006e4e:	613b      	str	r3, [r7, #16]
 8006e50:	462b      	mov	r3, r5
 8006e52:	eb49 0303 	adc.w	r3, r9, r3
 8006e56:	617b      	str	r3, [r7, #20]
 8006e58:	f04f 0200 	mov.w	r2, #0
 8006e5c:	f04f 0300 	mov.w	r3, #0
 8006e60:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006e64:	4629      	mov	r1, r5
 8006e66:	024b      	lsls	r3, r1, #9
 8006e68:	4621      	mov	r1, r4
 8006e6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e6e:	4621      	mov	r1, r4
 8006e70:	024a      	lsls	r2, r1, #9
 8006e72:	4610      	mov	r0, r2
 8006e74:	4619      	mov	r1, r3
 8006e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e7e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006e80:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006e84:	f7f9 fecc 	bl	8000c20 <__aeabi_uldivmod>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e92:	e065      	b.n	8006f60 <HAL_RCC_GetSysClockFreq+0x420>
 8006e94:	40023800 	.word	0x40023800
 8006e98:	00f42400 	.word	0x00f42400
 8006e9c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8006f98 <HAL_RCC_GetSysClockFreq+0x458>)
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	099b      	lsrs	r3, r3, #6
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	4611      	mov	r1, r2
 8006eac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006eb0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	657b      	str	r3, [r7, #84]	@ 0x54
 8006eb6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8006eba:	4642      	mov	r2, r8
 8006ebc:	464b      	mov	r3, r9
 8006ebe:	f04f 0000 	mov.w	r0, #0
 8006ec2:	f04f 0100 	mov.w	r1, #0
 8006ec6:	0159      	lsls	r1, r3, #5
 8006ec8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ecc:	0150      	lsls	r0, r2, #5
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	4641      	mov	r1, r8
 8006ed4:	1a51      	subs	r1, r2, r1
 8006ed6:	60b9      	str	r1, [r7, #8]
 8006ed8:	4649      	mov	r1, r9
 8006eda:	eb63 0301 	sbc.w	r3, r3, r1
 8006ede:	60fb      	str	r3, [r7, #12]
 8006ee0:	f04f 0200 	mov.w	r2, #0
 8006ee4:	f04f 0300 	mov.w	r3, #0
 8006ee8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006eec:	4659      	mov	r1, fp
 8006eee:	018b      	lsls	r3, r1, #6
 8006ef0:	4651      	mov	r1, sl
 8006ef2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ef6:	4651      	mov	r1, sl
 8006ef8:	018a      	lsls	r2, r1, #6
 8006efa:	4651      	mov	r1, sl
 8006efc:	1a54      	subs	r4, r2, r1
 8006efe:	4659      	mov	r1, fp
 8006f00:	eb63 0501 	sbc.w	r5, r3, r1
 8006f04:	f04f 0200 	mov.w	r2, #0
 8006f08:	f04f 0300 	mov.w	r3, #0
 8006f0c:	00eb      	lsls	r3, r5, #3
 8006f0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f12:	00e2      	lsls	r2, r4, #3
 8006f14:	4614      	mov	r4, r2
 8006f16:	461d      	mov	r5, r3
 8006f18:	4643      	mov	r3, r8
 8006f1a:	18e3      	adds	r3, r4, r3
 8006f1c:	603b      	str	r3, [r7, #0]
 8006f1e:	464b      	mov	r3, r9
 8006f20:	eb45 0303 	adc.w	r3, r5, r3
 8006f24:	607b      	str	r3, [r7, #4]
 8006f26:	f04f 0200 	mov.w	r2, #0
 8006f2a:	f04f 0300 	mov.w	r3, #0
 8006f2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f32:	4629      	mov	r1, r5
 8006f34:	028b      	lsls	r3, r1, #10
 8006f36:	4621      	mov	r1, r4
 8006f38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	028a      	lsls	r2, r1, #10
 8006f40:	4610      	mov	r0, r2
 8006f42:	4619      	mov	r1, r3
 8006f44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f48:	2200      	movs	r2, #0
 8006f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f4c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006f4e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006f52:	f7f9 fe65 	bl	8000c20 <__aeabi_uldivmod>
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006f60:	4b0d      	ldr	r3, [pc, #52]	@ (8006f98 <HAL_RCC_GetSysClockFreq+0x458>)
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	0f1b      	lsrs	r3, r3, #28
 8006f66:	f003 0307 	and.w	r3, r3, #7
 8006f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8006f6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006f72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006f7e:	e003      	b.n	8006f88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f80:	4b06      	ldr	r3, [pc, #24]	@ (8006f9c <HAL_RCC_GetSysClockFreq+0x45c>)
 8006f82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006f86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	37b8      	adds	r7, #184	@ 0xb8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f96:	bf00      	nop
 8006f98:	40023800 	.word	0x40023800
 8006f9c:	00f42400 	.word	0x00f42400

08006fa0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e28d      	b.n	80074ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 8083 	beq.w	80070c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006fc0:	4b94      	ldr	r3, [pc, #592]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f003 030c 	and.w	r3, r3, #12
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	d019      	beq.n	8007000 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006fcc:	4b91      	ldr	r3, [pc, #580]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006fd4:	2b08      	cmp	r3, #8
 8006fd6:	d106      	bne.n	8006fe6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006fd8:	4b8e      	ldr	r3, [pc, #568]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fe0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fe4:	d00c      	beq.n	8007000 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006fe6:	4b8b      	ldr	r3, [pc, #556]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006fee:	2b0c      	cmp	r3, #12
 8006ff0:	d112      	bne.n	8007018 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ff2:	4b88      	ldr	r3, [pc, #544]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ffa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ffe:	d10b      	bne.n	8007018 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007000:	4b84      	ldr	r3, [pc, #528]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d05b      	beq.n	80070c4 <HAL_RCC_OscConfig+0x124>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d157      	bne.n	80070c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e25a      	b.n	80074ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007020:	d106      	bne.n	8007030 <HAL_RCC_OscConfig+0x90>
 8007022:	4b7c      	ldr	r3, [pc, #496]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a7b      	ldr	r2, [pc, #492]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 8007028:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800702c:	6013      	str	r3, [r2, #0]
 800702e:	e01d      	b.n	800706c <HAL_RCC_OscConfig+0xcc>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007038:	d10c      	bne.n	8007054 <HAL_RCC_OscConfig+0xb4>
 800703a:	4b76      	ldr	r3, [pc, #472]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a75      	ldr	r2, [pc, #468]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 8007040:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007044:	6013      	str	r3, [r2, #0]
 8007046:	4b73      	ldr	r3, [pc, #460]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a72      	ldr	r2, [pc, #456]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 800704c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007050:	6013      	str	r3, [r2, #0]
 8007052:	e00b      	b.n	800706c <HAL_RCC_OscConfig+0xcc>
 8007054:	4b6f      	ldr	r3, [pc, #444]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a6e      	ldr	r2, [pc, #440]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 800705a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800705e:	6013      	str	r3, [r2, #0]
 8007060:	4b6c      	ldr	r3, [pc, #432]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a6b      	ldr	r2, [pc, #428]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 8007066:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800706a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d013      	beq.n	800709c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007074:	f7fd fb34 	bl	80046e0 <HAL_GetTick>
 8007078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800707a:	e008      	b.n	800708e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800707c:	f7fd fb30 	bl	80046e0 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b64      	cmp	r3, #100	@ 0x64
 8007088:	d901      	bls.n	800708e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e21f      	b.n	80074ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800708e:	4b61      	ldr	r3, [pc, #388]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d0f0      	beq.n	800707c <HAL_RCC_OscConfig+0xdc>
 800709a:	e014      	b.n	80070c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800709c:	f7fd fb20 	bl	80046e0 <HAL_GetTick>
 80070a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070a2:	e008      	b.n	80070b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070a4:	f7fd fb1c 	bl	80046e0 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	2b64      	cmp	r3, #100	@ 0x64
 80070b0:	d901      	bls.n	80070b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e20b      	b.n	80074ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070b6:	4b57      	ldr	r3, [pc, #348]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1f0      	bne.n	80070a4 <HAL_RCC_OscConfig+0x104>
 80070c2:	e000      	b.n	80070c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0302 	and.w	r3, r3, #2
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d06f      	beq.n	80071b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80070d2:	4b50      	ldr	r3, [pc, #320]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f003 030c 	and.w	r3, r3, #12
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d017      	beq.n	800710e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80070de:	4b4d      	ldr	r3, [pc, #308]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80070e6:	2b08      	cmp	r3, #8
 80070e8:	d105      	bne.n	80070f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80070ea:	4b4a      	ldr	r3, [pc, #296]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00b      	beq.n	800710e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070f6:	4b47      	ldr	r3, [pc, #284]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80070fe:	2b0c      	cmp	r3, #12
 8007100:	d11c      	bne.n	800713c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007102:	4b44      	ldr	r3, [pc, #272]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d116      	bne.n	800713c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800710e:	4b41      	ldr	r3, [pc, #260]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d005      	beq.n	8007126 <HAL_RCC_OscConfig+0x186>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d001      	beq.n	8007126 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e1d3      	b.n	80074ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007126:	4b3b      	ldr	r3, [pc, #236]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	00db      	lsls	r3, r3, #3
 8007134:	4937      	ldr	r1, [pc, #220]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 8007136:	4313      	orrs	r3, r2
 8007138:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800713a:	e03a      	b.n	80071b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d020      	beq.n	8007186 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007144:	4b34      	ldr	r3, [pc, #208]	@ (8007218 <HAL_RCC_OscConfig+0x278>)
 8007146:	2201      	movs	r2, #1
 8007148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800714a:	f7fd fac9 	bl	80046e0 <HAL_GetTick>
 800714e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007150:	e008      	b.n	8007164 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007152:	f7fd fac5 	bl	80046e0 <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	2b02      	cmp	r3, #2
 800715e:	d901      	bls.n	8007164 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e1b4      	b.n	80074ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007164:	4b2b      	ldr	r3, [pc, #172]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0302 	and.w	r3, r3, #2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d0f0      	beq.n	8007152 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007170:	4b28      	ldr	r3, [pc, #160]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	00db      	lsls	r3, r3, #3
 800717e:	4925      	ldr	r1, [pc, #148]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 8007180:	4313      	orrs	r3, r2
 8007182:	600b      	str	r3, [r1, #0]
 8007184:	e015      	b.n	80071b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007186:	4b24      	ldr	r3, [pc, #144]	@ (8007218 <HAL_RCC_OscConfig+0x278>)
 8007188:	2200      	movs	r2, #0
 800718a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800718c:	f7fd faa8 	bl	80046e0 <HAL_GetTick>
 8007190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007192:	e008      	b.n	80071a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007194:	f7fd faa4 	bl	80046e0 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d901      	bls.n	80071a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e193      	b.n	80074ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071a6:	4b1b      	ldr	r3, [pc, #108]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1f0      	bne.n	8007194 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0308 	and.w	r3, r3, #8
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d036      	beq.n	800722c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d016      	beq.n	80071f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071c6:	4b15      	ldr	r3, [pc, #84]	@ (800721c <HAL_RCC_OscConfig+0x27c>)
 80071c8:	2201      	movs	r2, #1
 80071ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071cc:	f7fd fa88 	bl	80046e0 <HAL_GetTick>
 80071d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071d2:	e008      	b.n	80071e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071d4:	f7fd fa84 	bl	80046e0 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d901      	bls.n	80071e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e173      	b.n	80074ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007214 <HAL_RCC_OscConfig+0x274>)
 80071e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0f0      	beq.n	80071d4 <HAL_RCC_OscConfig+0x234>
 80071f2:	e01b      	b.n	800722c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071f4:	4b09      	ldr	r3, [pc, #36]	@ (800721c <HAL_RCC_OscConfig+0x27c>)
 80071f6:	2200      	movs	r2, #0
 80071f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071fa:	f7fd fa71 	bl	80046e0 <HAL_GetTick>
 80071fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007200:	e00e      	b.n	8007220 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007202:	f7fd fa6d 	bl	80046e0 <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	2b02      	cmp	r3, #2
 800720e:	d907      	bls.n	8007220 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e15c      	b.n	80074ce <HAL_RCC_OscConfig+0x52e>
 8007214:	40023800 	.word	0x40023800
 8007218:	42470000 	.word	0x42470000
 800721c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007220:	4b8a      	ldr	r3, [pc, #552]	@ (800744c <HAL_RCC_OscConfig+0x4ac>)
 8007222:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007224:	f003 0302 	and.w	r3, r3, #2
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1ea      	bne.n	8007202 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0304 	and.w	r3, r3, #4
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 8097 	beq.w	8007368 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800723a:	2300      	movs	r3, #0
 800723c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800723e:	4b83      	ldr	r3, [pc, #524]	@ (800744c <HAL_RCC_OscConfig+0x4ac>)
 8007240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10f      	bne.n	800726a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800724a:	2300      	movs	r3, #0
 800724c:	60bb      	str	r3, [r7, #8]
 800724e:	4b7f      	ldr	r3, [pc, #508]	@ (800744c <HAL_RCC_OscConfig+0x4ac>)
 8007250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007252:	4a7e      	ldr	r2, [pc, #504]	@ (800744c <HAL_RCC_OscConfig+0x4ac>)
 8007254:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007258:	6413      	str	r3, [r2, #64]	@ 0x40
 800725a:	4b7c      	ldr	r3, [pc, #496]	@ (800744c <HAL_RCC_OscConfig+0x4ac>)
 800725c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800725e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007262:	60bb      	str	r3, [r7, #8]
 8007264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007266:	2301      	movs	r3, #1
 8007268:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800726a:	4b79      	ldr	r3, [pc, #484]	@ (8007450 <HAL_RCC_OscConfig+0x4b0>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007272:	2b00      	cmp	r3, #0
 8007274:	d118      	bne.n	80072a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007276:	4b76      	ldr	r3, [pc, #472]	@ (8007450 <HAL_RCC_OscConfig+0x4b0>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a75      	ldr	r2, [pc, #468]	@ (8007450 <HAL_RCC_OscConfig+0x4b0>)
 800727c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007282:	f7fd fa2d 	bl	80046e0 <HAL_GetTick>
 8007286:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007288:	e008      	b.n	800729c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800728a:	f7fd fa29 	bl	80046e0 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	2b02      	cmp	r3, #2
 8007296:	d901      	bls.n	800729c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e118      	b.n	80074ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800729c:	4b6c      	ldr	r3, [pc, #432]	@ (8007450 <HAL_RCC_OscConfig+0x4b0>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d0f0      	beq.n	800728a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d106      	bne.n	80072be <HAL_RCC_OscConfig+0x31e>
 80072b0:	4b66      	ldr	r3, [pc, #408]	@ (800744c <HAL_RCC_OscConfig+0x4ac>)
 80072b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072b4:	4a65      	ldr	r2, [pc, #404]	@ (800744c <HAL_RCC_OscConfig+0x4ac>)
 80072b6:	f043 0301 	orr.w	r3, r3, #1
 80072ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80072bc:	e01c      	b.n	80072f8 <HAL_RCC_OscConfig+0x358>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	2b05      	cmp	r3, #5
 80072c4:	d10c      	bne.n	80072e0 <HAL_RCC_OscConfig+0x340>
 80072c6:	4b61      	ldr	r3, [pc, #388]	@ (800744c <HAL_RCC_OscConfig+0x4ac>)
 80072c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ca:	4a60      	ldr	r2, [pc, #384]	@ (800744c <HAL_RCC_OscConfig+0x4ac>)
 80072cc:	f043 0304 	orr.w	r3, r3, #4
 80072d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80072d2:	4b5e      	ldr	r3, [pc, #376]	@ (800744c <HAL_RCC_OscConfig+0x4ac>)
 80072d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072d6:	4a5d      	ldr	r2, [pc, #372]	@ (800744c <HAL_RCC_OscConfig+0x4ac>)
 80072d8:	f043 0301 	orr.w	r3, r3, #1
 80072dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80072de:	e00b      	b.n	80072f8 <HAL_RCC_OscConfig+0x358>
 80072e0:	4b5a      	ldr	r3, [pc, #360]	@ (800744c <HAL_RCC_OscConfig+0x4ac>)
 80072e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072e4:	4a59      	ldr	r2, [pc, #356]	@ (800744c <HAL_RCC_OscConfig+0x4ac>)
 80072e6:	f023 0301 	bic.w	r3, r3, #1
 80072ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80072ec:	4b57      	ldr	r3, [pc, #348]	@ (800744c <HAL_RCC_OscConfig+0x4ac>)
 80072ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072f0:	4a56      	ldr	r2, [pc, #344]	@ (800744c <HAL_RCC_OscConfig+0x4ac>)
 80072f2:	f023 0304 	bic.w	r3, r3, #4
 80072f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d015      	beq.n	800732c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007300:	f7fd f9ee 	bl	80046e0 <HAL_GetTick>
 8007304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007306:	e00a      	b.n	800731e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007308:	f7fd f9ea 	bl	80046e0 <HAL_GetTick>
 800730c:	4602      	mov	r2, r0
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007316:	4293      	cmp	r3, r2
 8007318:	d901      	bls.n	800731e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e0d7      	b.n	80074ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800731e:	4b4b      	ldr	r3, [pc, #300]	@ (800744c <HAL_RCC_OscConfig+0x4ac>)
 8007320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d0ee      	beq.n	8007308 <HAL_RCC_OscConfig+0x368>
 800732a:	e014      	b.n	8007356 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800732c:	f7fd f9d8 	bl	80046e0 <HAL_GetTick>
 8007330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007332:	e00a      	b.n	800734a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007334:	f7fd f9d4 	bl	80046e0 <HAL_GetTick>
 8007338:	4602      	mov	r2, r0
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007342:	4293      	cmp	r3, r2
 8007344:	d901      	bls.n	800734a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e0c1      	b.n	80074ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800734a:	4b40      	ldr	r3, [pc, #256]	@ (800744c <HAL_RCC_OscConfig+0x4ac>)
 800734c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1ee      	bne.n	8007334 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007356:	7dfb      	ldrb	r3, [r7, #23]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d105      	bne.n	8007368 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800735c:	4b3b      	ldr	r3, [pc, #236]	@ (800744c <HAL_RCC_OscConfig+0x4ac>)
 800735e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007360:	4a3a      	ldr	r2, [pc, #232]	@ (800744c <HAL_RCC_OscConfig+0x4ac>)
 8007362:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007366:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 80ad 	beq.w	80074cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007372:	4b36      	ldr	r3, [pc, #216]	@ (800744c <HAL_RCC_OscConfig+0x4ac>)
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f003 030c 	and.w	r3, r3, #12
 800737a:	2b08      	cmp	r3, #8
 800737c:	d060      	beq.n	8007440 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	2b02      	cmp	r3, #2
 8007384:	d145      	bne.n	8007412 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007386:	4b33      	ldr	r3, [pc, #204]	@ (8007454 <HAL_RCC_OscConfig+0x4b4>)
 8007388:	2200      	movs	r2, #0
 800738a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800738c:	f7fd f9a8 	bl	80046e0 <HAL_GetTick>
 8007390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007392:	e008      	b.n	80073a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007394:	f7fd f9a4 	bl	80046e0 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d901      	bls.n	80073a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e093      	b.n	80074ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073a6:	4b29      	ldr	r3, [pc, #164]	@ (800744c <HAL_RCC_OscConfig+0x4ac>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1f0      	bne.n	8007394 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	69da      	ldr	r2, [r3, #28]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	431a      	orrs	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c0:	019b      	lsls	r3, r3, #6
 80073c2:	431a      	orrs	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c8:	085b      	lsrs	r3, r3, #1
 80073ca:	3b01      	subs	r3, #1
 80073cc:	041b      	lsls	r3, r3, #16
 80073ce:	431a      	orrs	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d4:	061b      	lsls	r3, r3, #24
 80073d6:	431a      	orrs	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073dc:	071b      	lsls	r3, r3, #28
 80073de:	491b      	ldr	r1, [pc, #108]	@ (800744c <HAL_RCC_OscConfig+0x4ac>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007454 <HAL_RCC_OscConfig+0x4b4>)
 80073e6:	2201      	movs	r2, #1
 80073e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ea:	f7fd f979 	bl	80046e0 <HAL_GetTick>
 80073ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073f0:	e008      	b.n	8007404 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073f2:	f7fd f975 	bl	80046e0 <HAL_GetTick>
 80073f6:	4602      	mov	r2, r0
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d901      	bls.n	8007404 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	e064      	b.n	80074ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007404:	4b11      	ldr	r3, [pc, #68]	@ (800744c <HAL_RCC_OscConfig+0x4ac>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d0f0      	beq.n	80073f2 <HAL_RCC_OscConfig+0x452>
 8007410:	e05c      	b.n	80074cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007412:	4b10      	ldr	r3, [pc, #64]	@ (8007454 <HAL_RCC_OscConfig+0x4b4>)
 8007414:	2200      	movs	r2, #0
 8007416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007418:	f7fd f962 	bl	80046e0 <HAL_GetTick>
 800741c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800741e:	e008      	b.n	8007432 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007420:	f7fd f95e 	bl	80046e0 <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	2b02      	cmp	r3, #2
 800742c:	d901      	bls.n	8007432 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800742e:	2303      	movs	r3, #3
 8007430:	e04d      	b.n	80074ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007432:	4b06      	ldr	r3, [pc, #24]	@ (800744c <HAL_RCC_OscConfig+0x4ac>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1f0      	bne.n	8007420 <HAL_RCC_OscConfig+0x480>
 800743e:	e045      	b.n	80074cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d107      	bne.n	8007458 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e040      	b.n	80074ce <HAL_RCC_OscConfig+0x52e>
 800744c:	40023800 	.word	0x40023800
 8007450:	40007000 	.word	0x40007000
 8007454:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007458:	4b1f      	ldr	r3, [pc, #124]	@ (80074d8 <HAL_RCC_OscConfig+0x538>)
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d030      	beq.n	80074c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007470:	429a      	cmp	r2, r3
 8007472:	d129      	bne.n	80074c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800747e:	429a      	cmp	r2, r3
 8007480:	d122      	bne.n	80074c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007488:	4013      	ands	r3, r2
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800748e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007490:	4293      	cmp	r3, r2
 8007492:	d119      	bne.n	80074c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800749e:	085b      	lsrs	r3, r3, #1
 80074a0:	3b01      	subs	r3, #1
 80074a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d10f      	bne.n	80074c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d107      	bne.n	80074c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d001      	beq.n	80074cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e000      	b.n	80074ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3718      	adds	r7, #24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	40023800 	.word	0x40023800

080074dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d101      	bne.n	80074ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e041      	b.n	8007572 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d106      	bne.n	8007508 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7fc ff30 	bl	8004368 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2202      	movs	r2, #2
 800750c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	3304      	adds	r3, #4
 8007518:	4619      	mov	r1, r3
 800751a:	4610      	mov	r0, r2
 800751c:	f000 f9ce 	bl	80078bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
	...

0800757c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800758a:	b2db      	uxtb	r3, r3
 800758c:	2b01      	cmp	r3, #1
 800758e:	d001      	beq.n	8007594 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e04e      	b.n	8007632 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2202      	movs	r2, #2
 8007598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68da      	ldr	r2, [r3, #12]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f042 0201 	orr.w	r2, r2, #1
 80075aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a23      	ldr	r2, [pc, #140]	@ (8007640 <HAL_TIM_Base_Start_IT+0xc4>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d022      	beq.n	80075fc <HAL_TIM_Base_Start_IT+0x80>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075be:	d01d      	beq.n	80075fc <HAL_TIM_Base_Start_IT+0x80>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a1f      	ldr	r2, [pc, #124]	@ (8007644 <HAL_TIM_Base_Start_IT+0xc8>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d018      	beq.n	80075fc <HAL_TIM_Base_Start_IT+0x80>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a1e      	ldr	r2, [pc, #120]	@ (8007648 <HAL_TIM_Base_Start_IT+0xcc>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d013      	beq.n	80075fc <HAL_TIM_Base_Start_IT+0x80>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a1c      	ldr	r2, [pc, #112]	@ (800764c <HAL_TIM_Base_Start_IT+0xd0>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d00e      	beq.n	80075fc <HAL_TIM_Base_Start_IT+0x80>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a1b      	ldr	r2, [pc, #108]	@ (8007650 <HAL_TIM_Base_Start_IT+0xd4>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d009      	beq.n	80075fc <HAL_TIM_Base_Start_IT+0x80>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a19      	ldr	r2, [pc, #100]	@ (8007654 <HAL_TIM_Base_Start_IT+0xd8>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d004      	beq.n	80075fc <HAL_TIM_Base_Start_IT+0x80>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a18      	ldr	r2, [pc, #96]	@ (8007658 <HAL_TIM_Base_Start_IT+0xdc>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d111      	bne.n	8007620 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f003 0307 	and.w	r3, r3, #7
 8007606:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2b06      	cmp	r3, #6
 800760c:	d010      	beq.n	8007630 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f042 0201 	orr.w	r2, r2, #1
 800761c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800761e:	e007      	b.n	8007630 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f042 0201 	orr.w	r2, r2, #1
 800762e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3714      	adds	r7, #20
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	40010000 	.word	0x40010000
 8007644:	40000400 	.word	0x40000400
 8007648:	40000800 	.word	0x40000800
 800764c:	40000c00 	.word	0x40000c00
 8007650:	40010400 	.word	0x40010400
 8007654:	40014000 	.word	0x40014000
 8007658:	40001800 	.word	0x40001800

0800765c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	f003 0302 	and.w	r3, r3, #2
 800766e:	2b02      	cmp	r3, #2
 8007670:	d122      	bne.n	80076b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	f003 0302 	and.w	r3, r3, #2
 800767c:	2b02      	cmp	r3, #2
 800767e:	d11b      	bne.n	80076b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f06f 0202 	mvn.w	r2, #2
 8007688:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	f003 0303 	and.w	r3, r3, #3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d003      	beq.n	80076a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f8ee 	bl	8007880 <HAL_TIM_IC_CaptureCallback>
 80076a4:	e005      	b.n	80076b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f8e0 	bl	800786c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 f8f1 	bl	8007894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	f003 0304 	and.w	r3, r3, #4
 80076c2:	2b04      	cmp	r3, #4
 80076c4:	d122      	bne.n	800770c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	f003 0304 	and.w	r3, r3, #4
 80076d0:	2b04      	cmp	r3, #4
 80076d2:	d11b      	bne.n	800770c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f06f 0204 	mvn.w	r2, #4
 80076dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2202      	movs	r2, #2
 80076e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f8c4 	bl	8007880 <HAL_TIM_IC_CaptureCallback>
 80076f8:	e005      	b.n	8007706 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f8b6 	bl	800786c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f8c7 	bl	8007894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	f003 0308 	and.w	r3, r3, #8
 8007716:	2b08      	cmp	r3, #8
 8007718:	d122      	bne.n	8007760 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	f003 0308 	and.w	r3, r3, #8
 8007724:	2b08      	cmp	r3, #8
 8007726:	d11b      	bne.n	8007760 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f06f 0208 	mvn.w	r2, #8
 8007730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2204      	movs	r2, #4
 8007736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	69db      	ldr	r3, [r3, #28]
 800773e:	f003 0303 	and.w	r3, r3, #3
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f89a 	bl	8007880 <HAL_TIM_IC_CaptureCallback>
 800774c:	e005      	b.n	800775a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f88c 	bl	800786c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f89d 	bl	8007894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	f003 0310 	and.w	r3, r3, #16
 800776a:	2b10      	cmp	r3, #16
 800776c:	d122      	bne.n	80077b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	f003 0310 	and.w	r3, r3, #16
 8007778:	2b10      	cmp	r3, #16
 800777a:	d11b      	bne.n	80077b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f06f 0210 	mvn.w	r2, #16
 8007784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2208      	movs	r2, #8
 800778a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007796:	2b00      	cmp	r3, #0
 8007798:	d003      	beq.n	80077a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f870 	bl	8007880 <HAL_TIM_IC_CaptureCallback>
 80077a0:	e005      	b.n	80077ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f862 	bl	800786c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f873 	bl	8007894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	f003 0301 	and.w	r3, r3, #1
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d10e      	bne.n	80077e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d107      	bne.n	80077e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f06f 0201 	mvn.w	r2, #1
 80077d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7fb f90c 	bl	80029f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077ea:	2b80      	cmp	r3, #128	@ 0x80
 80077ec:	d10e      	bne.n	800780c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077f8:	2b80      	cmp	r3, #128	@ 0x80
 80077fa:	d107      	bne.n	800780c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f97e 	bl	8007b08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007816:	2b40      	cmp	r3, #64	@ 0x40
 8007818:	d10e      	bne.n	8007838 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007824:	2b40      	cmp	r3, #64	@ 0x40
 8007826:	d107      	bne.n	8007838 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f838 	bl	80078a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	f003 0320 	and.w	r3, r3, #32
 8007842:	2b20      	cmp	r3, #32
 8007844:	d10e      	bne.n	8007864 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	f003 0320 	and.w	r3, r3, #32
 8007850:	2b20      	cmp	r3, #32
 8007852:	d107      	bne.n	8007864 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f06f 0220 	mvn.w	r2, #32
 800785c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f948 	bl	8007af4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007864:	bf00      	nop
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a40      	ldr	r2, [pc, #256]	@ (80079d0 <TIM_Base_SetConfig+0x114>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d013      	beq.n	80078fc <TIM_Base_SetConfig+0x40>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078da:	d00f      	beq.n	80078fc <TIM_Base_SetConfig+0x40>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a3d      	ldr	r2, [pc, #244]	@ (80079d4 <TIM_Base_SetConfig+0x118>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d00b      	beq.n	80078fc <TIM_Base_SetConfig+0x40>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a3c      	ldr	r2, [pc, #240]	@ (80079d8 <TIM_Base_SetConfig+0x11c>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d007      	beq.n	80078fc <TIM_Base_SetConfig+0x40>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a3b      	ldr	r2, [pc, #236]	@ (80079dc <TIM_Base_SetConfig+0x120>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d003      	beq.n	80078fc <TIM_Base_SetConfig+0x40>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a3a      	ldr	r2, [pc, #232]	@ (80079e0 <TIM_Base_SetConfig+0x124>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d108      	bne.n	800790e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	4313      	orrs	r3, r2
 800790c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a2f      	ldr	r2, [pc, #188]	@ (80079d0 <TIM_Base_SetConfig+0x114>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d02b      	beq.n	800796e <TIM_Base_SetConfig+0xb2>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800791c:	d027      	beq.n	800796e <TIM_Base_SetConfig+0xb2>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a2c      	ldr	r2, [pc, #176]	@ (80079d4 <TIM_Base_SetConfig+0x118>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d023      	beq.n	800796e <TIM_Base_SetConfig+0xb2>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a2b      	ldr	r2, [pc, #172]	@ (80079d8 <TIM_Base_SetConfig+0x11c>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d01f      	beq.n	800796e <TIM_Base_SetConfig+0xb2>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a2a      	ldr	r2, [pc, #168]	@ (80079dc <TIM_Base_SetConfig+0x120>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d01b      	beq.n	800796e <TIM_Base_SetConfig+0xb2>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a29      	ldr	r2, [pc, #164]	@ (80079e0 <TIM_Base_SetConfig+0x124>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d017      	beq.n	800796e <TIM_Base_SetConfig+0xb2>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a28      	ldr	r2, [pc, #160]	@ (80079e4 <TIM_Base_SetConfig+0x128>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d013      	beq.n	800796e <TIM_Base_SetConfig+0xb2>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a27      	ldr	r2, [pc, #156]	@ (80079e8 <TIM_Base_SetConfig+0x12c>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d00f      	beq.n	800796e <TIM_Base_SetConfig+0xb2>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a26      	ldr	r2, [pc, #152]	@ (80079ec <TIM_Base_SetConfig+0x130>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d00b      	beq.n	800796e <TIM_Base_SetConfig+0xb2>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a25      	ldr	r2, [pc, #148]	@ (80079f0 <TIM_Base_SetConfig+0x134>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d007      	beq.n	800796e <TIM_Base_SetConfig+0xb2>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a24      	ldr	r2, [pc, #144]	@ (80079f4 <TIM_Base_SetConfig+0x138>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d003      	beq.n	800796e <TIM_Base_SetConfig+0xb2>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a23      	ldr	r2, [pc, #140]	@ (80079f8 <TIM_Base_SetConfig+0x13c>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d108      	bne.n	8007980 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	4313      	orrs	r3, r2
 800797e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	4313      	orrs	r3, r2
 800798c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	689a      	ldr	r2, [r3, #8]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a0a      	ldr	r2, [pc, #40]	@ (80079d0 <TIM_Base_SetConfig+0x114>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d003      	beq.n	80079b4 <TIM_Base_SetConfig+0xf8>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a0c      	ldr	r2, [pc, #48]	@ (80079e0 <TIM_Base_SetConfig+0x124>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d103      	bne.n	80079bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	691a      	ldr	r2, [r3, #16]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	615a      	str	r2, [r3, #20]
}
 80079c2:	bf00      	nop
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	40010000 	.word	0x40010000
 80079d4:	40000400 	.word	0x40000400
 80079d8:	40000800 	.word	0x40000800
 80079dc:	40000c00 	.word	0x40000c00
 80079e0:	40010400 	.word	0x40010400
 80079e4:	40014000 	.word	0x40014000
 80079e8:	40014400 	.word	0x40014400
 80079ec:	40014800 	.word	0x40014800
 80079f0:	40001800 	.word	0x40001800
 80079f4:	40001c00 	.word	0x40001c00
 80079f8:	40002000 	.word	0x40002000

080079fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d101      	bne.n	8007a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a10:	2302      	movs	r3, #2
 8007a12:	e05a      	b.n	8007aca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2202      	movs	r2, #2
 8007a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a21      	ldr	r2, [pc, #132]	@ (8007ad8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d022      	beq.n	8007a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a60:	d01d      	beq.n	8007a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a1d      	ldr	r2, [pc, #116]	@ (8007adc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d018      	beq.n	8007a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a1b      	ldr	r2, [pc, #108]	@ (8007ae0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d013      	beq.n	8007a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a1a      	ldr	r2, [pc, #104]	@ (8007ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d00e      	beq.n	8007a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a18      	ldr	r2, [pc, #96]	@ (8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d009      	beq.n	8007a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a17      	ldr	r2, [pc, #92]	@ (8007aec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d004      	beq.n	8007a9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a15      	ldr	r2, [pc, #84]	@ (8007af0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d10c      	bne.n	8007ab8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007aa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68ba      	ldr	r2, [r7, #8]
 8007ab6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3714      	adds	r7, #20
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	40010000 	.word	0x40010000
 8007adc:	40000400 	.word	0x40000400
 8007ae0:	40000800 	.word	0x40000800
 8007ae4:	40000c00 	.word	0x40000c00
 8007ae8:	40010400 	.word	0x40010400
 8007aec:	40014000 	.word	0x40014000
 8007af0:	40001800 	.word	0x40001800

08007af4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d101      	bne.n	8007b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e03f      	b.n	8007bae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d106      	bne.n	8007b48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7fc fc56 	bl	80043f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2224      	movs	r2, #36	@ 0x24
 8007b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68da      	ldr	r2, [r3, #12]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fddf 	bl	8008724 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	691a      	ldr	r2, [r3, #16]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	695a      	ldr	r2, [r3, #20]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68da      	ldr	r2, [r3, #12]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2220      	movs	r2, #32
 8007ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2220      	movs	r2, #32
 8007ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b08a      	sub	sp, #40	@ 0x28
 8007bba:	af02      	add	r7, sp, #8
 8007bbc:	60f8      	str	r0, [r7, #12]
 8007bbe:	60b9      	str	r1, [r7, #8]
 8007bc0:	603b      	str	r3, [r7, #0]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b20      	cmp	r3, #32
 8007bd4:	d17c      	bne.n	8007cd0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d002      	beq.n	8007be2 <HAL_UART_Transmit+0x2c>
 8007bdc:	88fb      	ldrh	r3, [r7, #6]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e075      	b.n	8007cd2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d101      	bne.n	8007bf4 <HAL_UART_Transmit+0x3e>
 8007bf0:	2302      	movs	r3, #2
 8007bf2:	e06e      	b.n	8007cd2 <HAL_UART_Transmit+0x11c>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2221      	movs	r2, #33	@ 0x21
 8007c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c0a:	f7fc fd69 	bl	80046e0 <HAL_GetTick>
 8007c0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	88fa      	ldrh	r2, [r7, #6]
 8007c14:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	88fa      	ldrh	r2, [r7, #6]
 8007c1a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c24:	d108      	bne.n	8007c38 <HAL_UART_Transmit+0x82>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d104      	bne.n	8007c38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	61bb      	str	r3, [r7, #24]
 8007c36:	e003      	b.n	8007c40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8007c48:	e02a      	b.n	8007ca0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	2200      	movs	r2, #0
 8007c52:	2180      	movs	r1, #128	@ 0x80
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f000 fb1f 	bl	8008298 <UART_WaitOnFlagUntilTimeout>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d001      	beq.n	8007c64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e036      	b.n	8007cd2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10b      	bne.n	8007c82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	3302      	adds	r3, #2
 8007c7e:	61bb      	str	r3, [r7, #24]
 8007c80:	e007      	b.n	8007c92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	781a      	ldrb	r2, [r3, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1cf      	bne.n	8007c4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	2140      	movs	r1, #64	@ 0x40
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f000 faef 	bl	8008298 <UART_WaitOnFlagUntilTimeout>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e006      	b.n	8007cd2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2220      	movs	r2, #32
 8007cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	e000      	b.n	8007cd2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007cd0:	2302      	movs	r3, #2
  }
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3720      	adds	r7, #32
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b084      	sub	sp, #16
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	60f8      	str	r0, [r7, #12]
 8007ce2:	60b9      	str	r1, [r7, #8]
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b20      	cmp	r3, #32
 8007cf2:	d11d      	bne.n	8007d30 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d002      	beq.n	8007d00 <HAL_UART_Receive_IT+0x26>
 8007cfa:	88fb      	ldrh	r3, [r7, #6]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d101      	bne.n	8007d04 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e016      	b.n	8007d32 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d101      	bne.n	8007d12 <HAL_UART_Receive_IT+0x38>
 8007d0e:	2302      	movs	r3, #2
 8007d10:	e00f      	b.n	8007d32 <HAL_UART_Receive_IT+0x58>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007d20:	88fb      	ldrh	r3, [r7, #6]
 8007d22:	461a      	mov	r2, r3
 8007d24:	68b9      	ldr	r1, [r7, #8]
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f000 fb24 	bl	8008374 <UART_Start_Receive_IT>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	e000      	b.n	8007d32 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007d30:	2302      	movs	r3, #2
  }
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
	...

08007d3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b0ba      	sub	sp, #232	@ 0xe8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d72:	f003 030f 	and.w	r3, r3, #15
 8007d76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007d7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10f      	bne.n	8007da2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d86:	f003 0320 	and.w	r3, r3, #32
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d009      	beq.n	8007da2 <HAL_UART_IRQHandler+0x66>
 8007d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d92:	f003 0320 	and.w	r3, r3, #32
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d003      	beq.n	8007da2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fc07 	bl	80085ae <UART_Receive_IT>
      return;
 8007da0:	e256      	b.n	8008250 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007da2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f000 80de 	beq.w	8007f68 <HAL_UART_IRQHandler+0x22c>
 8007dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007db0:	f003 0301 	and.w	r3, r3, #1
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d106      	bne.n	8007dc6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dbc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 80d1 	beq.w	8007f68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dca:	f003 0301 	and.w	r3, r3, #1
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00b      	beq.n	8007dea <HAL_UART_IRQHandler+0xae>
 8007dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d005      	beq.n	8007dea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de2:	f043 0201 	orr.w	r2, r3, #1
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dee:	f003 0304 	and.w	r3, r3, #4
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d00b      	beq.n	8007e0e <HAL_UART_IRQHandler+0xd2>
 8007df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d005      	beq.n	8007e0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e06:	f043 0202 	orr.w	r2, r3, #2
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e12:	f003 0302 	and.w	r3, r3, #2
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00b      	beq.n	8007e32 <HAL_UART_IRQHandler+0xf6>
 8007e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d005      	beq.n	8007e32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e2a:	f043 0204 	orr.w	r2, r3, #4
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e36:	f003 0308 	and.w	r3, r3, #8
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d011      	beq.n	8007e62 <HAL_UART_IRQHandler+0x126>
 8007e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e42:	f003 0320 	and.w	r3, r3, #32
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d105      	bne.n	8007e56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007e4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d005      	beq.n	8007e62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e5a:	f043 0208 	orr.w	r2, r3, #8
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f000 81ed 	beq.w	8008246 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e70:	f003 0320 	and.w	r3, r3, #32
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d008      	beq.n	8007e8a <HAL_UART_IRQHandler+0x14e>
 8007e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e7c:	f003 0320 	and.w	r3, r3, #32
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d002      	beq.n	8007e8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 fb92 	bl	80085ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	695b      	ldr	r3, [r3, #20]
 8007e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e94:	2b40      	cmp	r3, #64	@ 0x40
 8007e96:	bf0c      	ite	eq
 8007e98:	2301      	moveq	r3, #1
 8007e9a:	2300      	movne	r3, #0
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea6:	f003 0308 	and.w	r3, r3, #8
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d103      	bne.n	8007eb6 <HAL_UART_IRQHandler+0x17a>
 8007eae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d04f      	beq.n	8007f56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fa9a 	bl	80083f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ec6:	2b40      	cmp	r3, #64	@ 0x40
 8007ec8:	d141      	bne.n	8007f4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	3314      	adds	r3, #20
 8007ed0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007ed8:	e853 3f00 	ldrex	r3, [r3]
 8007edc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007ee0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ee4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3314      	adds	r3, #20
 8007ef2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007ef6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007efa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007f02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007f06:	e841 2300 	strex	r3, r2, [r1]
 8007f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007f0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1d9      	bne.n	8007eca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d013      	beq.n	8007f46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f22:	4a7d      	ldr	r2, [pc, #500]	@ (8008118 <HAL_UART_IRQHandler+0x3dc>)
 8007f24:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7fc fd89 	bl	8004a42 <HAL_DMA_Abort_IT>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d016      	beq.n	8007f64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007f40:	4610      	mov	r0, r2
 8007f42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f44:	e00e      	b.n	8007f64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f990 	bl	800826c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f4c:	e00a      	b.n	8007f64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 f98c 	bl	800826c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f54:	e006      	b.n	8007f64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f988 	bl	800826c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8007f62:	e170      	b.n	8008246 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f64:	bf00      	nop
    return;
 8007f66:	e16e      	b.n	8008246 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	f040 814a 	bne.w	8008206 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f76:	f003 0310 	and.w	r3, r3, #16
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	f000 8143 	beq.w	8008206 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f84:	f003 0310 	and.w	r3, r3, #16
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f000 813c 	beq.w	8008206 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f8e:	2300      	movs	r3, #0
 8007f90:	60bb      	str	r3, [r7, #8]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	60bb      	str	r3, [r7, #8]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	60bb      	str	r3, [r7, #8]
 8007fa2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fae:	2b40      	cmp	r3, #64	@ 0x40
 8007fb0:	f040 80b4 	bne.w	800811c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007fc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f000 8140 	beq.w	800824a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007fce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	f080 8139 	bcs.w	800824a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007fde:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe4:	69db      	ldr	r3, [r3, #28]
 8007fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fea:	f000 8088 	beq.w	80080fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	330c      	adds	r3, #12
 8007ff4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ffc:	e853 3f00 	ldrex	r3, [r3]
 8008000:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008004:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008008:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800800c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	330c      	adds	r3, #12
 8008016:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800801a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800801e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008022:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008026:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800802a:	e841 2300 	strex	r3, r2, [r1]
 800802e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008032:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1d9      	bne.n	8007fee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	3314      	adds	r3, #20
 8008040:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008042:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008044:	e853 3f00 	ldrex	r3, [r3]
 8008048:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800804a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800804c:	f023 0301 	bic.w	r3, r3, #1
 8008050:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	3314      	adds	r3, #20
 800805a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800805e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008062:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008064:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008066:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800806a:	e841 2300 	strex	r3, r2, [r1]
 800806e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008070:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1e1      	bne.n	800803a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	3314      	adds	r3, #20
 800807c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008080:	e853 3f00 	ldrex	r3, [r3]
 8008084:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008086:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008088:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800808c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	3314      	adds	r3, #20
 8008096:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800809a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800809c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80080a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80080a2:	e841 2300 	strex	r3, r2, [r1]
 80080a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80080a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1e3      	bne.n	8008076 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2220      	movs	r2, #32
 80080b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	330c      	adds	r3, #12
 80080c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080c6:	e853 3f00 	ldrex	r3, [r3]
 80080ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80080cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080ce:	f023 0310 	bic.w	r3, r3, #16
 80080d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	330c      	adds	r3, #12
 80080dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80080e0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80080e2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80080e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80080e8:	e841 2300 	strex	r3, r2, [r1]
 80080ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80080ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1e3      	bne.n	80080bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7fc fc32 	bl	8004962 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008106:	b29b      	uxth	r3, r3
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	b29b      	uxth	r3, r3
 800810c:	4619      	mov	r1, r3
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f8b6 	bl	8008280 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008114:	e099      	b.n	800824a <HAL_UART_IRQHandler+0x50e>
 8008116:	bf00      	nop
 8008118:	080084b7 	.word	0x080084b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008124:	b29b      	uxth	r3, r3
 8008126:	1ad3      	subs	r3, r2, r3
 8008128:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008130:	b29b      	uxth	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	f000 808b 	beq.w	800824e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008138:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 8086 	beq.w	800824e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	330c      	adds	r3, #12
 8008148:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800814c:	e853 3f00 	ldrex	r3, [r3]
 8008150:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008154:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008158:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	330c      	adds	r3, #12
 8008162:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008166:	647a      	str	r2, [r7, #68]	@ 0x44
 8008168:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800816c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800816e:	e841 2300 	strex	r3, r2, [r1]
 8008172:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1e3      	bne.n	8008142 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	3314      	adds	r3, #20
 8008180:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008184:	e853 3f00 	ldrex	r3, [r3]
 8008188:	623b      	str	r3, [r7, #32]
   return(result);
 800818a:	6a3b      	ldr	r3, [r7, #32]
 800818c:	f023 0301 	bic.w	r3, r3, #1
 8008190:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	3314      	adds	r3, #20
 800819a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800819e:	633a      	str	r2, [r7, #48]	@ 0x30
 80081a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80081a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081a6:	e841 2300 	strex	r3, r2, [r1]
 80081aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80081ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1e3      	bne.n	800817a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2220      	movs	r2, #32
 80081b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	330c      	adds	r3, #12
 80081c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	e853 3f00 	ldrex	r3, [r3]
 80081ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f023 0310 	bic.w	r3, r3, #16
 80081d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	330c      	adds	r3, #12
 80081e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80081e4:	61fa      	str	r2, [r7, #28]
 80081e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e8:	69b9      	ldr	r1, [r7, #24]
 80081ea:	69fa      	ldr	r2, [r7, #28]
 80081ec:	e841 2300 	strex	r3, r2, [r1]
 80081f0:	617b      	str	r3, [r7, #20]
   return(result);
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1e3      	bne.n	80081c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80081f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80081fc:	4619      	mov	r1, r3
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f83e 	bl	8008280 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008204:	e023      	b.n	800824e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800820a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800820e:	2b00      	cmp	r3, #0
 8008210:	d009      	beq.n	8008226 <HAL_UART_IRQHandler+0x4ea>
 8008212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800821a:	2b00      	cmp	r3, #0
 800821c:	d003      	beq.n	8008226 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f95d 	bl	80084de <UART_Transmit_IT>
    return;
 8008224:	e014      	b.n	8008250 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800822a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00e      	beq.n	8008250 <HAL_UART_IRQHandler+0x514>
 8008232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800823a:	2b00      	cmp	r3, #0
 800823c:	d008      	beq.n	8008250 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f99d 	bl	800857e <UART_EndTransmit_IT>
    return;
 8008244:	e004      	b.n	8008250 <HAL_UART_IRQHandler+0x514>
    return;
 8008246:	bf00      	nop
 8008248:	e002      	b.n	8008250 <HAL_UART_IRQHandler+0x514>
      return;
 800824a:	bf00      	nop
 800824c:	e000      	b.n	8008250 <HAL_UART_IRQHandler+0x514>
      return;
 800824e:	bf00      	nop
  }
}
 8008250:	37e8      	adds	r7, #232	@ 0xe8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop

08008258 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008260:	bf00      	nop
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008274:	bf00      	nop
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	460b      	mov	r3, r1
 800828a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800828c:	bf00      	nop
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b090      	sub	sp, #64	@ 0x40
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	603b      	str	r3, [r7, #0]
 80082a4:	4613      	mov	r3, r2
 80082a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082a8:	e050      	b.n	800834c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b0:	d04c      	beq.n	800834c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80082b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d007      	beq.n	80082c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80082b8:	f7fc fa12 	bl	80046e0 <HAL_GetTick>
 80082bc:	4602      	mov	r2, r0
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d241      	bcs.n	800834c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	330c      	adds	r3, #12
 80082ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d2:	e853 3f00 	ldrex	r3, [r3]
 80082d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082da:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80082de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	330c      	adds	r3, #12
 80082e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80082e8:	637a      	str	r2, [r7, #52]	@ 0x34
 80082ea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80082ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80082f0:	e841 2300 	strex	r3, r2, [r1]
 80082f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80082f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1e5      	bne.n	80082c8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	3314      	adds	r3, #20
 8008302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	e853 3f00 	ldrex	r3, [r3]
 800830a:	613b      	str	r3, [r7, #16]
   return(result);
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	f023 0301 	bic.w	r3, r3, #1
 8008312:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	3314      	adds	r3, #20
 800831a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800831c:	623a      	str	r2, [r7, #32]
 800831e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008320:	69f9      	ldr	r1, [r7, #28]
 8008322:	6a3a      	ldr	r2, [r7, #32]
 8008324:	e841 2300 	strex	r3, r2, [r1]
 8008328:	61bb      	str	r3, [r7, #24]
   return(result);
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1e5      	bne.n	80082fc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2220      	movs	r2, #32
 8008334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2220      	movs	r2, #32
 800833c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e00f      	b.n	800836c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	4013      	ands	r3, r2
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	429a      	cmp	r2, r3
 800835a:	bf0c      	ite	eq
 800835c:	2301      	moveq	r3, #1
 800835e:	2300      	movne	r3, #0
 8008360:	b2db      	uxtb	r3, r3
 8008362:	461a      	mov	r2, r3
 8008364:	79fb      	ldrb	r3, [r7, #7]
 8008366:	429a      	cmp	r2, r3
 8008368:	d09f      	beq.n	80082aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3740      	adds	r7, #64	@ 0x40
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	4613      	mov	r3, r2
 8008380:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	88fa      	ldrh	r2, [r7, #6]
 800838c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	88fa      	ldrh	r2, [r7, #6]
 8008392:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2222      	movs	r2, #34	@ 0x22
 800839e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d007      	beq.n	80083c2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68da      	ldr	r2, [r3, #12]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80083c0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	695a      	ldr	r2, [r3, #20]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f042 0201 	orr.w	r2, r2, #1
 80083d0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68da      	ldr	r2, [r3, #12]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f042 0220 	orr.w	r2, r2, #32
 80083e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3714      	adds	r7, #20
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b095      	sub	sp, #84	@ 0x54
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	330c      	adds	r3, #12
 80083fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008402:	e853 3f00 	ldrex	r3, [r3]
 8008406:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800840e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	330c      	adds	r3, #12
 8008416:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008418:	643a      	str	r2, [r7, #64]	@ 0x40
 800841a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800841e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008420:	e841 2300 	strex	r3, r2, [r1]
 8008424:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1e5      	bne.n	80083f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	3314      	adds	r3, #20
 8008432:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008434:	6a3b      	ldr	r3, [r7, #32]
 8008436:	e853 3f00 	ldrex	r3, [r3]
 800843a:	61fb      	str	r3, [r7, #28]
   return(result);
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	f023 0301 	bic.w	r3, r3, #1
 8008442:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	3314      	adds	r3, #20
 800844a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800844c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800844e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008450:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008452:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008454:	e841 2300 	strex	r3, r2, [r1]
 8008458:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800845a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845c:	2b00      	cmp	r3, #0
 800845e:	d1e5      	bne.n	800842c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008464:	2b01      	cmp	r3, #1
 8008466:	d119      	bne.n	800849c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	330c      	adds	r3, #12
 800846e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	e853 3f00 	ldrex	r3, [r3]
 8008476:	60bb      	str	r3, [r7, #8]
   return(result);
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	f023 0310 	bic.w	r3, r3, #16
 800847e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	330c      	adds	r3, #12
 8008486:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008488:	61ba      	str	r2, [r7, #24]
 800848a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848c:	6979      	ldr	r1, [r7, #20]
 800848e:	69ba      	ldr	r2, [r7, #24]
 8008490:	e841 2300 	strex	r3, r2, [r1]
 8008494:	613b      	str	r3, [r7, #16]
   return(result);
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1e5      	bne.n	8008468 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2220      	movs	r2, #32
 80084a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80084aa:	bf00      	nop
 80084ac:	3754      	adds	r7, #84	@ 0x54
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f7ff fecb 	bl	800826c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084d6:	bf00      	nop
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80084de:	b480      	push	{r7}
 80084e0:	b085      	sub	sp, #20
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b21      	cmp	r3, #33	@ 0x21
 80084f0:	d13e      	bne.n	8008570 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084fa:	d114      	bne.n	8008526 <UART_Transmit_IT+0x48>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d110      	bne.n	8008526 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a1b      	ldr	r3, [r3, #32]
 8008508:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	881b      	ldrh	r3, [r3, #0]
 800850e:	461a      	mov	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008518:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a1b      	ldr	r3, [r3, #32]
 800851e:	1c9a      	adds	r2, r3, #2
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	621a      	str	r2, [r3, #32]
 8008524:	e008      	b.n	8008538 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	1c59      	adds	r1, r3, #1
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	6211      	str	r1, [r2, #32]
 8008530:	781a      	ldrb	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800853c:	b29b      	uxth	r3, r3
 800853e:	3b01      	subs	r3, #1
 8008540:	b29b      	uxth	r3, r3
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	4619      	mov	r1, r3
 8008546:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10f      	bne.n	800856c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68da      	ldr	r2, [r3, #12]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800855a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68da      	ldr	r2, [r3, #12]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800856a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800856c:	2300      	movs	r3, #0
 800856e:	e000      	b.n	8008572 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008570:	2302      	movs	r3, #2
  }
}
 8008572:	4618      	mov	r0, r3
 8008574:	3714      	adds	r7, #20
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr

0800857e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b082      	sub	sp, #8
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68da      	ldr	r2, [r3, #12]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008594:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2220      	movs	r2, #32
 800859a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7ff fe5a 	bl	8008258 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b08c      	sub	sp, #48	@ 0x30
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b22      	cmp	r3, #34	@ 0x22
 80085c0:	f040 80ab 	bne.w	800871a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085cc:	d117      	bne.n	80085fe <UART_Receive_IT+0x50>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	691b      	ldr	r3, [r3, #16]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d113      	bne.n	80085fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80085d6:	2300      	movs	r3, #0
 80085d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085de:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085f6:	1c9a      	adds	r2, r3, #2
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80085fc:	e026      	b.n	800864c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008602:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008604:	2300      	movs	r3, #0
 8008606:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008610:	d007      	beq.n	8008622 <UART_Receive_IT+0x74>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d10a      	bne.n	8008630 <UART_Receive_IT+0x82>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d106      	bne.n	8008630 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	b2da      	uxtb	r2, r3
 800862a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800862c:	701a      	strb	r2, [r3, #0]
 800862e:	e008      	b.n	8008642 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	b2db      	uxtb	r3, r3
 8008638:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800863c:	b2da      	uxtb	r2, r3
 800863e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008640:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008646:	1c5a      	adds	r2, r3, #1
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008650:	b29b      	uxth	r3, r3
 8008652:	3b01      	subs	r3, #1
 8008654:	b29b      	uxth	r3, r3
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	4619      	mov	r1, r3
 800865a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800865c:	2b00      	cmp	r3, #0
 800865e:	d15a      	bne.n	8008716 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68da      	ldr	r2, [r3, #12]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f022 0220 	bic.w	r2, r2, #32
 800866e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68da      	ldr	r2, [r3, #12]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800867e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	695a      	ldr	r2, [r3, #20]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f022 0201 	bic.w	r2, r2, #1
 800868e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2220      	movs	r2, #32
 8008694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800869c:	2b01      	cmp	r3, #1
 800869e:	d135      	bne.n	800870c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	330c      	adds	r3, #12
 80086ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	e853 3f00 	ldrex	r3, [r3]
 80086b4:	613b      	str	r3, [r7, #16]
   return(result);
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	f023 0310 	bic.w	r3, r3, #16
 80086bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	330c      	adds	r3, #12
 80086c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086c6:	623a      	str	r2, [r7, #32]
 80086c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ca:	69f9      	ldr	r1, [r7, #28]
 80086cc:	6a3a      	ldr	r2, [r7, #32]
 80086ce:	e841 2300 	strex	r3, r2, [r1]
 80086d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1e5      	bne.n	80086a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 0310 	and.w	r3, r3, #16
 80086e4:	2b10      	cmp	r3, #16
 80086e6:	d10a      	bne.n	80086fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086e8:	2300      	movs	r3, #0
 80086ea:	60fb      	str	r3, [r7, #12]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	60fb      	str	r3, [r7, #12]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	60fb      	str	r3, [r7, #12]
 80086fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008702:	4619      	mov	r1, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7ff fdbb 	bl	8008280 <HAL_UARTEx_RxEventCallback>
 800870a:	e002      	b.n	8008712 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f7fa f93f 	bl	8002990 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008712:	2300      	movs	r3, #0
 8008714:	e002      	b.n	800871c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008716:	2300      	movs	r3, #0
 8008718:	e000      	b.n	800871c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800871a:	2302      	movs	r3, #2
  }
}
 800871c:	4618      	mov	r0, r3
 800871e:	3730      	adds	r7, #48	@ 0x30
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008728:	b0c0      	sub	sp, #256	@ 0x100
 800872a:	af00      	add	r7, sp, #0
 800872c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800873c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008740:	68d9      	ldr	r1, [r3, #12]
 8008742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	ea40 0301 	orr.w	r3, r0, r1
 800874c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800874e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008752:	689a      	ldr	r2, [r3, #8]
 8008754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008758:	691b      	ldr	r3, [r3, #16]
 800875a:	431a      	orrs	r2, r3
 800875c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008760:	695b      	ldr	r3, [r3, #20]
 8008762:	431a      	orrs	r2, r3
 8008764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	4313      	orrs	r3, r2
 800876c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800877c:	f021 010c 	bic.w	r1, r1, #12
 8008780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800878a:	430b      	orrs	r3, r1
 800878c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800878e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	695b      	ldr	r3, [r3, #20]
 8008796:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800879a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800879e:	6999      	ldr	r1, [r3, #24]
 80087a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	ea40 0301 	orr.w	r3, r0, r1
 80087aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80087ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	4b8f      	ldr	r3, [pc, #572]	@ (80089f0 <UART_SetConfig+0x2cc>)
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d005      	beq.n	80087c4 <UART_SetConfig+0xa0>
 80087b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	4b8d      	ldr	r3, [pc, #564]	@ (80089f4 <UART_SetConfig+0x2d0>)
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d104      	bne.n	80087ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80087c4:	f7fe f9a8 	bl	8006b18 <HAL_RCC_GetPCLK2Freq>
 80087c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80087cc:	e003      	b.n	80087d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80087ce:	f7fe f98f 	bl	8006af0 <HAL_RCC_GetPCLK1Freq>
 80087d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087da:	69db      	ldr	r3, [r3, #28]
 80087dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087e0:	f040 810c 	bne.w	80089fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80087e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087e8:	2200      	movs	r2, #0
 80087ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80087ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80087f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80087f6:	4622      	mov	r2, r4
 80087f8:	462b      	mov	r3, r5
 80087fa:	1891      	adds	r1, r2, r2
 80087fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80087fe:	415b      	adcs	r3, r3
 8008800:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008802:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008806:	4621      	mov	r1, r4
 8008808:	eb12 0801 	adds.w	r8, r2, r1
 800880c:	4629      	mov	r1, r5
 800880e:	eb43 0901 	adc.w	r9, r3, r1
 8008812:	f04f 0200 	mov.w	r2, #0
 8008816:	f04f 0300 	mov.w	r3, #0
 800881a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800881e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008822:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008826:	4690      	mov	r8, r2
 8008828:	4699      	mov	r9, r3
 800882a:	4623      	mov	r3, r4
 800882c:	eb18 0303 	adds.w	r3, r8, r3
 8008830:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008834:	462b      	mov	r3, r5
 8008836:	eb49 0303 	adc.w	r3, r9, r3
 800883a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800883e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800884a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800884e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008852:	460b      	mov	r3, r1
 8008854:	18db      	adds	r3, r3, r3
 8008856:	653b      	str	r3, [r7, #80]	@ 0x50
 8008858:	4613      	mov	r3, r2
 800885a:	eb42 0303 	adc.w	r3, r2, r3
 800885e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008860:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008864:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008868:	f7f8 f9da 	bl	8000c20 <__aeabi_uldivmod>
 800886c:	4602      	mov	r2, r0
 800886e:	460b      	mov	r3, r1
 8008870:	4b61      	ldr	r3, [pc, #388]	@ (80089f8 <UART_SetConfig+0x2d4>)
 8008872:	fba3 2302 	umull	r2, r3, r3, r2
 8008876:	095b      	lsrs	r3, r3, #5
 8008878:	011c      	lsls	r4, r3, #4
 800887a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800887e:	2200      	movs	r2, #0
 8008880:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008884:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008888:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800888c:	4642      	mov	r2, r8
 800888e:	464b      	mov	r3, r9
 8008890:	1891      	adds	r1, r2, r2
 8008892:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008894:	415b      	adcs	r3, r3
 8008896:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008898:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800889c:	4641      	mov	r1, r8
 800889e:	eb12 0a01 	adds.w	sl, r2, r1
 80088a2:	4649      	mov	r1, r9
 80088a4:	eb43 0b01 	adc.w	fp, r3, r1
 80088a8:	f04f 0200 	mov.w	r2, #0
 80088ac:	f04f 0300 	mov.w	r3, #0
 80088b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80088b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80088b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088bc:	4692      	mov	sl, r2
 80088be:	469b      	mov	fp, r3
 80088c0:	4643      	mov	r3, r8
 80088c2:	eb1a 0303 	adds.w	r3, sl, r3
 80088c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80088ca:	464b      	mov	r3, r9
 80088cc:	eb4b 0303 	adc.w	r3, fp, r3
 80088d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80088d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80088e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80088e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80088e8:	460b      	mov	r3, r1
 80088ea:	18db      	adds	r3, r3, r3
 80088ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80088ee:	4613      	mov	r3, r2
 80088f0:	eb42 0303 	adc.w	r3, r2, r3
 80088f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80088f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80088fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80088fe:	f7f8 f98f 	bl	8000c20 <__aeabi_uldivmod>
 8008902:	4602      	mov	r2, r0
 8008904:	460b      	mov	r3, r1
 8008906:	4611      	mov	r1, r2
 8008908:	4b3b      	ldr	r3, [pc, #236]	@ (80089f8 <UART_SetConfig+0x2d4>)
 800890a:	fba3 2301 	umull	r2, r3, r3, r1
 800890e:	095b      	lsrs	r3, r3, #5
 8008910:	2264      	movs	r2, #100	@ 0x64
 8008912:	fb02 f303 	mul.w	r3, r2, r3
 8008916:	1acb      	subs	r3, r1, r3
 8008918:	00db      	lsls	r3, r3, #3
 800891a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800891e:	4b36      	ldr	r3, [pc, #216]	@ (80089f8 <UART_SetConfig+0x2d4>)
 8008920:	fba3 2302 	umull	r2, r3, r3, r2
 8008924:	095b      	lsrs	r3, r3, #5
 8008926:	005b      	lsls	r3, r3, #1
 8008928:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800892c:	441c      	add	r4, r3
 800892e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008932:	2200      	movs	r2, #0
 8008934:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008938:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800893c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008940:	4642      	mov	r2, r8
 8008942:	464b      	mov	r3, r9
 8008944:	1891      	adds	r1, r2, r2
 8008946:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008948:	415b      	adcs	r3, r3
 800894a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800894c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008950:	4641      	mov	r1, r8
 8008952:	1851      	adds	r1, r2, r1
 8008954:	6339      	str	r1, [r7, #48]	@ 0x30
 8008956:	4649      	mov	r1, r9
 8008958:	414b      	adcs	r3, r1
 800895a:	637b      	str	r3, [r7, #52]	@ 0x34
 800895c:	f04f 0200 	mov.w	r2, #0
 8008960:	f04f 0300 	mov.w	r3, #0
 8008964:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008968:	4659      	mov	r1, fp
 800896a:	00cb      	lsls	r3, r1, #3
 800896c:	4651      	mov	r1, sl
 800896e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008972:	4651      	mov	r1, sl
 8008974:	00ca      	lsls	r2, r1, #3
 8008976:	4610      	mov	r0, r2
 8008978:	4619      	mov	r1, r3
 800897a:	4603      	mov	r3, r0
 800897c:	4642      	mov	r2, r8
 800897e:	189b      	adds	r3, r3, r2
 8008980:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008984:	464b      	mov	r3, r9
 8008986:	460a      	mov	r2, r1
 8008988:	eb42 0303 	adc.w	r3, r2, r3
 800898c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800899c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80089a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80089a4:	460b      	mov	r3, r1
 80089a6:	18db      	adds	r3, r3, r3
 80089a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089aa:	4613      	mov	r3, r2
 80089ac:	eb42 0303 	adc.w	r3, r2, r3
 80089b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80089b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80089ba:	f7f8 f931 	bl	8000c20 <__aeabi_uldivmod>
 80089be:	4602      	mov	r2, r0
 80089c0:	460b      	mov	r3, r1
 80089c2:	4b0d      	ldr	r3, [pc, #52]	@ (80089f8 <UART_SetConfig+0x2d4>)
 80089c4:	fba3 1302 	umull	r1, r3, r3, r2
 80089c8:	095b      	lsrs	r3, r3, #5
 80089ca:	2164      	movs	r1, #100	@ 0x64
 80089cc:	fb01 f303 	mul.w	r3, r1, r3
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	00db      	lsls	r3, r3, #3
 80089d4:	3332      	adds	r3, #50	@ 0x32
 80089d6:	4a08      	ldr	r2, [pc, #32]	@ (80089f8 <UART_SetConfig+0x2d4>)
 80089d8:	fba2 2303 	umull	r2, r3, r2, r3
 80089dc:	095b      	lsrs	r3, r3, #5
 80089de:	f003 0207 	and.w	r2, r3, #7
 80089e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4422      	add	r2, r4
 80089ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80089ec:	e106      	b.n	8008bfc <UART_SetConfig+0x4d8>
 80089ee:	bf00      	nop
 80089f0:	40011000 	.word	0x40011000
 80089f4:	40011400 	.word	0x40011400
 80089f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80089fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a00:	2200      	movs	r2, #0
 8008a02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008a06:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008a0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008a0e:	4642      	mov	r2, r8
 8008a10:	464b      	mov	r3, r9
 8008a12:	1891      	adds	r1, r2, r2
 8008a14:	6239      	str	r1, [r7, #32]
 8008a16:	415b      	adcs	r3, r3
 8008a18:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a1e:	4641      	mov	r1, r8
 8008a20:	1854      	adds	r4, r2, r1
 8008a22:	4649      	mov	r1, r9
 8008a24:	eb43 0501 	adc.w	r5, r3, r1
 8008a28:	f04f 0200 	mov.w	r2, #0
 8008a2c:	f04f 0300 	mov.w	r3, #0
 8008a30:	00eb      	lsls	r3, r5, #3
 8008a32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a36:	00e2      	lsls	r2, r4, #3
 8008a38:	4614      	mov	r4, r2
 8008a3a:	461d      	mov	r5, r3
 8008a3c:	4643      	mov	r3, r8
 8008a3e:	18e3      	adds	r3, r4, r3
 8008a40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008a44:	464b      	mov	r3, r9
 8008a46:	eb45 0303 	adc.w	r3, r5, r3
 8008a4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008a5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008a5e:	f04f 0200 	mov.w	r2, #0
 8008a62:	f04f 0300 	mov.w	r3, #0
 8008a66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008a6a:	4629      	mov	r1, r5
 8008a6c:	008b      	lsls	r3, r1, #2
 8008a6e:	4621      	mov	r1, r4
 8008a70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a74:	4621      	mov	r1, r4
 8008a76:	008a      	lsls	r2, r1, #2
 8008a78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008a7c:	f7f8 f8d0 	bl	8000c20 <__aeabi_uldivmod>
 8008a80:	4602      	mov	r2, r0
 8008a82:	460b      	mov	r3, r1
 8008a84:	4b60      	ldr	r3, [pc, #384]	@ (8008c08 <UART_SetConfig+0x4e4>)
 8008a86:	fba3 2302 	umull	r2, r3, r3, r2
 8008a8a:	095b      	lsrs	r3, r3, #5
 8008a8c:	011c      	lsls	r4, r3, #4
 8008a8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a92:	2200      	movs	r2, #0
 8008a94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008a98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008a9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008aa0:	4642      	mov	r2, r8
 8008aa2:	464b      	mov	r3, r9
 8008aa4:	1891      	adds	r1, r2, r2
 8008aa6:	61b9      	str	r1, [r7, #24]
 8008aa8:	415b      	adcs	r3, r3
 8008aaa:	61fb      	str	r3, [r7, #28]
 8008aac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ab0:	4641      	mov	r1, r8
 8008ab2:	1851      	adds	r1, r2, r1
 8008ab4:	6139      	str	r1, [r7, #16]
 8008ab6:	4649      	mov	r1, r9
 8008ab8:	414b      	adcs	r3, r1
 8008aba:	617b      	str	r3, [r7, #20]
 8008abc:	f04f 0200 	mov.w	r2, #0
 8008ac0:	f04f 0300 	mov.w	r3, #0
 8008ac4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ac8:	4659      	mov	r1, fp
 8008aca:	00cb      	lsls	r3, r1, #3
 8008acc:	4651      	mov	r1, sl
 8008ace:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ad2:	4651      	mov	r1, sl
 8008ad4:	00ca      	lsls	r2, r1, #3
 8008ad6:	4610      	mov	r0, r2
 8008ad8:	4619      	mov	r1, r3
 8008ada:	4603      	mov	r3, r0
 8008adc:	4642      	mov	r2, r8
 8008ade:	189b      	adds	r3, r3, r2
 8008ae0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008ae4:	464b      	mov	r3, r9
 8008ae6:	460a      	mov	r2, r1
 8008ae8:	eb42 0303 	adc.w	r3, r2, r3
 8008aec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008afa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008afc:	f04f 0200 	mov.w	r2, #0
 8008b00:	f04f 0300 	mov.w	r3, #0
 8008b04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008b08:	4649      	mov	r1, r9
 8008b0a:	008b      	lsls	r3, r1, #2
 8008b0c:	4641      	mov	r1, r8
 8008b0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b12:	4641      	mov	r1, r8
 8008b14:	008a      	lsls	r2, r1, #2
 8008b16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008b1a:	f7f8 f881 	bl	8000c20 <__aeabi_uldivmod>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	4611      	mov	r1, r2
 8008b24:	4b38      	ldr	r3, [pc, #224]	@ (8008c08 <UART_SetConfig+0x4e4>)
 8008b26:	fba3 2301 	umull	r2, r3, r3, r1
 8008b2a:	095b      	lsrs	r3, r3, #5
 8008b2c:	2264      	movs	r2, #100	@ 0x64
 8008b2e:	fb02 f303 	mul.w	r3, r2, r3
 8008b32:	1acb      	subs	r3, r1, r3
 8008b34:	011b      	lsls	r3, r3, #4
 8008b36:	3332      	adds	r3, #50	@ 0x32
 8008b38:	4a33      	ldr	r2, [pc, #204]	@ (8008c08 <UART_SetConfig+0x4e4>)
 8008b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b3e:	095b      	lsrs	r3, r3, #5
 8008b40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008b44:	441c      	add	r4, r3
 8008b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8008b4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008b50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008b54:	4642      	mov	r2, r8
 8008b56:	464b      	mov	r3, r9
 8008b58:	1891      	adds	r1, r2, r2
 8008b5a:	60b9      	str	r1, [r7, #8]
 8008b5c:	415b      	adcs	r3, r3
 8008b5e:	60fb      	str	r3, [r7, #12]
 8008b60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b64:	4641      	mov	r1, r8
 8008b66:	1851      	adds	r1, r2, r1
 8008b68:	6039      	str	r1, [r7, #0]
 8008b6a:	4649      	mov	r1, r9
 8008b6c:	414b      	adcs	r3, r1
 8008b6e:	607b      	str	r3, [r7, #4]
 8008b70:	f04f 0200 	mov.w	r2, #0
 8008b74:	f04f 0300 	mov.w	r3, #0
 8008b78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008b7c:	4659      	mov	r1, fp
 8008b7e:	00cb      	lsls	r3, r1, #3
 8008b80:	4651      	mov	r1, sl
 8008b82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b86:	4651      	mov	r1, sl
 8008b88:	00ca      	lsls	r2, r1, #3
 8008b8a:	4610      	mov	r0, r2
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	4603      	mov	r3, r0
 8008b90:	4642      	mov	r2, r8
 8008b92:	189b      	adds	r3, r3, r2
 8008b94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b96:	464b      	mov	r3, r9
 8008b98:	460a      	mov	r2, r1
 8008b9a:	eb42 0303 	adc.w	r3, r2, r3
 8008b9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008baa:	667a      	str	r2, [r7, #100]	@ 0x64
 8008bac:	f04f 0200 	mov.w	r2, #0
 8008bb0:	f04f 0300 	mov.w	r3, #0
 8008bb4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008bb8:	4649      	mov	r1, r9
 8008bba:	008b      	lsls	r3, r1, #2
 8008bbc:	4641      	mov	r1, r8
 8008bbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bc2:	4641      	mov	r1, r8
 8008bc4:	008a      	lsls	r2, r1, #2
 8008bc6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008bca:	f7f8 f829 	bl	8000c20 <__aeabi_uldivmod>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8008c08 <UART_SetConfig+0x4e4>)
 8008bd4:	fba3 1302 	umull	r1, r3, r3, r2
 8008bd8:	095b      	lsrs	r3, r3, #5
 8008bda:	2164      	movs	r1, #100	@ 0x64
 8008bdc:	fb01 f303 	mul.w	r3, r1, r3
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	011b      	lsls	r3, r3, #4
 8008be4:	3332      	adds	r3, #50	@ 0x32
 8008be6:	4a08      	ldr	r2, [pc, #32]	@ (8008c08 <UART_SetConfig+0x4e4>)
 8008be8:	fba2 2303 	umull	r2, r3, r2, r3
 8008bec:	095b      	lsrs	r3, r3, #5
 8008bee:	f003 020f 	and.w	r2, r3, #15
 8008bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4422      	add	r2, r4
 8008bfa:	609a      	str	r2, [r3, #8]
}
 8008bfc:	bf00      	nop
 8008bfe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008c02:	46bd      	mov	sp, r7
 8008c04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c08:	51eb851f 	.word	0x51eb851f

08008c0c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008c10:	4904      	ldr	r1, [pc, #16]	@ (8008c24 <MX_FATFS_Init+0x18>)
 8008c12:	4805      	ldr	r0, [pc, #20]	@ (8008c28 <MX_FATFS_Init+0x1c>)
 8008c14:	f000 f8b0 	bl	8008d78 <FATFS_LinkDriver>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	4b03      	ldr	r3, [pc, #12]	@ (8008c2c <MX_FATFS_Init+0x20>)
 8008c1e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008c20:	bf00      	nop
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	2000040c 	.word	0x2000040c
 8008c28:	20000020 	.word	0x20000020
 8008c2c:	20000408 	.word	0x20000408

08008c30 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	4603      	mov	r3, r0
 8008c38:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8008c3a:	4b06      	ldr	r3, [pc, #24]	@ (8008c54 <USER_initialize+0x24>)
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008c40:	4b04      	ldr	r3, [pc, #16]	@ (8008c54 <USER_initialize+0x24>)
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	370c      	adds	r7, #12
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	2000001d 	.word	0x2000001d

08008c58 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	4603      	mov	r3, r0
 8008c60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8008c62:	4b06      	ldr	r3, [pc, #24]	@ (8008c7c <USER_status+0x24>)
 8008c64:	2201      	movs	r2, #1
 8008c66:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008c68:	4b04      	ldr	r3, [pc, #16]	@ (8008c7c <USER_status+0x24>)
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	370c      	adds	r7, #12
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	2000001d 	.word	0x2000001d

08008c80 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60b9      	str	r1, [r7, #8]
 8008c88:	607a      	str	r2, [r7, #4]
 8008c8a:	603b      	str	r3, [r7, #0]
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8008c90:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3714      	adds	r7, #20
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr

08008c9e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008c9e:	b480      	push	{r7}
 8008ca0:	b085      	sub	sp, #20
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
 8008ca8:	603b      	str	r3, [r7, #0]
 8008caa:	4603      	mov	r3, r0
 8008cac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8008cae:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3714      	adds	r7, #20
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	603a      	str	r2, [r7, #0]
 8008cc6:	71fb      	strb	r3, [r7, #7]
 8008cc8:	460b      	mov	r3, r1
 8008cca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	73fb      	strb	r3, [r7, #15]
    return res;
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
	...

08008ce0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b087      	sub	sp, #28
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	4613      	mov	r3, r2
 8008cec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8008d74 <FATFS_LinkDriverEx+0x94>)
 8008cf8:	7a5b      	ldrb	r3, [r3, #9]
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d131      	bne.n	8008d64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008d00:	4b1c      	ldr	r3, [pc, #112]	@ (8008d74 <FATFS_LinkDriverEx+0x94>)
 8008d02:	7a5b      	ldrb	r3, [r3, #9]
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	461a      	mov	r2, r3
 8008d08:	4b1a      	ldr	r3, [pc, #104]	@ (8008d74 <FATFS_LinkDriverEx+0x94>)
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008d0e:	4b19      	ldr	r3, [pc, #100]	@ (8008d74 <FATFS_LinkDriverEx+0x94>)
 8008d10:	7a5b      	ldrb	r3, [r3, #9]
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	4a17      	ldr	r2, [pc, #92]	@ (8008d74 <FATFS_LinkDriverEx+0x94>)
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4413      	add	r3, r2
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008d1e:	4b15      	ldr	r3, [pc, #84]	@ (8008d74 <FATFS_LinkDriverEx+0x94>)
 8008d20:	7a5b      	ldrb	r3, [r3, #9]
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	461a      	mov	r2, r3
 8008d26:	4b13      	ldr	r3, [pc, #76]	@ (8008d74 <FATFS_LinkDriverEx+0x94>)
 8008d28:	4413      	add	r3, r2
 8008d2a:	79fa      	ldrb	r2, [r7, #7]
 8008d2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008d2e:	4b11      	ldr	r3, [pc, #68]	@ (8008d74 <FATFS_LinkDriverEx+0x94>)
 8008d30:	7a5b      	ldrb	r3, [r3, #9]
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	1c5a      	adds	r2, r3, #1
 8008d36:	b2d1      	uxtb	r1, r2
 8008d38:	4a0e      	ldr	r2, [pc, #56]	@ (8008d74 <FATFS_LinkDriverEx+0x94>)
 8008d3a:	7251      	strb	r1, [r2, #9]
 8008d3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008d3e:	7dbb      	ldrb	r3, [r7, #22]
 8008d40:	3330      	adds	r3, #48	@ 0x30
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	223a      	movs	r2, #58	@ 0x3a
 8008d4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	3302      	adds	r3, #2
 8008d54:	222f      	movs	r2, #47	@ 0x2f
 8008d56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	3303      	adds	r3, #3
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008d60:	2300      	movs	r3, #0
 8008d62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	371c      	adds	r7, #28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	20000410 	.word	0x20000410

08008d78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008d82:	2200      	movs	r2, #0
 8008d84:	6839      	ldr	r1, [r7, #0]
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f7ff ffaa 	bl	8008ce0 <FATFS_LinkDriverEx>
 8008d8c:	4603      	mov	r3, r0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3708      	adds	r7, #8
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
	...

08008d98 <malloc>:
 8008d98:	4b02      	ldr	r3, [pc, #8]	@ (8008da4 <malloc+0xc>)
 8008d9a:	4601      	mov	r1, r0
 8008d9c:	6818      	ldr	r0, [r3, #0]
 8008d9e:	f000 b82d 	b.w	8008dfc <_malloc_r>
 8008da2:	bf00      	nop
 8008da4:	20000034 	.word	0x20000034

08008da8 <free>:
 8008da8:	4b02      	ldr	r3, [pc, #8]	@ (8008db4 <free+0xc>)
 8008daa:	4601      	mov	r1, r0
 8008dac:	6818      	ldr	r0, [r3, #0]
 8008dae:	f000 b903 	b.w	8008fb8 <_free_r>
 8008db2:	bf00      	nop
 8008db4:	20000034 	.word	0x20000034

08008db8 <sbrk_aligned>:
 8008db8:	b570      	push	{r4, r5, r6, lr}
 8008dba:	4e0f      	ldr	r6, [pc, #60]	@ (8008df8 <sbrk_aligned+0x40>)
 8008dbc:	460c      	mov	r4, r1
 8008dbe:	6831      	ldr	r1, [r6, #0]
 8008dc0:	4605      	mov	r5, r0
 8008dc2:	b911      	cbnz	r1, 8008dca <sbrk_aligned+0x12>
 8008dc4:	f000 f8ae 	bl	8008f24 <_sbrk_r>
 8008dc8:	6030      	str	r0, [r6, #0]
 8008dca:	4621      	mov	r1, r4
 8008dcc:	4628      	mov	r0, r5
 8008dce:	f000 f8a9 	bl	8008f24 <_sbrk_r>
 8008dd2:	1c43      	adds	r3, r0, #1
 8008dd4:	d103      	bne.n	8008dde <sbrk_aligned+0x26>
 8008dd6:	f04f 34ff 	mov.w	r4, #4294967295
 8008dda:	4620      	mov	r0, r4
 8008ddc:	bd70      	pop	{r4, r5, r6, pc}
 8008dde:	1cc4      	adds	r4, r0, #3
 8008de0:	f024 0403 	bic.w	r4, r4, #3
 8008de4:	42a0      	cmp	r0, r4
 8008de6:	d0f8      	beq.n	8008dda <sbrk_aligned+0x22>
 8008de8:	1a21      	subs	r1, r4, r0
 8008dea:	4628      	mov	r0, r5
 8008dec:	f000 f89a 	bl	8008f24 <_sbrk_r>
 8008df0:	3001      	adds	r0, #1
 8008df2:	d1f2      	bne.n	8008dda <sbrk_aligned+0x22>
 8008df4:	e7ef      	b.n	8008dd6 <sbrk_aligned+0x1e>
 8008df6:	bf00      	nop
 8008df8:	2000041c 	.word	0x2000041c

08008dfc <_malloc_r>:
 8008dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e00:	1ccd      	adds	r5, r1, #3
 8008e02:	f025 0503 	bic.w	r5, r5, #3
 8008e06:	3508      	adds	r5, #8
 8008e08:	2d0c      	cmp	r5, #12
 8008e0a:	bf38      	it	cc
 8008e0c:	250c      	movcc	r5, #12
 8008e0e:	2d00      	cmp	r5, #0
 8008e10:	4606      	mov	r6, r0
 8008e12:	db01      	blt.n	8008e18 <_malloc_r+0x1c>
 8008e14:	42a9      	cmp	r1, r5
 8008e16:	d904      	bls.n	8008e22 <_malloc_r+0x26>
 8008e18:	230c      	movs	r3, #12
 8008e1a:	6033      	str	r3, [r6, #0]
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ef8 <_malloc_r+0xfc>
 8008e26:	f000 f869 	bl	8008efc <__malloc_lock>
 8008e2a:	f8d8 3000 	ldr.w	r3, [r8]
 8008e2e:	461c      	mov	r4, r3
 8008e30:	bb44      	cbnz	r4, 8008e84 <_malloc_r+0x88>
 8008e32:	4629      	mov	r1, r5
 8008e34:	4630      	mov	r0, r6
 8008e36:	f7ff ffbf 	bl	8008db8 <sbrk_aligned>
 8008e3a:	1c43      	adds	r3, r0, #1
 8008e3c:	4604      	mov	r4, r0
 8008e3e:	d158      	bne.n	8008ef2 <_malloc_r+0xf6>
 8008e40:	f8d8 4000 	ldr.w	r4, [r8]
 8008e44:	4627      	mov	r7, r4
 8008e46:	2f00      	cmp	r7, #0
 8008e48:	d143      	bne.n	8008ed2 <_malloc_r+0xd6>
 8008e4a:	2c00      	cmp	r4, #0
 8008e4c:	d04b      	beq.n	8008ee6 <_malloc_r+0xea>
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	4639      	mov	r1, r7
 8008e52:	4630      	mov	r0, r6
 8008e54:	eb04 0903 	add.w	r9, r4, r3
 8008e58:	f000 f864 	bl	8008f24 <_sbrk_r>
 8008e5c:	4581      	cmp	r9, r0
 8008e5e:	d142      	bne.n	8008ee6 <_malloc_r+0xea>
 8008e60:	6821      	ldr	r1, [r4, #0]
 8008e62:	1a6d      	subs	r5, r5, r1
 8008e64:	4629      	mov	r1, r5
 8008e66:	4630      	mov	r0, r6
 8008e68:	f7ff ffa6 	bl	8008db8 <sbrk_aligned>
 8008e6c:	3001      	adds	r0, #1
 8008e6e:	d03a      	beq.n	8008ee6 <_malloc_r+0xea>
 8008e70:	6823      	ldr	r3, [r4, #0]
 8008e72:	442b      	add	r3, r5
 8008e74:	6023      	str	r3, [r4, #0]
 8008e76:	f8d8 3000 	ldr.w	r3, [r8]
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	bb62      	cbnz	r2, 8008ed8 <_malloc_r+0xdc>
 8008e7e:	f8c8 7000 	str.w	r7, [r8]
 8008e82:	e00f      	b.n	8008ea4 <_malloc_r+0xa8>
 8008e84:	6822      	ldr	r2, [r4, #0]
 8008e86:	1b52      	subs	r2, r2, r5
 8008e88:	d420      	bmi.n	8008ecc <_malloc_r+0xd0>
 8008e8a:	2a0b      	cmp	r2, #11
 8008e8c:	d917      	bls.n	8008ebe <_malloc_r+0xc2>
 8008e8e:	1961      	adds	r1, r4, r5
 8008e90:	42a3      	cmp	r3, r4
 8008e92:	6025      	str	r5, [r4, #0]
 8008e94:	bf18      	it	ne
 8008e96:	6059      	strne	r1, [r3, #4]
 8008e98:	6863      	ldr	r3, [r4, #4]
 8008e9a:	bf08      	it	eq
 8008e9c:	f8c8 1000 	streq.w	r1, [r8]
 8008ea0:	5162      	str	r2, [r4, r5]
 8008ea2:	604b      	str	r3, [r1, #4]
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	f000 f82f 	bl	8008f08 <__malloc_unlock>
 8008eaa:	f104 000b 	add.w	r0, r4, #11
 8008eae:	1d23      	adds	r3, r4, #4
 8008eb0:	f020 0007 	bic.w	r0, r0, #7
 8008eb4:	1ac2      	subs	r2, r0, r3
 8008eb6:	bf1c      	itt	ne
 8008eb8:	1a1b      	subne	r3, r3, r0
 8008eba:	50a3      	strne	r3, [r4, r2]
 8008ebc:	e7af      	b.n	8008e1e <_malloc_r+0x22>
 8008ebe:	6862      	ldr	r2, [r4, #4]
 8008ec0:	42a3      	cmp	r3, r4
 8008ec2:	bf0c      	ite	eq
 8008ec4:	f8c8 2000 	streq.w	r2, [r8]
 8008ec8:	605a      	strne	r2, [r3, #4]
 8008eca:	e7eb      	b.n	8008ea4 <_malloc_r+0xa8>
 8008ecc:	4623      	mov	r3, r4
 8008ece:	6864      	ldr	r4, [r4, #4]
 8008ed0:	e7ae      	b.n	8008e30 <_malloc_r+0x34>
 8008ed2:	463c      	mov	r4, r7
 8008ed4:	687f      	ldr	r7, [r7, #4]
 8008ed6:	e7b6      	b.n	8008e46 <_malloc_r+0x4a>
 8008ed8:	461a      	mov	r2, r3
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	42a3      	cmp	r3, r4
 8008ede:	d1fb      	bne.n	8008ed8 <_malloc_r+0xdc>
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	6053      	str	r3, [r2, #4]
 8008ee4:	e7de      	b.n	8008ea4 <_malloc_r+0xa8>
 8008ee6:	230c      	movs	r3, #12
 8008ee8:	6033      	str	r3, [r6, #0]
 8008eea:	4630      	mov	r0, r6
 8008eec:	f000 f80c 	bl	8008f08 <__malloc_unlock>
 8008ef0:	e794      	b.n	8008e1c <_malloc_r+0x20>
 8008ef2:	6005      	str	r5, [r0, #0]
 8008ef4:	e7d6      	b.n	8008ea4 <_malloc_r+0xa8>
 8008ef6:	bf00      	nop
 8008ef8:	20000420 	.word	0x20000420

08008efc <__malloc_lock>:
 8008efc:	4801      	ldr	r0, [pc, #4]	@ (8008f04 <__malloc_lock+0x8>)
 8008efe:	f000 b84b 	b.w	8008f98 <__retarget_lock_acquire_recursive>
 8008f02:	bf00      	nop
 8008f04:	20000560 	.word	0x20000560

08008f08 <__malloc_unlock>:
 8008f08:	4801      	ldr	r0, [pc, #4]	@ (8008f10 <__malloc_unlock+0x8>)
 8008f0a:	f000 b846 	b.w	8008f9a <__retarget_lock_release_recursive>
 8008f0e:	bf00      	nop
 8008f10:	20000560 	.word	0x20000560

08008f14 <memset>:
 8008f14:	4402      	add	r2, r0
 8008f16:	4603      	mov	r3, r0
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d100      	bne.n	8008f1e <memset+0xa>
 8008f1c:	4770      	bx	lr
 8008f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f22:	e7f9      	b.n	8008f18 <memset+0x4>

08008f24 <_sbrk_r>:
 8008f24:	b538      	push	{r3, r4, r5, lr}
 8008f26:	4d06      	ldr	r5, [pc, #24]	@ (8008f40 <_sbrk_r+0x1c>)
 8008f28:	2300      	movs	r3, #0
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	4608      	mov	r0, r1
 8008f2e:	602b      	str	r3, [r5, #0]
 8008f30:	f7fb fafe 	bl	8004530 <_sbrk>
 8008f34:	1c43      	adds	r3, r0, #1
 8008f36:	d102      	bne.n	8008f3e <_sbrk_r+0x1a>
 8008f38:	682b      	ldr	r3, [r5, #0]
 8008f3a:	b103      	cbz	r3, 8008f3e <_sbrk_r+0x1a>
 8008f3c:	6023      	str	r3, [r4, #0]
 8008f3e:	bd38      	pop	{r3, r4, r5, pc}
 8008f40:	2000055c 	.word	0x2000055c

08008f44 <__errno>:
 8008f44:	4b01      	ldr	r3, [pc, #4]	@ (8008f4c <__errno+0x8>)
 8008f46:	6818      	ldr	r0, [r3, #0]
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop
 8008f4c:	20000034 	.word	0x20000034

08008f50 <__libc_init_array>:
 8008f50:	b570      	push	{r4, r5, r6, lr}
 8008f52:	4d0d      	ldr	r5, [pc, #52]	@ (8008f88 <__libc_init_array+0x38>)
 8008f54:	4c0d      	ldr	r4, [pc, #52]	@ (8008f8c <__libc_init_array+0x3c>)
 8008f56:	1b64      	subs	r4, r4, r5
 8008f58:	10a4      	asrs	r4, r4, #2
 8008f5a:	2600      	movs	r6, #0
 8008f5c:	42a6      	cmp	r6, r4
 8008f5e:	d109      	bne.n	8008f74 <__libc_init_array+0x24>
 8008f60:	4d0b      	ldr	r5, [pc, #44]	@ (8008f90 <__libc_init_array+0x40>)
 8008f62:	4c0c      	ldr	r4, [pc, #48]	@ (8008f94 <__libc_init_array+0x44>)
 8008f64:	f001 f96e 	bl	800a244 <_init>
 8008f68:	1b64      	subs	r4, r4, r5
 8008f6a:	10a4      	asrs	r4, r4, #2
 8008f6c:	2600      	movs	r6, #0
 8008f6e:	42a6      	cmp	r6, r4
 8008f70:	d105      	bne.n	8008f7e <__libc_init_array+0x2e>
 8008f72:	bd70      	pop	{r4, r5, r6, pc}
 8008f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f78:	4798      	blx	r3
 8008f7a:	3601      	adds	r6, #1
 8008f7c:	e7ee      	b.n	8008f5c <__libc_init_array+0xc>
 8008f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f82:	4798      	blx	r3
 8008f84:	3601      	adds	r6, #1
 8008f86:	e7f2      	b.n	8008f6e <__libc_init_array+0x1e>
 8008f88:	0800a2e8 	.word	0x0800a2e8
 8008f8c:	0800a2e8 	.word	0x0800a2e8
 8008f90:	0800a2e8 	.word	0x0800a2e8
 8008f94:	0800a2ec 	.word	0x0800a2ec

08008f98 <__retarget_lock_acquire_recursive>:
 8008f98:	4770      	bx	lr

08008f9a <__retarget_lock_release_recursive>:
 8008f9a:	4770      	bx	lr

08008f9c <memcpy>:
 8008f9c:	440a      	add	r2, r1
 8008f9e:	4291      	cmp	r1, r2
 8008fa0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fa4:	d100      	bne.n	8008fa8 <memcpy+0xc>
 8008fa6:	4770      	bx	lr
 8008fa8:	b510      	push	{r4, lr}
 8008faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fb2:	4291      	cmp	r1, r2
 8008fb4:	d1f9      	bne.n	8008faa <memcpy+0xe>
 8008fb6:	bd10      	pop	{r4, pc}

08008fb8 <_free_r>:
 8008fb8:	b538      	push	{r3, r4, r5, lr}
 8008fba:	4605      	mov	r5, r0
 8008fbc:	2900      	cmp	r1, #0
 8008fbe:	d041      	beq.n	8009044 <_free_r+0x8c>
 8008fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fc4:	1f0c      	subs	r4, r1, #4
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	bfb8      	it	lt
 8008fca:	18e4      	addlt	r4, r4, r3
 8008fcc:	f7ff ff96 	bl	8008efc <__malloc_lock>
 8008fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8009048 <_free_r+0x90>)
 8008fd2:	6813      	ldr	r3, [r2, #0]
 8008fd4:	b933      	cbnz	r3, 8008fe4 <_free_r+0x2c>
 8008fd6:	6063      	str	r3, [r4, #4]
 8008fd8:	6014      	str	r4, [r2, #0]
 8008fda:	4628      	mov	r0, r5
 8008fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fe0:	f7ff bf92 	b.w	8008f08 <__malloc_unlock>
 8008fe4:	42a3      	cmp	r3, r4
 8008fe6:	d908      	bls.n	8008ffa <_free_r+0x42>
 8008fe8:	6820      	ldr	r0, [r4, #0]
 8008fea:	1821      	adds	r1, r4, r0
 8008fec:	428b      	cmp	r3, r1
 8008fee:	bf01      	itttt	eq
 8008ff0:	6819      	ldreq	r1, [r3, #0]
 8008ff2:	685b      	ldreq	r3, [r3, #4]
 8008ff4:	1809      	addeq	r1, r1, r0
 8008ff6:	6021      	streq	r1, [r4, #0]
 8008ff8:	e7ed      	b.n	8008fd6 <_free_r+0x1e>
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	b10b      	cbz	r3, 8009004 <_free_r+0x4c>
 8009000:	42a3      	cmp	r3, r4
 8009002:	d9fa      	bls.n	8008ffa <_free_r+0x42>
 8009004:	6811      	ldr	r1, [r2, #0]
 8009006:	1850      	adds	r0, r2, r1
 8009008:	42a0      	cmp	r0, r4
 800900a:	d10b      	bne.n	8009024 <_free_r+0x6c>
 800900c:	6820      	ldr	r0, [r4, #0]
 800900e:	4401      	add	r1, r0
 8009010:	1850      	adds	r0, r2, r1
 8009012:	4283      	cmp	r3, r0
 8009014:	6011      	str	r1, [r2, #0]
 8009016:	d1e0      	bne.n	8008fda <_free_r+0x22>
 8009018:	6818      	ldr	r0, [r3, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	6053      	str	r3, [r2, #4]
 800901e:	4408      	add	r0, r1
 8009020:	6010      	str	r0, [r2, #0]
 8009022:	e7da      	b.n	8008fda <_free_r+0x22>
 8009024:	d902      	bls.n	800902c <_free_r+0x74>
 8009026:	230c      	movs	r3, #12
 8009028:	602b      	str	r3, [r5, #0]
 800902a:	e7d6      	b.n	8008fda <_free_r+0x22>
 800902c:	6820      	ldr	r0, [r4, #0]
 800902e:	1821      	adds	r1, r4, r0
 8009030:	428b      	cmp	r3, r1
 8009032:	bf04      	itt	eq
 8009034:	6819      	ldreq	r1, [r3, #0]
 8009036:	685b      	ldreq	r3, [r3, #4]
 8009038:	6063      	str	r3, [r4, #4]
 800903a:	bf04      	itt	eq
 800903c:	1809      	addeq	r1, r1, r0
 800903e:	6021      	streq	r1, [r4, #0]
 8009040:	6054      	str	r4, [r2, #4]
 8009042:	e7ca      	b.n	8008fda <_free_r+0x22>
 8009044:	bd38      	pop	{r3, r4, r5, pc}
 8009046:	bf00      	nop
 8009048:	20000420 	.word	0x20000420

0800904c <pow>:
 800904c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904e:	ed2d 8b02 	vpush	{d8}
 8009052:	eeb0 8a40 	vmov.f32	s16, s0
 8009056:	eef0 8a60 	vmov.f32	s17, s1
 800905a:	ec55 4b11 	vmov	r4, r5, d1
 800905e:	f000 f893 	bl	8009188 <__ieee754_pow>
 8009062:	4622      	mov	r2, r4
 8009064:	462b      	mov	r3, r5
 8009066:	4620      	mov	r0, r4
 8009068:	4629      	mov	r1, r5
 800906a:	ec57 6b10 	vmov	r6, r7, d0
 800906e:	f7f7 fd21 	bl	8000ab4 <__aeabi_dcmpun>
 8009072:	2800      	cmp	r0, #0
 8009074:	d13b      	bne.n	80090ee <pow+0xa2>
 8009076:	ec51 0b18 	vmov	r0, r1, d8
 800907a:	2200      	movs	r2, #0
 800907c:	2300      	movs	r3, #0
 800907e:	f7f7 fce7 	bl	8000a50 <__aeabi_dcmpeq>
 8009082:	b1b8      	cbz	r0, 80090b4 <pow+0x68>
 8009084:	2200      	movs	r2, #0
 8009086:	2300      	movs	r3, #0
 8009088:	4620      	mov	r0, r4
 800908a:	4629      	mov	r1, r5
 800908c:	f7f7 fce0 	bl	8000a50 <__aeabi_dcmpeq>
 8009090:	2800      	cmp	r0, #0
 8009092:	d146      	bne.n	8009122 <pow+0xd6>
 8009094:	ec45 4b10 	vmov	d0, r4, r5
 8009098:	f000 f868 	bl	800916c <finite>
 800909c:	b338      	cbz	r0, 80090ee <pow+0xa2>
 800909e:	2200      	movs	r2, #0
 80090a0:	2300      	movs	r3, #0
 80090a2:	4620      	mov	r0, r4
 80090a4:	4629      	mov	r1, r5
 80090a6:	f7f7 fcdd 	bl	8000a64 <__aeabi_dcmplt>
 80090aa:	b300      	cbz	r0, 80090ee <pow+0xa2>
 80090ac:	f7ff ff4a 	bl	8008f44 <__errno>
 80090b0:	2322      	movs	r3, #34	@ 0x22
 80090b2:	e01b      	b.n	80090ec <pow+0xa0>
 80090b4:	ec47 6b10 	vmov	d0, r6, r7
 80090b8:	f000 f858 	bl	800916c <finite>
 80090bc:	b9e0      	cbnz	r0, 80090f8 <pow+0xac>
 80090be:	eeb0 0a48 	vmov.f32	s0, s16
 80090c2:	eef0 0a68 	vmov.f32	s1, s17
 80090c6:	f000 f851 	bl	800916c <finite>
 80090ca:	b1a8      	cbz	r0, 80090f8 <pow+0xac>
 80090cc:	ec45 4b10 	vmov	d0, r4, r5
 80090d0:	f000 f84c 	bl	800916c <finite>
 80090d4:	b180      	cbz	r0, 80090f8 <pow+0xac>
 80090d6:	4632      	mov	r2, r6
 80090d8:	463b      	mov	r3, r7
 80090da:	4630      	mov	r0, r6
 80090dc:	4639      	mov	r1, r7
 80090de:	f7f7 fce9 	bl	8000ab4 <__aeabi_dcmpun>
 80090e2:	2800      	cmp	r0, #0
 80090e4:	d0e2      	beq.n	80090ac <pow+0x60>
 80090e6:	f7ff ff2d 	bl	8008f44 <__errno>
 80090ea:	2321      	movs	r3, #33	@ 0x21
 80090ec:	6003      	str	r3, [r0, #0]
 80090ee:	ecbd 8b02 	vpop	{d8}
 80090f2:	ec47 6b10 	vmov	d0, r6, r7
 80090f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090f8:	2200      	movs	r2, #0
 80090fa:	2300      	movs	r3, #0
 80090fc:	4630      	mov	r0, r6
 80090fe:	4639      	mov	r1, r7
 8009100:	f7f7 fca6 	bl	8000a50 <__aeabi_dcmpeq>
 8009104:	2800      	cmp	r0, #0
 8009106:	d0f2      	beq.n	80090ee <pow+0xa2>
 8009108:	eeb0 0a48 	vmov.f32	s0, s16
 800910c:	eef0 0a68 	vmov.f32	s1, s17
 8009110:	f000 f82c 	bl	800916c <finite>
 8009114:	2800      	cmp	r0, #0
 8009116:	d0ea      	beq.n	80090ee <pow+0xa2>
 8009118:	ec45 4b10 	vmov	d0, r4, r5
 800911c:	f000 f826 	bl	800916c <finite>
 8009120:	e7c3      	b.n	80090aa <pow+0x5e>
 8009122:	4f01      	ldr	r7, [pc, #4]	@ (8009128 <pow+0xdc>)
 8009124:	2600      	movs	r6, #0
 8009126:	e7e2      	b.n	80090ee <pow+0xa2>
 8009128:	3ff00000 	.word	0x3ff00000

0800912c <atan2f>:
 800912c:	f000 bd78 	b.w	8009c20 <__ieee754_atan2f>

08009130 <sqrtf>:
 8009130:	b508      	push	{r3, lr}
 8009132:	ed2d 8b02 	vpush	{d8}
 8009136:	eeb0 8a40 	vmov.f32	s16, s0
 800913a:	f000 f822 	bl	8009182 <__ieee754_sqrtf>
 800913e:	eeb4 8a48 	vcmp.f32	s16, s16
 8009142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009146:	d60c      	bvs.n	8009162 <sqrtf+0x32>
 8009148:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8009168 <sqrtf+0x38>
 800914c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009154:	d505      	bpl.n	8009162 <sqrtf+0x32>
 8009156:	f7ff fef5 	bl	8008f44 <__errno>
 800915a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800915e:	2321      	movs	r3, #33	@ 0x21
 8009160:	6003      	str	r3, [r0, #0]
 8009162:	ecbd 8b02 	vpop	{d8}
 8009166:	bd08      	pop	{r3, pc}
 8009168:	00000000 	.word	0x00000000

0800916c <finite>:
 800916c:	b082      	sub	sp, #8
 800916e:	ed8d 0b00 	vstr	d0, [sp]
 8009172:	9801      	ldr	r0, [sp, #4]
 8009174:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8009178:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800917c:	0fc0      	lsrs	r0, r0, #31
 800917e:	b002      	add	sp, #8
 8009180:	4770      	bx	lr

08009182 <__ieee754_sqrtf>:
 8009182:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009186:	4770      	bx	lr

08009188 <__ieee754_pow>:
 8009188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800918c:	b091      	sub	sp, #68	@ 0x44
 800918e:	ed8d 1b00 	vstr	d1, [sp]
 8009192:	e9dd 1900 	ldrd	r1, r9, [sp]
 8009196:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800919a:	ea5a 0001 	orrs.w	r0, sl, r1
 800919e:	ec57 6b10 	vmov	r6, r7, d0
 80091a2:	d113      	bne.n	80091cc <__ieee754_pow+0x44>
 80091a4:	19b3      	adds	r3, r6, r6
 80091a6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80091aa:	4152      	adcs	r2, r2
 80091ac:	4298      	cmp	r0, r3
 80091ae:	4b98      	ldr	r3, [pc, #608]	@ (8009410 <__ieee754_pow+0x288>)
 80091b0:	4193      	sbcs	r3, r2
 80091b2:	f080 84ea 	bcs.w	8009b8a <__ieee754_pow+0xa02>
 80091b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091ba:	4630      	mov	r0, r6
 80091bc:	4639      	mov	r1, r7
 80091be:	f7f7 f829 	bl	8000214 <__adddf3>
 80091c2:	ec41 0b10 	vmov	d0, r0, r1
 80091c6:	b011      	add	sp, #68	@ 0x44
 80091c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091cc:	4a91      	ldr	r2, [pc, #580]	@ (8009414 <__ieee754_pow+0x28c>)
 80091ce:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80091d2:	4590      	cmp	r8, r2
 80091d4:	463d      	mov	r5, r7
 80091d6:	4633      	mov	r3, r6
 80091d8:	d806      	bhi.n	80091e8 <__ieee754_pow+0x60>
 80091da:	d101      	bne.n	80091e0 <__ieee754_pow+0x58>
 80091dc:	2e00      	cmp	r6, #0
 80091de:	d1ea      	bne.n	80091b6 <__ieee754_pow+0x2e>
 80091e0:	4592      	cmp	sl, r2
 80091e2:	d801      	bhi.n	80091e8 <__ieee754_pow+0x60>
 80091e4:	d10e      	bne.n	8009204 <__ieee754_pow+0x7c>
 80091e6:	b169      	cbz	r1, 8009204 <__ieee754_pow+0x7c>
 80091e8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80091ec:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80091f0:	431d      	orrs	r5, r3
 80091f2:	d1e0      	bne.n	80091b6 <__ieee754_pow+0x2e>
 80091f4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80091f8:	18db      	adds	r3, r3, r3
 80091fa:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80091fe:	4152      	adcs	r2, r2
 8009200:	429d      	cmp	r5, r3
 8009202:	e7d4      	b.n	80091ae <__ieee754_pow+0x26>
 8009204:	2d00      	cmp	r5, #0
 8009206:	46c3      	mov	fp, r8
 8009208:	da3a      	bge.n	8009280 <__ieee754_pow+0xf8>
 800920a:	4a83      	ldr	r2, [pc, #524]	@ (8009418 <__ieee754_pow+0x290>)
 800920c:	4592      	cmp	sl, r2
 800920e:	d84d      	bhi.n	80092ac <__ieee754_pow+0x124>
 8009210:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009214:	4592      	cmp	sl, r2
 8009216:	f240 84c7 	bls.w	8009ba8 <__ieee754_pow+0xa20>
 800921a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800921e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009222:	2a14      	cmp	r2, #20
 8009224:	dd0f      	ble.n	8009246 <__ieee754_pow+0xbe>
 8009226:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800922a:	fa21 f402 	lsr.w	r4, r1, r2
 800922e:	fa04 f202 	lsl.w	r2, r4, r2
 8009232:	428a      	cmp	r2, r1
 8009234:	f040 84b8 	bne.w	8009ba8 <__ieee754_pow+0xa20>
 8009238:	f004 0401 	and.w	r4, r4, #1
 800923c:	f1c4 0402 	rsb	r4, r4, #2
 8009240:	2900      	cmp	r1, #0
 8009242:	d158      	bne.n	80092f6 <__ieee754_pow+0x16e>
 8009244:	e00e      	b.n	8009264 <__ieee754_pow+0xdc>
 8009246:	2900      	cmp	r1, #0
 8009248:	d154      	bne.n	80092f4 <__ieee754_pow+0x16c>
 800924a:	f1c2 0214 	rsb	r2, r2, #20
 800924e:	fa4a f402 	asr.w	r4, sl, r2
 8009252:	fa04 f202 	lsl.w	r2, r4, r2
 8009256:	4552      	cmp	r2, sl
 8009258:	f040 84a3 	bne.w	8009ba2 <__ieee754_pow+0xa1a>
 800925c:	f004 0401 	and.w	r4, r4, #1
 8009260:	f1c4 0402 	rsb	r4, r4, #2
 8009264:	4a6d      	ldr	r2, [pc, #436]	@ (800941c <__ieee754_pow+0x294>)
 8009266:	4592      	cmp	sl, r2
 8009268:	d12e      	bne.n	80092c8 <__ieee754_pow+0x140>
 800926a:	f1b9 0f00 	cmp.w	r9, #0
 800926e:	f280 8494 	bge.w	8009b9a <__ieee754_pow+0xa12>
 8009272:	496a      	ldr	r1, [pc, #424]	@ (800941c <__ieee754_pow+0x294>)
 8009274:	4632      	mov	r2, r6
 8009276:	463b      	mov	r3, r7
 8009278:	2000      	movs	r0, #0
 800927a:	f7f7 faab 	bl	80007d4 <__aeabi_ddiv>
 800927e:	e7a0      	b.n	80091c2 <__ieee754_pow+0x3a>
 8009280:	2400      	movs	r4, #0
 8009282:	bbc1      	cbnz	r1, 80092f6 <__ieee754_pow+0x16e>
 8009284:	4a63      	ldr	r2, [pc, #396]	@ (8009414 <__ieee754_pow+0x28c>)
 8009286:	4592      	cmp	sl, r2
 8009288:	d1ec      	bne.n	8009264 <__ieee754_pow+0xdc>
 800928a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800928e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8009292:	431a      	orrs	r2, r3
 8009294:	f000 8479 	beq.w	8009b8a <__ieee754_pow+0xa02>
 8009298:	4b61      	ldr	r3, [pc, #388]	@ (8009420 <__ieee754_pow+0x298>)
 800929a:	4598      	cmp	r8, r3
 800929c:	d908      	bls.n	80092b0 <__ieee754_pow+0x128>
 800929e:	f1b9 0f00 	cmp.w	r9, #0
 80092a2:	f2c0 8476 	blt.w	8009b92 <__ieee754_pow+0xa0a>
 80092a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092aa:	e78a      	b.n	80091c2 <__ieee754_pow+0x3a>
 80092ac:	2402      	movs	r4, #2
 80092ae:	e7e8      	b.n	8009282 <__ieee754_pow+0xfa>
 80092b0:	f1b9 0f00 	cmp.w	r9, #0
 80092b4:	f04f 0000 	mov.w	r0, #0
 80092b8:	f04f 0100 	mov.w	r1, #0
 80092bc:	da81      	bge.n	80091c2 <__ieee754_pow+0x3a>
 80092be:	e9dd 0300 	ldrd	r0, r3, [sp]
 80092c2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80092c6:	e77c      	b.n	80091c2 <__ieee754_pow+0x3a>
 80092c8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80092cc:	d106      	bne.n	80092dc <__ieee754_pow+0x154>
 80092ce:	4632      	mov	r2, r6
 80092d0:	463b      	mov	r3, r7
 80092d2:	4630      	mov	r0, r6
 80092d4:	4639      	mov	r1, r7
 80092d6:	f7f7 f953 	bl	8000580 <__aeabi_dmul>
 80092da:	e772      	b.n	80091c2 <__ieee754_pow+0x3a>
 80092dc:	4a51      	ldr	r2, [pc, #324]	@ (8009424 <__ieee754_pow+0x29c>)
 80092de:	4591      	cmp	r9, r2
 80092e0:	d109      	bne.n	80092f6 <__ieee754_pow+0x16e>
 80092e2:	2d00      	cmp	r5, #0
 80092e4:	db07      	blt.n	80092f6 <__ieee754_pow+0x16e>
 80092e6:	ec47 6b10 	vmov	d0, r6, r7
 80092ea:	b011      	add	sp, #68	@ 0x44
 80092ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f0:	f000 bece 	b.w	800a090 <__ieee754_sqrt>
 80092f4:	2400      	movs	r4, #0
 80092f6:	ec47 6b10 	vmov	d0, r6, r7
 80092fa:	9302      	str	r3, [sp, #8]
 80092fc:	f000 fc88 	bl	8009c10 <fabs>
 8009300:	9b02      	ldr	r3, [sp, #8]
 8009302:	ec51 0b10 	vmov	r0, r1, d0
 8009306:	bb53      	cbnz	r3, 800935e <__ieee754_pow+0x1d6>
 8009308:	4b44      	ldr	r3, [pc, #272]	@ (800941c <__ieee754_pow+0x294>)
 800930a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800930e:	429a      	cmp	r2, r3
 8009310:	d002      	beq.n	8009318 <__ieee754_pow+0x190>
 8009312:	f1b8 0f00 	cmp.w	r8, #0
 8009316:	d122      	bne.n	800935e <__ieee754_pow+0x1d6>
 8009318:	f1b9 0f00 	cmp.w	r9, #0
 800931c:	da05      	bge.n	800932a <__ieee754_pow+0x1a2>
 800931e:	4602      	mov	r2, r0
 8009320:	460b      	mov	r3, r1
 8009322:	2000      	movs	r0, #0
 8009324:	493d      	ldr	r1, [pc, #244]	@ (800941c <__ieee754_pow+0x294>)
 8009326:	f7f7 fa55 	bl	80007d4 <__aeabi_ddiv>
 800932a:	2d00      	cmp	r5, #0
 800932c:	f6bf af49 	bge.w	80091c2 <__ieee754_pow+0x3a>
 8009330:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8009334:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8009338:	ea58 0804 	orrs.w	r8, r8, r4
 800933c:	d108      	bne.n	8009350 <__ieee754_pow+0x1c8>
 800933e:	4602      	mov	r2, r0
 8009340:	460b      	mov	r3, r1
 8009342:	4610      	mov	r0, r2
 8009344:	4619      	mov	r1, r3
 8009346:	f7f6 ff63 	bl	8000210 <__aeabi_dsub>
 800934a:	4602      	mov	r2, r0
 800934c:	460b      	mov	r3, r1
 800934e:	e794      	b.n	800927a <__ieee754_pow+0xf2>
 8009350:	2c01      	cmp	r4, #1
 8009352:	f47f af36 	bne.w	80091c2 <__ieee754_pow+0x3a>
 8009356:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800935a:	4619      	mov	r1, r3
 800935c:	e731      	b.n	80091c2 <__ieee754_pow+0x3a>
 800935e:	0feb      	lsrs	r3, r5, #31
 8009360:	3b01      	subs	r3, #1
 8009362:	ea53 0204 	orrs.w	r2, r3, r4
 8009366:	d102      	bne.n	800936e <__ieee754_pow+0x1e6>
 8009368:	4632      	mov	r2, r6
 800936a:	463b      	mov	r3, r7
 800936c:	e7e9      	b.n	8009342 <__ieee754_pow+0x1ba>
 800936e:	3c01      	subs	r4, #1
 8009370:	431c      	orrs	r4, r3
 8009372:	d016      	beq.n	80093a2 <__ieee754_pow+0x21a>
 8009374:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8009400 <__ieee754_pow+0x278>
 8009378:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800937c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009380:	f240 8112 	bls.w	80095a8 <__ieee754_pow+0x420>
 8009384:	4b28      	ldr	r3, [pc, #160]	@ (8009428 <__ieee754_pow+0x2a0>)
 8009386:	459a      	cmp	sl, r3
 8009388:	4b25      	ldr	r3, [pc, #148]	@ (8009420 <__ieee754_pow+0x298>)
 800938a:	d916      	bls.n	80093ba <__ieee754_pow+0x232>
 800938c:	4598      	cmp	r8, r3
 800938e:	d80b      	bhi.n	80093a8 <__ieee754_pow+0x220>
 8009390:	f1b9 0f00 	cmp.w	r9, #0
 8009394:	da0b      	bge.n	80093ae <__ieee754_pow+0x226>
 8009396:	2000      	movs	r0, #0
 8009398:	b011      	add	sp, #68	@ 0x44
 800939a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800939e:	f000 be6f 	b.w	800a080 <__math_oflow>
 80093a2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8009408 <__ieee754_pow+0x280>
 80093a6:	e7e7      	b.n	8009378 <__ieee754_pow+0x1f0>
 80093a8:	f1b9 0f00 	cmp.w	r9, #0
 80093ac:	dcf3      	bgt.n	8009396 <__ieee754_pow+0x20e>
 80093ae:	2000      	movs	r0, #0
 80093b0:	b011      	add	sp, #68	@ 0x44
 80093b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b6:	f000 be5b 	b.w	800a070 <__math_uflow>
 80093ba:	4598      	cmp	r8, r3
 80093bc:	d20c      	bcs.n	80093d8 <__ieee754_pow+0x250>
 80093be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093c2:	2200      	movs	r2, #0
 80093c4:	2300      	movs	r3, #0
 80093c6:	f7f7 fb4d 	bl	8000a64 <__aeabi_dcmplt>
 80093ca:	3800      	subs	r0, #0
 80093cc:	bf18      	it	ne
 80093ce:	2001      	movne	r0, #1
 80093d0:	f1b9 0f00 	cmp.w	r9, #0
 80093d4:	daec      	bge.n	80093b0 <__ieee754_pow+0x228>
 80093d6:	e7df      	b.n	8009398 <__ieee754_pow+0x210>
 80093d8:	4b10      	ldr	r3, [pc, #64]	@ (800941c <__ieee754_pow+0x294>)
 80093da:	4598      	cmp	r8, r3
 80093dc:	f04f 0200 	mov.w	r2, #0
 80093e0:	d924      	bls.n	800942c <__ieee754_pow+0x2a4>
 80093e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093e6:	2300      	movs	r3, #0
 80093e8:	f7f7 fb3c 	bl	8000a64 <__aeabi_dcmplt>
 80093ec:	3800      	subs	r0, #0
 80093ee:	bf18      	it	ne
 80093f0:	2001      	movne	r0, #1
 80093f2:	f1b9 0f00 	cmp.w	r9, #0
 80093f6:	dccf      	bgt.n	8009398 <__ieee754_pow+0x210>
 80093f8:	e7da      	b.n	80093b0 <__ieee754_pow+0x228>
 80093fa:	bf00      	nop
 80093fc:	f3af 8000 	nop.w
 8009400:	00000000 	.word	0x00000000
 8009404:	3ff00000 	.word	0x3ff00000
 8009408:	00000000 	.word	0x00000000
 800940c:	bff00000 	.word	0xbff00000
 8009410:	fff00000 	.word	0xfff00000
 8009414:	7ff00000 	.word	0x7ff00000
 8009418:	433fffff 	.word	0x433fffff
 800941c:	3ff00000 	.word	0x3ff00000
 8009420:	3fefffff 	.word	0x3fefffff
 8009424:	3fe00000 	.word	0x3fe00000
 8009428:	43f00000 	.word	0x43f00000
 800942c:	4b5a      	ldr	r3, [pc, #360]	@ (8009598 <__ieee754_pow+0x410>)
 800942e:	f7f6 feef 	bl	8000210 <__aeabi_dsub>
 8009432:	a351      	add	r3, pc, #324	@ (adr r3, 8009578 <__ieee754_pow+0x3f0>)
 8009434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009438:	4604      	mov	r4, r0
 800943a:	460d      	mov	r5, r1
 800943c:	f7f7 f8a0 	bl	8000580 <__aeabi_dmul>
 8009440:	a34f      	add	r3, pc, #316	@ (adr r3, 8009580 <__ieee754_pow+0x3f8>)
 8009442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009446:	4606      	mov	r6, r0
 8009448:	460f      	mov	r7, r1
 800944a:	4620      	mov	r0, r4
 800944c:	4629      	mov	r1, r5
 800944e:	f7f7 f897 	bl	8000580 <__aeabi_dmul>
 8009452:	4b52      	ldr	r3, [pc, #328]	@ (800959c <__ieee754_pow+0x414>)
 8009454:	4682      	mov	sl, r0
 8009456:	468b      	mov	fp, r1
 8009458:	2200      	movs	r2, #0
 800945a:	4620      	mov	r0, r4
 800945c:	4629      	mov	r1, r5
 800945e:	f7f7 f88f 	bl	8000580 <__aeabi_dmul>
 8009462:	4602      	mov	r2, r0
 8009464:	460b      	mov	r3, r1
 8009466:	a148      	add	r1, pc, #288	@ (adr r1, 8009588 <__ieee754_pow+0x400>)
 8009468:	e9d1 0100 	ldrd	r0, r1, [r1]
 800946c:	f7f6 fed0 	bl	8000210 <__aeabi_dsub>
 8009470:	4622      	mov	r2, r4
 8009472:	462b      	mov	r3, r5
 8009474:	f7f7 f884 	bl	8000580 <__aeabi_dmul>
 8009478:	4602      	mov	r2, r0
 800947a:	460b      	mov	r3, r1
 800947c:	2000      	movs	r0, #0
 800947e:	4948      	ldr	r1, [pc, #288]	@ (80095a0 <__ieee754_pow+0x418>)
 8009480:	f7f6 fec6 	bl	8000210 <__aeabi_dsub>
 8009484:	4622      	mov	r2, r4
 8009486:	4680      	mov	r8, r0
 8009488:	4689      	mov	r9, r1
 800948a:	462b      	mov	r3, r5
 800948c:	4620      	mov	r0, r4
 800948e:	4629      	mov	r1, r5
 8009490:	f7f7 f876 	bl	8000580 <__aeabi_dmul>
 8009494:	4602      	mov	r2, r0
 8009496:	460b      	mov	r3, r1
 8009498:	4640      	mov	r0, r8
 800949a:	4649      	mov	r1, r9
 800949c:	f7f7 f870 	bl	8000580 <__aeabi_dmul>
 80094a0:	a33b      	add	r3, pc, #236	@ (adr r3, 8009590 <__ieee754_pow+0x408>)
 80094a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a6:	f7f7 f86b 	bl	8000580 <__aeabi_dmul>
 80094aa:	4602      	mov	r2, r0
 80094ac:	460b      	mov	r3, r1
 80094ae:	4650      	mov	r0, sl
 80094b0:	4659      	mov	r1, fp
 80094b2:	f7f6 fead 	bl	8000210 <__aeabi_dsub>
 80094b6:	4602      	mov	r2, r0
 80094b8:	460b      	mov	r3, r1
 80094ba:	4680      	mov	r8, r0
 80094bc:	4689      	mov	r9, r1
 80094be:	4630      	mov	r0, r6
 80094c0:	4639      	mov	r1, r7
 80094c2:	f7f6 fea7 	bl	8000214 <__adddf3>
 80094c6:	2400      	movs	r4, #0
 80094c8:	4632      	mov	r2, r6
 80094ca:	463b      	mov	r3, r7
 80094cc:	4620      	mov	r0, r4
 80094ce:	460d      	mov	r5, r1
 80094d0:	f7f6 fe9e 	bl	8000210 <__aeabi_dsub>
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	4640      	mov	r0, r8
 80094da:	4649      	mov	r1, r9
 80094dc:	f7f6 fe98 	bl	8000210 <__aeabi_dsub>
 80094e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80094e8:	2300      	movs	r3, #0
 80094ea:	9304      	str	r3, [sp, #16]
 80094ec:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80094f0:	4606      	mov	r6, r0
 80094f2:	460f      	mov	r7, r1
 80094f4:	4652      	mov	r2, sl
 80094f6:	465b      	mov	r3, fp
 80094f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094fc:	f7f6 fe88 	bl	8000210 <__aeabi_dsub>
 8009500:	4622      	mov	r2, r4
 8009502:	462b      	mov	r3, r5
 8009504:	f7f7 f83c 	bl	8000580 <__aeabi_dmul>
 8009508:	e9dd 2300 	ldrd	r2, r3, [sp]
 800950c:	4680      	mov	r8, r0
 800950e:	4689      	mov	r9, r1
 8009510:	4630      	mov	r0, r6
 8009512:	4639      	mov	r1, r7
 8009514:	f7f7 f834 	bl	8000580 <__aeabi_dmul>
 8009518:	4602      	mov	r2, r0
 800951a:	460b      	mov	r3, r1
 800951c:	4640      	mov	r0, r8
 800951e:	4649      	mov	r1, r9
 8009520:	f7f6 fe78 	bl	8000214 <__adddf3>
 8009524:	4652      	mov	r2, sl
 8009526:	465b      	mov	r3, fp
 8009528:	4606      	mov	r6, r0
 800952a:	460f      	mov	r7, r1
 800952c:	4620      	mov	r0, r4
 800952e:	4629      	mov	r1, r5
 8009530:	f7f7 f826 	bl	8000580 <__aeabi_dmul>
 8009534:	460b      	mov	r3, r1
 8009536:	4602      	mov	r2, r0
 8009538:	4680      	mov	r8, r0
 800953a:	4689      	mov	r9, r1
 800953c:	4630      	mov	r0, r6
 800953e:	4639      	mov	r1, r7
 8009540:	f7f6 fe68 	bl	8000214 <__adddf3>
 8009544:	4b17      	ldr	r3, [pc, #92]	@ (80095a4 <__ieee754_pow+0x41c>)
 8009546:	4299      	cmp	r1, r3
 8009548:	4604      	mov	r4, r0
 800954a:	460d      	mov	r5, r1
 800954c:	468a      	mov	sl, r1
 800954e:	468b      	mov	fp, r1
 8009550:	f340 82ef 	ble.w	8009b32 <__ieee754_pow+0x9aa>
 8009554:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009558:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800955c:	4303      	orrs	r3, r0
 800955e:	f000 81e8 	beq.w	8009932 <__ieee754_pow+0x7aa>
 8009562:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009566:	2200      	movs	r2, #0
 8009568:	2300      	movs	r3, #0
 800956a:	f7f7 fa7b 	bl	8000a64 <__aeabi_dcmplt>
 800956e:	3800      	subs	r0, #0
 8009570:	bf18      	it	ne
 8009572:	2001      	movne	r0, #1
 8009574:	e710      	b.n	8009398 <__ieee754_pow+0x210>
 8009576:	bf00      	nop
 8009578:	60000000 	.word	0x60000000
 800957c:	3ff71547 	.word	0x3ff71547
 8009580:	f85ddf44 	.word	0xf85ddf44
 8009584:	3e54ae0b 	.word	0x3e54ae0b
 8009588:	55555555 	.word	0x55555555
 800958c:	3fd55555 	.word	0x3fd55555
 8009590:	652b82fe 	.word	0x652b82fe
 8009594:	3ff71547 	.word	0x3ff71547
 8009598:	3ff00000 	.word	0x3ff00000
 800959c:	3fd00000 	.word	0x3fd00000
 80095a0:	3fe00000 	.word	0x3fe00000
 80095a4:	408fffff 	.word	0x408fffff
 80095a8:	4bd5      	ldr	r3, [pc, #852]	@ (8009900 <__ieee754_pow+0x778>)
 80095aa:	402b      	ands	r3, r5
 80095ac:	2200      	movs	r2, #0
 80095ae:	b92b      	cbnz	r3, 80095bc <__ieee754_pow+0x434>
 80095b0:	4bd4      	ldr	r3, [pc, #848]	@ (8009904 <__ieee754_pow+0x77c>)
 80095b2:	f7f6 ffe5 	bl	8000580 <__aeabi_dmul>
 80095b6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80095ba:	468b      	mov	fp, r1
 80095bc:	ea4f 532b 	mov.w	r3, fp, asr #20
 80095c0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80095c4:	4413      	add	r3, r2
 80095c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80095c8:	4bcf      	ldr	r3, [pc, #828]	@ (8009908 <__ieee754_pow+0x780>)
 80095ca:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80095ce:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80095d2:	459b      	cmp	fp, r3
 80095d4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80095d8:	dd08      	ble.n	80095ec <__ieee754_pow+0x464>
 80095da:	4bcc      	ldr	r3, [pc, #816]	@ (800990c <__ieee754_pow+0x784>)
 80095dc:	459b      	cmp	fp, r3
 80095de:	f340 81a5 	ble.w	800992c <__ieee754_pow+0x7a4>
 80095e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095e4:	3301      	adds	r3, #1
 80095e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80095e8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80095ec:	f04f 0a00 	mov.w	sl, #0
 80095f0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80095f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095f6:	4bc6      	ldr	r3, [pc, #792]	@ (8009910 <__ieee754_pow+0x788>)
 80095f8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80095fc:	ed93 7b00 	vldr	d7, [r3]
 8009600:	4629      	mov	r1, r5
 8009602:	ec53 2b17 	vmov	r2, r3, d7
 8009606:	ed8d 7b06 	vstr	d7, [sp, #24]
 800960a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800960e:	f7f6 fdff 	bl	8000210 <__aeabi_dsub>
 8009612:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009616:	4606      	mov	r6, r0
 8009618:	460f      	mov	r7, r1
 800961a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800961e:	f7f6 fdf9 	bl	8000214 <__adddf3>
 8009622:	4602      	mov	r2, r0
 8009624:	460b      	mov	r3, r1
 8009626:	2000      	movs	r0, #0
 8009628:	49ba      	ldr	r1, [pc, #744]	@ (8009914 <__ieee754_pow+0x78c>)
 800962a:	f7f7 f8d3 	bl	80007d4 <__aeabi_ddiv>
 800962e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009632:	4602      	mov	r2, r0
 8009634:	460b      	mov	r3, r1
 8009636:	4630      	mov	r0, r6
 8009638:	4639      	mov	r1, r7
 800963a:	f7f6 ffa1 	bl	8000580 <__aeabi_dmul>
 800963e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009642:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8009646:	106d      	asrs	r5, r5, #1
 8009648:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800964c:	f04f 0b00 	mov.w	fp, #0
 8009650:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009654:	4661      	mov	r1, ip
 8009656:	2200      	movs	r2, #0
 8009658:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800965c:	4658      	mov	r0, fp
 800965e:	46e1      	mov	r9, ip
 8009660:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8009664:	4614      	mov	r4, r2
 8009666:	461d      	mov	r5, r3
 8009668:	f7f6 ff8a 	bl	8000580 <__aeabi_dmul>
 800966c:	4602      	mov	r2, r0
 800966e:	460b      	mov	r3, r1
 8009670:	4630      	mov	r0, r6
 8009672:	4639      	mov	r1, r7
 8009674:	f7f6 fdcc 	bl	8000210 <__aeabi_dsub>
 8009678:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800967c:	4606      	mov	r6, r0
 800967e:	460f      	mov	r7, r1
 8009680:	4620      	mov	r0, r4
 8009682:	4629      	mov	r1, r5
 8009684:	f7f6 fdc4 	bl	8000210 <__aeabi_dsub>
 8009688:	4602      	mov	r2, r0
 800968a:	460b      	mov	r3, r1
 800968c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009690:	f7f6 fdbe 	bl	8000210 <__aeabi_dsub>
 8009694:	465a      	mov	r2, fp
 8009696:	464b      	mov	r3, r9
 8009698:	f7f6 ff72 	bl	8000580 <__aeabi_dmul>
 800969c:	4602      	mov	r2, r0
 800969e:	460b      	mov	r3, r1
 80096a0:	4630      	mov	r0, r6
 80096a2:	4639      	mov	r1, r7
 80096a4:	f7f6 fdb4 	bl	8000210 <__aeabi_dsub>
 80096a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80096ac:	f7f6 ff68 	bl	8000580 <__aeabi_dmul>
 80096b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80096b8:	4610      	mov	r0, r2
 80096ba:	4619      	mov	r1, r3
 80096bc:	f7f6 ff60 	bl	8000580 <__aeabi_dmul>
 80096c0:	a37d      	add	r3, pc, #500	@ (adr r3, 80098b8 <__ieee754_pow+0x730>)
 80096c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c6:	4604      	mov	r4, r0
 80096c8:	460d      	mov	r5, r1
 80096ca:	f7f6 ff59 	bl	8000580 <__aeabi_dmul>
 80096ce:	a37c      	add	r3, pc, #496	@ (adr r3, 80098c0 <__ieee754_pow+0x738>)
 80096d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d4:	f7f6 fd9e 	bl	8000214 <__adddf3>
 80096d8:	4622      	mov	r2, r4
 80096da:	462b      	mov	r3, r5
 80096dc:	f7f6 ff50 	bl	8000580 <__aeabi_dmul>
 80096e0:	a379      	add	r3, pc, #484	@ (adr r3, 80098c8 <__ieee754_pow+0x740>)
 80096e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e6:	f7f6 fd95 	bl	8000214 <__adddf3>
 80096ea:	4622      	mov	r2, r4
 80096ec:	462b      	mov	r3, r5
 80096ee:	f7f6 ff47 	bl	8000580 <__aeabi_dmul>
 80096f2:	a377      	add	r3, pc, #476	@ (adr r3, 80098d0 <__ieee754_pow+0x748>)
 80096f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f8:	f7f6 fd8c 	bl	8000214 <__adddf3>
 80096fc:	4622      	mov	r2, r4
 80096fe:	462b      	mov	r3, r5
 8009700:	f7f6 ff3e 	bl	8000580 <__aeabi_dmul>
 8009704:	a374      	add	r3, pc, #464	@ (adr r3, 80098d8 <__ieee754_pow+0x750>)
 8009706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970a:	f7f6 fd83 	bl	8000214 <__adddf3>
 800970e:	4622      	mov	r2, r4
 8009710:	462b      	mov	r3, r5
 8009712:	f7f6 ff35 	bl	8000580 <__aeabi_dmul>
 8009716:	a372      	add	r3, pc, #456	@ (adr r3, 80098e0 <__ieee754_pow+0x758>)
 8009718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971c:	f7f6 fd7a 	bl	8000214 <__adddf3>
 8009720:	4622      	mov	r2, r4
 8009722:	4606      	mov	r6, r0
 8009724:	460f      	mov	r7, r1
 8009726:	462b      	mov	r3, r5
 8009728:	4620      	mov	r0, r4
 800972a:	4629      	mov	r1, r5
 800972c:	f7f6 ff28 	bl	8000580 <__aeabi_dmul>
 8009730:	4602      	mov	r2, r0
 8009732:	460b      	mov	r3, r1
 8009734:	4630      	mov	r0, r6
 8009736:	4639      	mov	r1, r7
 8009738:	f7f6 ff22 	bl	8000580 <__aeabi_dmul>
 800973c:	465a      	mov	r2, fp
 800973e:	4604      	mov	r4, r0
 8009740:	460d      	mov	r5, r1
 8009742:	464b      	mov	r3, r9
 8009744:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009748:	f7f6 fd64 	bl	8000214 <__adddf3>
 800974c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009750:	f7f6 ff16 	bl	8000580 <__aeabi_dmul>
 8009754:	4622      	mov	r2, r4
 8009756:	462b      	mov	r3, r5
 8009758:	f7f6 fd5c 	bl	8000214 <__adddf3>
 800975c:	465a      	mov	r2, fp
 800975e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009762:	464b      	mov	r3, r9
 8009764:	4658      	mov	r0, fp
 8009766:	4649      	mov	r1, r9
 8009768:	f7f6 ff0a 	bl	8000580 <__aeabi_dmul>
 800976c:	4b6a      	ldr	r3, [pc, #424]	@ (8009918 <__ieee754_pow+0x790>)
 800976e:	2200      	movs	r2, #0
 8009770:	4606      	mov	r6, r0
 8009772:	460f      	mov	r7, r1
 8009774:	f7f6 fd4e 	bl	8000214 <__adddf3>
 8009778:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800977c:	f7f6 fd4a 	bl	8000214 <__adddf3>
 8009780:	46d8      	mov	r8, fp
 8009782:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8009786:	460d      	mov	r5, r1
 8009788:	465a      	mov	r2, fp
 800978a:	460b      	mov	r3, r1
 800978c:	4640      	mov	r0, r8
 800978e:	4649      	mov	r1, r9
 8009790:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8009794:	f7f6 fef4 	bl	8000580 <__aeabi_dmul>
 8009798:	465c      	mov	r4, fp
 800979a:	4680      	mov	r8, r0
 800979c:	4689      	mov	r9, r1
 800979e:	4b5e      	ldr	r3, [pc, #376]	@ (8009918 <__ieee754_pow+0x790>)
 80097a0:	2200      	movs	r2, #0
 80097a2:	4620      	mov	r0, r4
 80097a4:	4629      	mov	r1, r5
 80097a6:	f7f6 fd33 	bl	8000210 <__aeabi_dsub>
 80097aa:	4632      	mov	r2, r6
 80097ac:	463b      	mov	r3, r7
 80097ae:	f7f6 fd2f 	bl	8000210 <__aeabi_dsub>
 80097b2:	4602      	mov	r2, r0
 80097b4:	460b      	mov	r3, r1
 80097b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80097ba:	f7f6 fd29 	bl	8000210 <__aeabi_dsub>
 80097be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097c2:	f7f6 fedd 	bl	8000580 <__aeabi_dmul>
 80097c6:	4622      	mov	r2, r4
 80097c8:	4606      	mov	r6, r0
 80097ca:	460f      	mov	r7, r1
 80097cc:	462b      	mov	r3, r5
 80097ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097d2:	f7f6 fed5 	bl	8000580 <__aeabi_dmul>
 80097d6:	4602      	mov	r2, r0
 80097d8:	460b      	mov	r3, r1
 80097da:	4630      	mov	r0, r6
 80097dc:	4639      	mov	r1, r7
 80097de:	f7f6 fd19 	bl	8000214 <__adddf3>
 80097e2:	4606      	mov	r6, r0
 80097e4:	460f      	mov	r7, r1
 80097e6:	4602      	mov	r2, r0
 80097e8:	460b      	mov	r3, r1
 80097ea:	4640      	mov	r0, r8
 80097ec:	4649      	mov	r1, r9
 80097ee:	f7f6 fd11 	bl	8000214 <__adddf3>
 80097f2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80097f6:	a33c      	add	r3, pc, #240	@ (adr r3, 80098e8 <__ieee754_pow+0x760>)
 80097f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fc:	4658      	mov	r0, fp
 80097fe:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8009802:	460d      	mov	r5, r1
 8009804:	f7f6 febc 	bl	8000580 <__aeabi_dmul>
 8009808:	465c      	mov	r4, fp
 800980a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800980e:	4642      	mov	r2, r8
 8009810:	464b      	mov	r3, r9
 8009812:	4620      	mov	r0, r4
 8009814:	4629      	mov	r1, r5
 8009816:	f7f6 fcfb 	bl	8000210 <__aeabi_dsub>
 800981a:	4602      	mov	r2, r0
 800981c:	460b      	mov	r3, r1
 800981e:	4630      	mov	r0, r6
 8009820:	4639      	mov	r1, r7
 8009822:	f7f6 fcf5 	bl	8000210 <__aeabi_dsub>
 8009826:	a332      	add	r3, pc, #200	@ (adr r3, 80098f0 <__ieee754_pow+0x768>)
 8009828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982c:	f7f6 fea8 	bl	8000580 <__aeabi_dmul>
 8009830:	a331      	add	r3, pc, #196	@ (adr r3, 80098f8 <__ieee754_pow+0x770>)
 8009832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009836:	4606      	mov	r6, r0
 8009838:	460f      	mov	r7, r1
 800983a:	4620      	mov	r0, r4
 800983c:	4629      	mov	r1, r5
 800983e:	f7f6 fe9f 	bl	8000580 <__aeabi_dmul>
 8009842:	4602      	mov	r2, r0
 8009844:	460b      	mov	r3, r1
 8009846:	4630      	mov	r0, r6
 8009848:	4639      	mov	r1, r7
 800984a:	f7f6 fce3 	bl	8000214 <__adddf3>
 800984e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009850:	4b32      	ldr	r3, [pc, #200]	@ (800991c <__ieee754_pow+0x794>)
 8009852:	4413      	add	r3, r2
 8009854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009858:	f7f6 fcdc 	bl	8000214 <__adddf3>
 800985c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009860:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009862:	f7f6 fe23 	bl	80004ac <__aeabi_i2d>
 8009866:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009868:	4b2d      	ldr	r3, [pc, #180]	@ (8009920 <__ieee754_pow+0x798>)
 800986a:	4413      	add	r3, r2
 800986c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009870:	4606      	mov	r6, r0
 8009872:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009876:	460f      	mov	r7, r1
 8009878:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800987c:	f7f6 fcca 	bl	8000214 <__adddf3>
 8009880:	4642      	mov	r2, r8
 8009882:	464b      	mov	r3, r9
 8009884:	f7f6 fcc6 	bl	8000214 <__adddf3>
 8009888:	4632      	mov	r2, r6
 800988a:	463b      	mov	r3, r7
 800988c:	f7f6 fcc2 	bl	8000214 <__adddf3>
 8009890:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8009894:	4632      	mov	r2, r6
 8009896:	463b      	mov	r3, r7
 8009898:	4658      	mov	r0, fp
 800989a:	460d      	mov	r5, r1
 800989c:	f7f6 fcb8 	bl	8000210 <__aeabi_dsub>
 80098a0:	4642      	mov	r2, r8
 80098a2:	464b      	mov	r3, r9
 80098a4:	f7f6 fcb4 	bl	8000210 <__aeabi_dsub>
 80098a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098ac:	f7f6 fcb0 	bl	8000210 <__aeabi_dsub>
 80098b0:	465c      	mov	r4, fp
 80098b2:	4602      	mov	r2, r0
 80098b4:	e036      	b.n	8009924 <__ieee754_pow+0x79c>
 80098b6:	bf00      	nop
 80098b8:	4a454eef 	.word	0x4a454eef
 80098bc:	3fca7e28 	.word	0x3fca7e28
 80098c0:	93c9db65 	.word	0x93c9db65
 80098c4:	3fcd864a 	.word	0x3fcd864a
 80098c8:	a91d4101 	.word	0xa91d4101
 80098cc:	3fd17460 	.word	0x3fd17460
 80098d0:	518f264d 	.word	0x518f264d
 80098d4:	3fd55555 	.word	0x3fd55555
 80098d8:	db6fabff 	.word	0xdb6fabff
 80098dc:	3fdb6db6 	.word	0x3fdb6db6
 80098e0:	33333303 	.word	0x33333303
 80098e4:	3fe33333 	.word	0x3fe33333
 80098e8:	e0000000 	.word	0xe0000000
 80098ec:	3feec709 	.word	0x3feec709
 80098f0:	dc3a03fd 	.word	0xdc3a03fd
 80098f4:	3feec709 	.word	0x3feec709
 80098f8:	145b01f5 	.word	0x145b01f5
 80098fc:	be3e2fe0 	.word	0xbe3e2fe0
 8009900:	7ff00000 	.word	0x7ff00000
 8009904:	43400000 	.word	0x43400000
 8009908:	0003988e 	.word	0x0003988e
 800990c:	000bb679 	.word	0x000bb679
 8009910:	0800a298 	.word	0x0800a298
 8009914:	3ff00000 	.word	0x3ff00000
 8009918:	40080000 	.word	0x40080000
 800991c:	0800a278 	.word	0x0800a278
 8009920:	0800a288 	.word	0x0800a288
 8009924:	460b      	mov	r3, r1
 8009926:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800992a:	e5d7      	b.n	80094dc <__ieee754_pow+0x354>
 800992c:	f04f 0a01 	mov.w	sl, #1
 8009930:	e65e      	b.n	80095f0 <__ieee754_pow+0x468>
 8009932:	a3b4      	add	r3, pc, #720	@ (adr r3, 8009c04 <__ieee754_pow+0xa7c>)
 8009934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009938:	4630      	mov	r0, r6
 800993a:	4639      	mov	r1, r7
 800993c:	f7f6 fc6a 	bl	8000214 <__adddf3>
 8009940:	4642      	mov	r2, r8
 8009942:	e9cd 0100 	strd	r0, r1, [sp]
 8009946:	464b      	mov	r3, r9
 8009948:	4620      	mov	r0, r4
 800994a:	4629      	mov	r1, r5
 800994c:	f7f6 fc60 	bl	8000210 <__aeabi_dsub>
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009958:	f7f7 f8a2 	bl	8000aa0 <__aeabi_dcmpgt>
 800995c:	2800      	cmp	r0, #0
 800995e:	f47f ae00 	bne.w	8009562 <__ieee754_pow+0x3da>
 8009962:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8009966:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800996a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800996e:	fa43 fa0a 	asr.w	sl, r3, sl
 8009972:	44da      	add	sl, fp
 8009974:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009978:	489d      	ldr	r0, [pc, #628]	@ (8009bf0 <__ieee754_pow+0xa68>)
 800997a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800997e:	4108      	asrs	r0, r1
 8009980:	ea00 030a 	and.w	r3, r0, sl
 8009984:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009988:	f1c1 0114 	rsb	r1, r1, #20
 800998c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8009990:	fa4a fa01 	asr.w	sl, sl, r1
 8009994:	f1bb 0f00 	cmp.w	fp, #0
 8009998:	4640      	mov	r0, r8
 800999a:	4649      	mov	r1, r9
 800999c:	f04f 0200 	mov.w	r2, #0
 80099a0:	bfb8      	it	lt
 80099a2:	f1ca 0a00 	rsblt	sl, sl, #0
 80099a6:	f7f6 fc33 	bl	8000210 <__aeabi_dsub>
 80099aa:	4680      	mov	r8, r0
 80099ac:	4689      	mov	r9, r1
 80099ae:	4632      	mov	r2, r6
 80099b0:	463b      	mov	r3, r7
 80099b2:	4640      	mov	r0, r8
 80099b4:	4649      	mov	r1, r9
 80099b6:	f7f6 fc2d 	bl	8000214 <__adddf3>
 80099ba:	2400      	movs	r4, #0
 80099bc:	a37c      	add	r3, pc, #496	@ (adr r3, 8009bb0 <__ieee754_pow+0xa28>)
 80099be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c2:	4620      	mov	r0, r4
 80099c4:	460d      	mov	r5, r1
 80099c6:	f7f6 fddb 	bl	8000580 <__aeabi_dmul>
 80099ca:	4642      	mov	r2, r8
 80099cc:	e9cd 0100 	strd	r0, r1, [sp]
 80099d0:	464b      	mov	r3, r9
 80099d2:	4620      	mov	r0, r4
 80099d4:	4629      	mov	r1, r5
 80099d6:	f7f6 fc1b 	bl	8000210 <__aeabi_dsub>
 80099da:	4602      	mov	r2, r0
 80099dc:	460b      	mov	r3, r1
 80099de:	4630      	mov	r0, r6
 80099e0:	4639      	mov	r1, r7
 80099e2:	f7f6 fc15 	bl	8000210 <__aeabi_dsub>
 80099e6:	a374      	add	r3, pc, #464	@ (adr r3, 8009bb8 <__ieee754_pow+0xa30>)
 80099e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ec:	f7f6 fdc8 	bl	8000580 <__aeabi_dmul>
 80099f0:	a373      	add	r3, pc, #460	@ (adr r3, 8009bc0 <__ieee754_pow+0xa38>)
 80099f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f6:	4680      	mov	r8, r0
 80099f8:	4689      	mov	r9, r1
 80099fa:	4620      	mov	r0, r4
 80099fc:	4629      	mov	r1, r5
 80099fe:	f7f6 fdbf 	bl	8000580 <__aeabi_dmul>
 8009a02:	4602      	mov	r2, r0
 8009a04:	460b      	mov	r3, r1
 8009a06:	4640      	mov	r0, r8
 8009a08:	4649      	mov	r1, r9
 8009a0a:	f7f6 fc03 	bl	8000214 <__adddf3>
 8009a0e:	4604      	mov	r4, r0
 8009a10:	460d      	mov	r5, r1
 8009a12:	4602      	mov	r2, r0
 8009a14:	460b      	mov	r3, r1
 8009a16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a1a:	f7f6 fbfb 	bl	8000214 <__adddf3>
 8009a1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a22:	4680      	mov	r8, r0
 8009a24:	4689      	mov	r9, r1
 8009a26:	f7f6 fbf3 	bl	8000210 <__aeabi_dsub>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	4620      	mov	r0, r4
 8009a30:	4629      	mov	r1, r5
 8009a32:	f7f6 fbed 	bl	8000210 <__aeabi_dsub>
 8009a36:	4642      	mov	r2, r8
 8009a38:	4606      	mov	r6, r0
 8009a3a:	460f      	mov	r7, r1
 8009a3c:	464b      	mov	r3, r9
 8009a3e:	4640      	mov	r0, r8
 8009a40:	4649      	mov	r1, r9
 8009a42:	f7f6 fd9d 	bl	8000580 <__aeabi_dmul>
 8009a46:	a360      	add	r3, pc, #384	@ (adr r3, 8009bc8 <__ieee754_pow+0xa40>)
 8009a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4c:	4604      	mov	r4, r0
 8009a4e:	460d      	mov	r5, r1
 8009a50:	f7f6 fd96 	bl	8000580 <__aeabi_dmul>
 8009a54:	a35e      	add	r3, pc, #376	@ (adr r3, 8009bd0 <__ieee754_pow+0xa48>)
 8009a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5a:	f7f6 fbd9 	bl	8000210 <__aeabi_dsub>
 8009a5e:	4622      	mov	r2, r4
 8009a60:	462b      	mov	r3, r5
 8009a62:	f7f6 fd8d 	bl	8000580 <__aeabi_dmul>
 8009a66:	a35c      	add	r3, pc, #368	@ (adr r3, 8009bd8 <__ieee754_pow+0xa50>)
 8009a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6c:	f7f6 fbd2 	bl	8000214 <__adddf3>
 8009a70:	4622      	mov	r2, r4
 8009a72:	462b      	mov	r3, r5
 8009a74:	f7f6 fd84 	bl	8000580 <__aeabi_dmul>
 8009a78:	a359      	add	r3, pc, #356	@ (adr r3, 8009be0 <__ieee754_pow+0xa58>)
 8009a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7e:	f7f6 fbc7 	bl	8000210 <__aeabi_dsub>
 8009a82:	4622      	mov	r2, r4
 8009a84:	462b      	mov	r3, r5
 8009a86:	f7f6 fd7b 	bl	8000580 <__aeabi_dmul>
 8009a8a:	a357      	add	r3, pc, #348	@ (adr r3, 8009be8 <__ieee754_pow+0xa60>)
 8009a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a90:	f7f6 fbc0 	bl	8000214 <__adddf3>
 8009a94:	4622      	mov	r2, r4
 8009a96:	462b      	mov	r3, r5
 8009a98:	f7f6 fd72 	bl	8000580 <__aeabi_dmul>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	4640      	mov	r0, r8
 8009aa2:	4649      	mov	r1, r9
 8009aa4:	f7f6 fbb4 	bl	8000210 <__aeabi_dsub>
 8009aa8:	4604      	mov	r4, r0
 8009aaa:	460d      	mov	r5, r1
 8009aac:	4602      	mov	r2, r0
 8009aae:	460b      	mov	r3, r1
 8009ab0:	4640      	mov	r0, r8
 8009ab2:	4649      	mov	r1, r9
 8009ab4:	f7f6 fd64 	bl	8000580 <__aeabi_dmul>
 8009ab8:	2200      	movs	r2, #0
 8009aba:	e9cd 0100 	strd	r0, r1, [sp]
 8009abe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	4629      	mov	r1, r5
 8009ac6:	f7f6 fba3 	bl	8000210 <__aeabi_dsub>
 8009aca:	4602      	mov	r2, r0
 8009acc:	460b      	mov	r3, r1
 8009ace:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ad2:	f7f6 fe7f 	bl	80007d4 <__aeabi_ddiv>
 8009ad6:	4632      	mov	r2, r6
 8009ad8:	4604      	mov	r4, r0
 8009ada:	460d      	mov	r5, r1
 8009adc:	463b      	mov	r3, r7
 8009ade:	4640      	mov	r0, r8
 8009ae0:	4649      	mov	r1, r9
 8009ae2:	f7f6 fd4d 	bl	8000580 <__aeabi_dmul>
 8009ae6:	4632      	mov	r2, r6
 8009ae8:	463b      	mov	r3, r7
 8009aea:	f7f6 fb93 	bl	8000214 <__adddf3>
 8009aee:	4602      	mov	r2, r0
 8009af0:	460b      	mov	r3, r1
 8009af2:	4620      	mov	r0, r4
 8009af4:	4629      	mov	r1, r5
 8009af6:	f7f6 fb8b 	bl	8000210 <__aeabi_dsub>
 8009afa:	4642      	mov	r2, r8
 8009afc:	464b      	mov	r3, r9
 8009afe:	f7f6 fb87 	bl	8000210 <__aeabi_dsub>
 8009b02:	460b      	mov	r3, r1
 8009b04:	4602      	mov	r2, r0
 8009b06:	493b      	ldr	r1, [pc, #236]	@ (8009bf4 <__ieee754_pow+0xa6c>)
 8009b08:	2000      	movs	r0, #0
 8009b0a:	f7f6 fb81 	bl	8000210 <__aeabi_dsub>
 8009b0e:	ec41 0b10 	vmov	d0, r0, r1
 8009b12:	ee10 3a90 	vmov	r3, s1
 8009b16:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009b1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b1e:	da30      	bge.n	8009b82 <__ieee754_pow+0x9fa>
 8009b20:	4650      	mov	r0, sl
 8009b22:	f000 f9f9 	bl	8009f18 <scalbn>
 8009b26:	ec51 0b10 	vmov	r0, r1, d0
 8009b2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b2e:	f7ff bbd2 	b.w	80092d6 <__ieee754_pow+0x14e>
 8009b32:	4c31      	ldr	r4, [pc, #196]	@ (8009bf8 <__ieee754_pow+0xa70>)
 8009b34:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009b38:	42a3      	cmp	r3, r4
 8009b3a:	d91a      	bls.n	8009b72 <__ieee754_pow+0x9ea>
 8009b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8009bfc <__ieee754_pow+0xa74>)
 8009b3e:	440b      	add	r3, r1
 8009b40:	4303      	orrs	r3, r0
 8009b42:	d009      	beq.n	8009b58 <__ieee754_pow+0x9d0>
 8009b44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	f7f6 ff8a 	bl	8000a64 <__aeabi_dcmplt>
 8009b50:	3800      	subs	r0, #0
 8009b52:	bf18      	it	ne
 8009b54:	2001      	movne	r0, #1
 8009b56:	e42b      	b.n	80093b0 <__ieee754_pow+0x228>
 8009b58:	4642      	mov	r2, r8
 8009b5a:	464b      	mov	r3, r9
 8009b5c:	f7f6 fb58 	bl	8000210 <__aeabi_dsub>
 8009b60:	4632      	mov	r2, r6
 8009b62:	463b      	mov	r3, r7
 8009b64:	f7f6 ff92 	bl	8000a8c <__aeabi_dcmpge>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	d1eb      	bne.n	8009b44 <__ieee754_pow+0x9bc>
 8009b6c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8009c0c <__ieee754_pow+0xa84>
 8009b70:	e6f7      	b.n	8009962 <__ieee754_pow+0x7da>
 8009b72:	469a      	mov	sl, r3
 8009b74:	4b22      	ldr	r3, [pc, #136]	@ (8009c00 <__ieee754_pow+0xa78>)
 8009b76:	459a      	cmp	sl, r3
 8009b78:	f63f aef3 	bhi.w	8009962 <__ieee754_pow+0x7da>
 8009b7c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009b80:	e715      	b.n	80099ae <__ieee754_pow+0x826>
 8009b82:	ec51 0b10 	vmov	r0, r1, d0
 8009b86:	4619      	mov	r1, r3
 8009b88:	e7cf      	b.n	8009b2a <__ieee754_pow+0x9a2>
 8009b8a:	491a      	ldr	r1, [pc, #104]	@ (8009bf4 <__ieee754_pow+0xa6c>)
 8009b8c:	2000      	movs	r0, #0
 8009b8e:	f7ff bb18 	b.w	80091c2 <__ieee754_pow+0x3a>
 8009b92:	2000      	movs	r0, #0
 8009b94:	2100      	movs	r1, #0
 8009b96:	f7ff bb14 	b.w	80091c2 <__ieee754_pow+0x3a>
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	4639      	mov	r1, r7
 8009b9e:	f7ff bb10 	b.w	80091c2 <__ieee754_pow+0x3a>
 8009ba2:	460c      	mov	r4, r1
 8009ba4:	f7ff bb5e 	b.w	8009264 <__ieee754_pow+0xdc>
 8009ba8:	2400      	movs	r4, #0
 8009baa:	f7ff bb49 	b.w	8009240 <__ieee754_pow+0xb8>
 8009bae:	bf00      	nop
 8009bb0:	00000000 	.word	0x00000000
 8009bb4:	3fe62e43 	.word	0x3fe62e43
 8009bb8:	fefa39ef 	.word	0xfefa39ef
 8009bbc:	3fe62e42 	.word	0x3fe62e42
 8009bc0:	0ca86c39 	.word	0x0ca86c39
 8009bc4:	be205c61 	.word	0xbe205c61
 8009bc8:	72bea4d0 	.word	0x72bea4d0
 8009bcc:	3e663769 	.word	0x3e663769
 8009bd0:	c5d26bf1 	.word	0xc5d26bf1
 8009bd4:	3ebbbd41 	.word	0x3ebbbd41
 8009bd8:	af25de2c 	.word	0xaf25de2c
 8009bdc:	3f11566a 	.word	0x3f11566a
 8009be0:	16bebd93 	.word	0x16bebd93
 8009be4:	3f66c16c 	.word	0x3f66c16c
 8009be8:	5555553e 	.word	0x5555553e
 8009bec:	3fc55555 	.word	0x3fc55555
 8009bf0:	fff00000 	.word	0xfff00000
 8009bf4:	3ff00000 	.word	0x3ff00000
 8009bf8:	4090cbff 	.word	0x4090cbff
 8009bfc:	3f6f3400 	.word	0x3f6f3400
 8009c00:	3fe00000 	.word	0x3fe00000
 8009c04:	652b82fe 	.word	0x652b82fe
 8009c08:	3c971547 	.word	0x3c971547
 8009c0c:	4090cc00 	.word	0x4090cc00

08009c10 <fabs>:
 8009c10:	ec51 0b10 	vmov	r0, r1, d0
 8009c14:	4602      	mov	r2, r0
 8009c16:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009c1a:	ec43 2b10 	vmov	d0, r2, r3
 8009c1e:	4770      	bx	lr

08009c20 <__ieee754_atan2f>:
 8009c20:	ee10 2a90 	vmov	r2, s1
 8009c24:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8009c28:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8009c2c:	b510      	push	{r4, lr}
 8009c2e:	eef0 7a40 	vmov.f32	s15, s0
 8009c32:	d806      	bhi.n	8009c42 <__ieee754_atan2f+0x22>
 8009c34:	ee10 0a10 	vmov	r0, s0
 8009c38:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8009c3c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009c40:	d904      	bls.n	8009c4c <__ieee754_atan2f+0x2c>
 8009c42:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8009c46:	eeb0 0a67 	vmov.f32	s0, s15
 8009c4a:	bd10      	pop	{r4, pc}
 8009c4c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8009c50:	d103      	bne.n	8009c5a <__ieee754_atan2f+0x3a>
 8009c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c56:	f000 b883 	b.w	8009d60 <atanf>
 8009c5a:	1794      	asrs	r4, r2, #30
 8009c5c:	f004 0402 	and.w	r4, r4, #2
 8009c60:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8009c64:	b943      	cbnz	r3, 8009c78 <__ieee754_atan2f+0x58>
 8009c66:	2c02      	cmp	r4, #2
 8009c68:	d05e      	beq.n	8009d28 <__ieee754_atan2f+0x108>
 8009c6a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8009d3c <__ieee754_atan2f+0x11c>
 8009c6e:	2c03      	cmp	r4, #3
 8009c70:	bf08      	it	eq
 8009c72:	eef0 7a47 	vmoveq.f32	s15, s14
 8009c76:	e7e6      	b.n	8009c46 <__ieee754_atan2f+0x26>
 8009c78:	b941      	cbnz	r1, 8009c8c <__ieee754_atan2f+0x6c>
 8009c7a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8009d40 <__ieee754_atan2f+0x120>
 8009c7e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8009d44 <__ieee754_atan2f+0x124>
 8009c82:	2800      	cmp	r0, #0
 8009c84:	bfb8      	it	lt
 8009c86:	eef0 7a47 	vmovlt.f32	s15, s14
 8009c8a:	e7dc      	b.n	8009c46 <__ieee754_atan2f+0x26>
 8009c8c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8009c90:	d110      	bne.n	8009cb4 <__ieee754_atan2f+0x94>
 8009c92:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009c96:	f104 34ff 	add.w	r4, r4, #4294967295
 8009c9a:	d107      	bne.n	8009cac <__ieee754_atan2f+0x8c>
 8009c9c:	2c02      	cmp	r4, #2
 8009c9e:	d846      	bhi.n	8009d2e <__ieee754_atan2f+0x10e>
 8009ca0:	4b29      	ldr	r3, [pc, #164]	@ (8009d48 <__ieee754_atan2f+0x128>)
 8009ca2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009ca6:	edd3 7a00 	vldr	s15, [r3]
 8009caa:	e7cc      	b.n	8009c46 <__ieee754_atan2f+0x26>
 8009cac:	2c02      	cmp	r4, #2
 8009cae:	d841      	bhi.n	8009d34 <__ieee754_atan2f+0x114>
 8009cb0:	4b26      	ldr	r3, [pc, #152]	@ (8009d4c <__ieee754_atan2f+0x12c>)
 8009cb2:	e7f6      	b.n	8009ca2 <__ieee754_atan2f+0x82>
 8009cb4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009cb8:	d0df      	beq.n	8009c7a <__ieee754_atan2f+0x5a>
 8009cba:	1a5b      	subs	r3, r3, r1
 8009cbc:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8009cc0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8009cc4:	da1a      	bge.n	8009cfc <__ieee754_atan2f+0xdc>
 8009cc6:	2a00      	cmp	r2, #0
 8009cc8:	da01      	bge.n	8009cce <__ieee754_atan2f+0xae>
 8009cca:	313c      	adds	r1, #60	@ 0x3c
 8009ccc:	db19      	blt.n	8009d02 <__ieee754_atan2f+0xe2>
 8009cce:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8009cd2:	f000 f919 	bl	8009f08 <fabsf>
 8009cd6:	f000 f843 	bl	8009d60 <atanf>
 8009cda:	eef0 7a40 	vmov.f32	s15, s0
 8009cde:	2c01      	cmp	r4, #1
 8009ce0:	d012      	beq.n	8009d08 <__ieee754_atan2f+0xe8>
 8009ce2:	2c02      	cmp	r4, #2
 8009ce4:	d017      	beq.n	8009d16 <__ieee754_atan2f+0xf6>
 8009ce6:	2c00      	cmp	r4, #0
 8009ce8:	d0ad      	beq.n	8009c46 <__ieee754_atan2f+0x26>
 8009cea:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009d50 <__ieee754_atan2f+0x130>
 8009cee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009cf2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8009d54 <__ieee754_atan2f+0x134>
 8009cf6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009cfa:	e7a4      	b.n	8009c46 <__ieee754_atan2f+0x26>
 8009cfc:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8009d40 <__ieee754_atan2f+0x120>
 8009d00:	e7ed      	b.n	8009cde <__ieee754_atan2f+0xbe>
 8009d02:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8009d58 <__ieee754_atan2f+0x138>
 8009d06:	e7ea      	b.n	8009cde <__ieee754_atan2f+0xbe>
 8009d08:	ee17 3a90 	vmov	r3, s15
 8009d0c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009d10:	ee07 3a90 	vmov	s15, r3
 8009d14:	e797      	b.n	8009c46 <__ieee754_atan2f+0x26>
 8009d16:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8009d50 <__ieee754_atan2f+0x130>
 8009d1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009d1e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8009d54 <__ieee754_atan2f+0x134>
 8009d22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d26:	e78e      	b.n	8009c46 <__ieee754_atan2f+0x26>
 8009d28:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8009d54 <__ieee754_atan2f+0x134>
 8009d2c:	e78b      	b.n	8009c46 <__ieee754_atan2f+0x26>
 8009d2e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8009d5c <__ieee754_atan2f+0x13c>
 8009d32:	e788      	b.n	8009c46 <__ieee754_atan2f+0x26>
 8009d34:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8009d58 <__ieee754_atan2f+0x138>
 8009d38:	e785      	b.n	8009c46 <__ieee754_atan2f+0x26>
 8009d3a:	bf00      	nop
 8009d3c:	c0490fdb 	.word	0xc0490fdb
 8009d40:	3fc90fdb 	.word	0x3fc90fdb
 8009d44:	bfc90fdb 	.word	0xbfc90fdb
 8009d48:	0800a2b4 	.word	0x0800a2b4
 8009d4c:	0800a2a8 	.word	0x0800a2a8
 8009d50:	33bbbd2e 	.word	0x33bbbd2e
 8009d54:	40490fdb 	.word	0x40490fdb
 8009d58:	00000000 	.word	0x00000000
 8009d5c:	3f490fdb 	.word	0x3f490fdb

08009d60 <atanf>:
 8009d60:	b538      	push	{r3, r4, r5, lr}
 8009d62:	ee10 5a10 	vmov	r5, s0
 8009d66:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8009d6a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8009d6e:	eef0 7a40 	vmov.f32	s15, s0
 8009d72:	d310      	bcc.n	8009d96 <atanf+0x36>
 8009d74:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8009d78:	d904      	bls.n	8009d84 <atanf+0x24>
 8009d7a:	ee70 7a00 	vadd.f32	s15, s0, s0
 8009d7e:	eeb0 0a67 	vmov.f32	s0, s15
 8009d82:	bd38      	pop	{r3, r4, r5, pc}
 8009d84:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8009ebc <atanf+0x15c>
 8009d88:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8009ec0 <atanf+0x160>
 8009d8c:	2d00      	cmp	r5, #0
 8009d8e:	bfc8      	it	gt
 8009d90:	eef0 7a47 	vmovgt.f32	s15, s14
 8009d94:	e7f3      	b.n	8009d7e <atanf+0x1e>
 8009d96:	4b4b      	ldr	r3, [pc, #300]	@ (8009ec4 <atanf+0x164>)
 8009d98:	429c      	cmp	r4, r3
 8009d9a:	d810      	bhi.n	8009dbe <atanf+0x5e>
 8009d9c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8009da0:	d20a      	bcs.n	8009db8 <atanf+0x58>
 8009da2:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8009ec8 <atanf+0x168>
 8009da6:	ee30 7a07 	vadd.f32	s14, s0, s14
 8009daa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dae:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009db6:	dce2      	bgt.n	8009d7e <atanf+0x1e>
 8009db8:	f04f 33ff 	mov.w	r3, #4294967295
 8009dbc:	e013      	b.n	8009de6 <atanf+0x86>
 8009dbe:	f000 f8a3 	bl	8009f08 <fabsf>
 8009dc2:	4b42      	ldr	r3, [pc, #264]	@ (8009ecc <atanf+0x16c>)
 8009dc4:	429c      	cmp	r4, r3
 8009dc6:	d84f      	bhi.n	8009e68 <atanf+0x108>
 8009dc8:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8009dcc:	429c      	cmp	r4, r3
 8009dce:	d841      	bhi.n	8009e54 <atanf+0xf4>
 8009dd0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8009dd4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8009dd8:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009ddc:	2300      	movs	r3, #0
 8009dde:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009de2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009de6:	1c5a      	adds	r2, r3, #1
 8009de8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8009dec:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8009ed0 <atanf+0x170>
 8009df0:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8009ed4 <atanf+0x174>
 8009df4:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8009ed8 <atanf+0x178>
 8009df8:	ee66 6a06 	vmul.f32	s13, s12, s12
 8009dfc:	eee6 5a87 	vfma.f32	s11, s13, s14
 8009e00:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8009edc <atanf+0x17c>
 8009e04:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009e08:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8009ee0 <atanf+0x180>
 8009e0c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009e10:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8009ee4 <atanf+0x184>
 8009e14:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009e18:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009ee8 <atanf+0x188>
 8009e1c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009e20:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8009eec <atanf+0x18c>
 8009e24:	eea6 5a87 	vfma.f32	s10, s13, s14
 8009e28:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8009ef0 <atanf+0x190>
 8009e2c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009e30:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8009ef4 <atanf+0x194>
 8009e34:	eea7 5a26 	vfma.f32	s10, s14, s13
 8009e38:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8009ef8 <atanf+0x198>
 8009e3c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009e40:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009e44:	eea5 7a86 	vfma.f32	s14, s11, s12
 8009e48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009e4c:	d121      	bne.n	8009e92 <atanf+0x132>
 8009e4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009e52:	e794      	b.n	8009d7e <atanf+0x1e>
 8009e54:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009e58:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009e5c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009e60:	2301      	movs	r3, #1
 8009e62:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009e66:	e7be      	b.n	8009de6 <atanf+0x86>
 8009e68:	4b24      	ldr	r3, [pc, #144]	@ (8009efc <atanf+0x19c>)
 8009e6a:	429c      	cmp	r4, r3
 8009e6c:	d80b      	bhi.n	8009e86 <atanf+0x126>
 8009e6e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8009e72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e76:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009e7a:	2302      	movs	r3, #2
 8009e7c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009e80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e84:	e7af      	b.n	8009de6 <atanf+0x86>
 8009e86:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8009e8a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009e8e:	2303      	movs	r3, #3
 8009e90:	e7a9      	b.n	8009de6 <atanf+0x86>
 8009e92:	4a1b      	ldr	r2, [pc, #108]	@ (8009f00 <atanf+0x1a0>)
 8009e94:	491b      	ldr	r1, [pc, #108]	@ (8009f04 <atanf+0x1a4>)
 8009e96:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009e9a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009e9e:	edd3 6a00 	vldr	s13, [r3]
 8009ea2:	ee37 7a66 	vsub.f32	s14, s14, s13
 8009ea6:	2d00      	cmp	r5, #0
 8009ea8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009eac:	edd2 7a00 	vldr	s15, [r2]
 8009eb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009eb4:	bfb8      	it	lt
 8009eb6:	eef1 7a67 	vneglt.f32	s15, s15
 8009eba:	e760      	b.n	8009d7e <atanf+0x1e>
 8009ebc:	bfc90fdb 	.word	0xbfc90fdb
 8009ec0:	3fc90fdb 	.word	0x3fc90fdb
 8009ec4:	3edfffff 	.word	0x3edfffff
 8009ec8:	7149f2ca 	.word	0x7149f2ca
 8009ecc:	3f97ffff 	.word	0x3f97ffff
 8009ed0:	3c8569d7 	.word	0x3c8569d7
 8009ed4:	3d4bda59 	.word	0x3d4bda59
 8009ed8:	bd6ef16b 	.word	0xbd6ef16b
 8009edc:	3d886b35 	.word	0x3d886b35
 8009ee0:	3dba2e6e 	.word	0x3dba2e6e
 8009ee4:	3e124925 	.word	0x3e124925
 8009ee8:	3eaaaaab 	.word	0x3eaaaaab
 8009eec:	bd15a221 	.word	0xbd15a221
 8009ef0:	bd9d8795 	.word	0xbd9d8795
 8009ef4:	bde38e38 	.word	0xbde38e38
 8009ef8:	be4ccccd 	.word	0xbe4ccccd
 8009efc:	401bffff 	.word	0x401bffff
 8009f00:	0800a2d0 	.word	0x0800a2d0
 8009f04:	0800a2c0 	.word	0x0800a2c0

08009f08 <fabsf>:
 8009f08:	ee10 3a10 	vmov	r3, s0
 8009f0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009f10:	ee00 3a10 	vmov	s0, r3
 8009f14:	4770      	bx	lr
	...

08009f18 <scalbn>:
 8009f18:	b570      	push	{r4, r5, r6, lr}
 8009f1a:	ec55 4b10 	vmov	r4, r5, d0
 8009f1e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009f22:	4606      	mov	r6, r0
 8009f24:	462b      	mov	r3, r5
 8009f26:	b991      	cbnz	r1, 8009f4e <scalbn+0x36>
 8009f28:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009f2c:	4323      	orrs	r3, r4
 8009f2e:	d03d      	beq.n	8009fac <scalbn+0x94>
 8009f30:	4b35      	ldr	r3, [pc, #212]	@ (800a008 <scalbn+0xf0>)
 8009f32:	4620      	mov	r0, r4
 8009f34:	4629      	mov	r1, r5
 8009f36:	2200      	movs	r2, #0
 8009f38:	f7f6 fb22 	bl	8000580 <__aeabi_dmul>
 8009f3c:	4b33      	ldr	r3, [pc, #204]	@ (800a00c <scalbn+0xf4>)
 8009f3e:	429e      	cmp	r6, r3
 8009f40:	4604      	mov	r4, r0
 8009f42:	460d      	mov	r5, r1
 8009f44:	da0f      	bge.n	8009f66 <scalbn+0x4e>
 8009f46:	a328      	add	r3, pc, #160	@ (adr r3, 8009fe8 <scalbn+0xd0>)
 8009f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4c:	e01e      	b.n	8009f8c <scalbn+0x74>
 8009f4e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8009f52:	4291      	cmp	r1, r2
 8009f54:	d10b      	bne.n	8009f6e <scalbn+0x56>
 8009f56:	4622      	mov	r2, r4
 8009f58:	4620      	mov	r0, r4
 8009f5a:	4629      	mov	r1, r5
 8009f5c:	f7f6 f95a 	bl	8000214 <__adddf3>
 8009f60:	4604      	mov	r4, r0
 8009f62:	460d      	mov	r5, r1
 8009f64:	e022      	b.n	8009fac <scalbn+0x94>
 8009f66:	460b      	mov	r3, r1
 8009f68:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009f6c:	3936      	subs	r1, #54	@ 0x36
 8009f6e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8009f72:	4296      	cmp	r6, r2
 8009f74:	dd0d      	ble.n	8009f92 <scalbn+0x7a>
 8009f76:	2d00      	cmp	r5, #0
 8009f78:	a11d      	add	r1, pc, #116	@ (adr r1, 8009ff0 <scalbn+0xd8>)
 8009f7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f7e:	da02      	bge.n	8009f86 <scalbn+0x6e>
 8009f80:	a11d      	add	r1, pc, #116	@ (adr r1, 8009ff8 <scalbn+0xe0>)
 8009f82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f86:	a31a      	add	r3, pc, #104	@ (adr r3, 8009ff0 <scalbn+0xd8>)
 8009f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8c:	f7f6 faf8 	bl	8000580 <__aeabi_dmul>
 8009f90:	e7e6      	b.n	8009f60 <scalbn+0x48>
 8009f92:	1872      	adds	r2, r6, r1
 8009f94:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009f98:	428a      	cmp	r2, r1
 8009f9a:	dcec      	bgt.n	8009f76 <scalbn+0x5e>
 8009f9c:	2a00      	cmp	r2, #0
 8009f9e:	dd08      	ble.n	8009fb2 <scalbn+0x9a>
 8009fa0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009fa4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009fa8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009fac:	ec45 4b10 	vmov	d0, r4, r5
 8009fb0:	bd70      	pop	{r4, r5, r6, pc}
 8009fb2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009fb6:	da08      	bge.n	8009fca <scalbn+0xb2>
 8009fb8:	2d00      	cmp	r5, #0
 8009fba:	a10b      	add	r1, pc, #44	@ (adr r1, 8009fe8 <scalbn+0xd0>)
 8009fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fc0:	dac1      	bge.n	8009f46 <scalbn+0x2e>
 8009fc2:	a10f      	add	r1, pc, #60	@ (adr r1, 800a000 <scalbn+0xe8>)
 8009fc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fc8:	e7bd      	b.n	8009f46 <scalbn+0x2e>
 8009fca:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009fce:	3236      	adds	r2, #54	@ 0x36
 8009fd0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009fd4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009fd8:	4620      	mov	r0, r4
 8009fda:	4b0d      	ldr	r3, [pc, #52]	@ (800a010 <scalbn+0xf8>)
 8009fdc:	4629      	mov	r1, r5
 8009fde:	2200      	movs	r2, #0
 8009fe0:	e7d4      	b.n	8009f8c <scalbn+0x74>
 8009fe2:	bf00      	nop
 8009fe4:	f3af 8000 	nop.w
 8009fe8:	c2f8f359 	.word	0xc2f8f359
 8009fec:	01a56e1f 	.word	0x01a56e1f
 8009ff0:	8800759c 	.word	0x8800759c
 8009ff4:	7e37e43c 	.word	0x7e37e43c
 8009ff8:	8800759c 	.word	0x8800759c
 8009ffc:	fe37e43c 	.word	0xfe37e43c
 800a000:	c2f8f359 	.word	0xc2f8f359
 800a004:	81a56e1f 	.word	0x81a56e1f
 800a008:	43500000 	.word	0x43500000
 800a00c:	ffff3cb0 	.word	0xffff3cb0
 800a010:	3c900000 	.word	0x3c900000

0800a014 <with_errno>:
 800a014:	b510      	push	{r4, lr}
 800a016:	ed2d 8b02 	vpush	{d8}
 800a01a:	eeb0 8a40 	vmov.f32	s16, s0
 800a01e:	eef0 8a60 	vmov.f32	s17, s1
 800a022:	4604      	mov	r4, r0
 800a024:	f7fe ff8e 	bl	8008f44 <__errno>
 800a028:	eeb0 0a48 	vmov.f32	s0, s16
 800a02c:	eef0 0a68 	vmov.f32	s1, s17
 800a030:	ecbd 8b02 	vpop	{d8}
 800a034:	6004      	str	r4, [r0, #0]
 800a036:	bd10      	pop	{r4, pc}

0800a038 <xflow>:
 800a038:	4603      	mov	r3, r0
 800a03a:	b507      	push	{r0, r1, r2, lr}
 800a03c:	ec51 0b10 	vmov	r0, r1, d0
 800a040:	b183      	cbz	r3, 800a064 <xflow+0x2c>
 800a042:	4602      	mov	r2, r0
 800a044:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a048:	e9cd 2300 	strd	r2, r3, [sp]
 800a04c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a050:	f7f6 fa96 	bl	8000580 <__aeabi_dmul>
 800a054:	ec41 0b10 	vmov	d0, r0, r1
 800a058:	2022      	movs	r0, #34	@ 0x22
 800a05a:	b003      	add	sp, #12
 800a05c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a060:	f7ff bfd8 	b.w	800a014 <with_errno>
 800a064:	4602      	mov	r2, r0
 800a066:	460b      	mov	r3, r1
 800a068:	e7ee      	b.n	800a048 <xflow+0x10>
 800a06a:	0000      	movs	r0, r0
 800a06c:	0000      	movs	r0, r0
	...

0800a070 <__math_uflow>:
 800a070:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a078 <__math_uflow+0x8>
 800a074:	f7ff bfe0 	b.w	800a038 <xflow>
 800a078:	00000000 	.word	0x00000000
 800a07c:	10000000 	.word	0x10000000

0800a080 <__math_oflow>:
 800a080:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a088 <__math_oflow+0x8>
 800a084:	f7ff bfd8 	b.w	800a038 <xflow>
 800a088:	00000000 	.word	0x00000000
 800a08c:	70000000 	.word	0x70000000

0800a090 <__ieee754_sqrt>:
 800a090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a094:	4a68      	ldr	r2, [pc, #416]	@ (800a238 <__ieee754_sqrt+0x1a8>)
 800a096:	ec55 4b10 	vmov	r4, r5, d0
 800a09a:	43aa      	bics	r2, r5
 800a09c:	462b      	mov	r3, r5
 800a09e:	4621      	mov	r1, r4
 800a0a0:	d110      	bne.n	800a0c4 <__ieee754_sqrt+0x34>
 800a0a2:	4622      	mov	r2, r4
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	4629      	mov	r1, r5
 800a0a8:	f7f6 fa6a 	bl	8000580 <__aeabi_dmul>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	4629      	mov	r1, r5
 800a0b4:	f7f6 f8ae 	bl	8000214 <__adddf3>
 800a0b8:	4604      	mov	r4, r0
 800a0ba:	460d      	mov	r5, r1
 800a0bc:	ec45 4b10 	vmov	d0, r4, r5
 800a0c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c4:	2d00      	cmp	r5, #0
 800a0c6:	dc0e      	bgt.n	800a0e6 <__ieee754_sqrt+0x56>
 800a0c8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a0cc:	4322      	orrs	r2, r4
 800a0ce:	d0f5      	beq.n	800a0bc <__ieee754_sqrt+0x2c>
 800a0d0:	b19d      	cbz	r5, 800a0fa <__ieee754_sqrt+0x6a>
 800a0d2:	4622      	mov	r2, r4
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	4629      	mov	r1, r5
 800a0d8:	f7f6 f89a 	bl	8000210 <__aeabi_dsub>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	460b      	mov	r3, r1
 800a0e0:	f7f6 fb78 	bl	80007d4 <__aeabi_ddiv>
 800a0e4:	e7e8      	b.n	800a0b8 <__ieee754_sqrt+0x28>
 800a0e6:	152a      	asrs	r2, r5, #20
 800a0e8:	d115      	bne.n	800a116 <__ieee754_sqrt+0x86>
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	e009      	b.n	800a102 <__ieee754_sqrt+0x72>
 800a0ee:	0acb      	lsrs	r3, r1, #11
 800a0f0:	3a15      	subs	r2, #21
 800a0f2:	0549      	lsls	r1, r1, #21
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d0fa      	beq.n	800a0ee <__ieee754_sqrt+0x5e>
 800a0f8:	e7f7      	b.n	800a0ea <__ieee754_sqrt+0x5a>
 800a0fa:	462a      	mov	r2, r5
 800a0fc:	e7fa      	b.n	800a0f4 <__ieee754_sqrt+0x64>
 800a0fe:	005b      	lsls	r3, r3, #1
 800a100:	3001      	adds	r0, #1
 800a102:	02dc      	lsls	r4, r3, #11
 800a104:	d5fb      	bpl.n	800a0fe <__ieee754_sqrt+0x6e>
 800a106:	1e44      	subs	r4, r0, #1
 800a108:	1b12      	subs	r2, r2, r4
 800a10a:	f1c0 0420 	rsb	r4, r0, #32
 800a10e:	fa21 f404 	lsr.w	r4, r1, r4
 800a112:	4323      	orrs	r3, r4
 800a114:	4081      	lsls	r1, r0
 800a116:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a11a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800a11e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a122:	07d2      	lsls	r2, r2, #31
 800a124:	bf5c      	itt	pl
 800a126:	005b      	lslpl	r3, r3, #1
 800a128:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a12c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a130:	bf58      	it	pl
 800a132:	0049      	lslpl	r1, r1, #1
 800a134:	2600      	movs	r6, #0
 800a136:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a13a:	106d      	asrs	r5, r5, #1
 800a13c:	0049      	lsls	r1, r1, #1
 800a13e:	2016      	movs	r0, #22
 800a140:	4632      	mov	r2, r6
 800a142:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a146:	1917      	adds	r7, r2, r4
 800a148:	429f      	cmp	r7, r3
 800a14a:	bfde      	ittt	le
 800a14c:	193a      	addle	r2, r7, r4
 800a14e:	1bdb      	suble	r3, r3, r7
 800a150:	1936      	addle	r6, r6, r4
 800a152:	0fcf      	lsrs	r7, r1, #31
 800a154:	3801      	subs	r0, #1
 800a156:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800a15a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a15e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a162:	d1f0      	bne.n	800a146 <__ieee754_sqrt+0xb6>
 800a164:	4604      	mov	r4, r0
 800a166:	2720      	movs	r7, #32
 800a168:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a16c:	429a      	cmp	r2, r3
 800a16e:	eb00 0e0c 	add.w	lr, r0, ip
 800a172:	db02      	blt.n	800a17a <__ieee754_sqrt+0xea>
 800a174:	d113      	bne.n	800a19e <__ieee754_sqrt+0x10e>
 800a176:	458e      	cmp	lr, r1
 800a178:	d811      	bhi.n	800a19e <__ieee754_sqrt+0x10e>
 800a17a:	f1be 0f00 	cmp.w	lr, #0
 800a17e:	eb0e 000c 	add.w	r0, lr, ip
 800a182:	da42      	bge.n	800a20a <__ieee754_sqrt+0x17a>
 800a184:	2800      	cmp	r0, #0
 800a186:	db40      	blt.n	800a20a <__ieee754_sqrt+0x17a>
 800a188:	f102 0801 	add.w	r8, r2, #1
 800a18c:	1a9b      	subs	r3, r3, r2
 800a18e:	458e      	cmp	lr, r1
 800a190:	bf88      	it	hi
 800a192:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a196:	eba1 010e 	sub.w	r1, r1, lr
 800a19a:	4464      	add	r4, ip
 800a19c:	4642      	mov	r2, r8
 800a19e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a1a2:	3f01      	subs	r7, #1
 800a1a4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a1a8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a1ac:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a1b0:	d1dc      	bne.n	800a16c <__ieee754_sqrt+0xdc>
 800a1b2:	4319      	orrs	r1, r3
 800a1b4:	d01b      	beq.n	800a1ee <__ieee754_sqrt+0x15e>
 800a1b6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800a23c <__ieee754_sqrt+0x1ac>
 800a1ba:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800a240 <__ieee754_sqrt+0x1b0>
 800a1be:	e9da 0100 	ldrd	r0, r1, [sl]
 800a1c2:	e9db 2300 	ldrd	r2, r3, [fp]
 800a1c6:	f7f6 f823 	bl	8000210 <__aeabi_dsub>
 800a1ca:	e9da 8900 	ldrd	r8, r9, [sl]
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	4640      	mov	r0, r8
 800a1d4:	4649      	mov	r1, r9
 800a1d6:	f7f6 fc4f 	bl	8000a78 <__aeabi_dcmple>
 800a1da:	b140      	cbz	r0, 800a1ee <__ieee754_sqrt+0x15e>
 800a1dc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a1e0:	e9da 0100 	ldrd	r0, r1, [sl]
 800a1e4:	e9db 2300 	ldrd	r2, r3, [fp]
 800a1e8:	d111      	bne.n	800a20e <__ieee754_sqrt+0x17e>
 800a1ea:	3601      	adds	r6, #1
 800a1ec:	463c      	mov	r4, r7
 800a1ee:	1072      	asrs	r2, r6, #1
 800a1f0:	0863      	lsrs	r3, r4, #1
 800a1f2:	07f1      	lsls	r1, r6, #31
 800a1f4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a1f8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a1fc:	bf48      	it	mi
 800a1fe:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a202:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800a206:	4618      	mov	r0, r3
 800a208:	e756      	b.n	800a0b8 <__ieee754_sqrt+0x28>
 800a20a:	4690      	mov	r8, r2
 800a20c:	e7be      	b.n	800a18c <__ieee754_sqrt+0xfc>
 800a20e:	f7f6 f801 	bl	8000214 <__adddf3>
 800a212:	e9da 8900 	ldrd	r8, r9, [sl]
 800a216:	4602      	mov	r2, r0
 800a218:	460b      	mov	r3, r1
 800a21a:	4640      	mov	r0, r8
 800a21c:	4649      	mov	r1, r9
 800a21e:	f7f6 fc21 	bl	8000a64 <__aeabi_dcmplt>
 800a222:	b120      	cbz	r0, 800a22e <__ieee754_sqrt+0x19e>
 800a224:	1ca0      	adds	r0, r4, #2
 800a226:	bf08      	it	eq
 800a228:	3601      	addeq	r6, #1
 800a22a:	3402      	adds	r4, #2
 800a22c:	e7df      	b.n	800a1ee <__ieee754_sqrt+0x15e>
 800a22e:	1c63      	adds	r3, r4, #1
 800a230:	f023 0401 	bic.w	r4, r3, #1
 800a234:	e7db      	b.n	800a1ee <__ieee754_sqrt+0x15e>
 800a236:	bf00      	nop
 800a238:	7ff00000 	.word	0x7ff00000
 800a23c:	20000090 	.word	0x20000090
 800a240:	20000088 	.word	0x20000088

0800a244 <_init>:
 800a244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a246:	bf00      	nop
 800a248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a24a:	bc08      	pop	{r3}
 800a24c:	469e      	mov	lr, r3
 800a24e:	4770      	bx	lr

0800a250 <_fini>:
 800a250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a252:	bf00      	nop
 800a254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a256:	bc08      	pop	{r3}
 800a258:	469e      	mov	lr, r3
 800a25a:	4770      	bx	lr
